!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCEPTINFO	sdk/aMTCPService.h	/^		typedef std::map<int,stAcceptInfo> ACCEPTINFO;$/;"	t	class:aMTCPService
ACCEPTINFO_IT	sdk/aMTCPService.h	/^		typedef std::map<int,stAcceptInfo>::iterator ACCEPTINFO_IT;$/;"	t	class:aMTCPService
AFTER	sdk/aRedisClient.h	/^	AFTER,$/;"	e	enum:InsertDirection
AGEERR_SHM	sdk/ErrorCode.h	12;"	d
AGEERR_SHM_BADALLOC	sdk/ErrorCode.h	15;"	d
AGEERR_SHM_NOT_EXISTS	sdk/ErrorCode.h	16;"	d
AGEERR_UNKNOW	sdk/ErrorCode.h	11;"	d
AGE_MSGMAP	sdk/aMsgCallBack.h	/^} AGE_MSGMAP;$/;"	t	typeref:struct:stAgeMsgMap
AGE_MSGMAP_ENTRY	sdk/aMsgCallBack.h	/^typedef __gnu_cxx::hash_map<std::string,AGE_PMSG,Age::key_hash,Age::key_equal> AGE_MSGMAP_ENTRY;$/;"	t
AGE_PMSG	sdk/aMsgCallBack.h	/^typedef bool (aMsgtarget::*AGE_PMSG)(const void * msg);$/;"	t
AHMMap	sdk/aDef.h	86;"	d
AHMap	sdk/aDef.h	82;"	d
ALARM	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::ALARM = new aLogger::aLevel(LEVELALARM);$/;"	m	class:aLogger::aLevel	file:
ALARM	sdk/aLogger.h	/^			static const aLevel * ALARM;$/;"	m	class:aLogger::aLevel
ALARM_INT	sdk/aLogger.h	/^				ALARM_INT	=	log4cxx::Level::ERROR_INT,$/;"	e	enum:aLogger::aLevel::aLevelInt
ALL	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::ALL = new aLogger::aLevel(log4cxx::Level::getAll());$/;"	m	class:aLogger::aLevel	file:
ALL	sdk/aLogger.h	/^			static const aLevel * ALL;$/;"	m	class:aLogger::aLevel
AList	sdk/aDef.h	66;"	d
AMMap	sdk/aDef.h	58;"	d
AMSet	sdk/aDef.h	74;"	d
AMap	sdk/aDef.h	54;"	d
AND	sdk/aRedisClient.h	/^	AND = 0, $/;"	e	enum:BitOp
ASet	sdk/aDef.h	70;"	d
AStr	sdk/aDef.h	50;"	d
ATuple	sdk/aDef.h	78;"	d
AVec	sdk/aDef.h	62;"	d
Age	sdk/Age.cpp	/^namespace Age{$/;"	n	file:
Age	sdk/Age.h	/^namespace Age$/;"	n
Age	sdk/aBase64.cpp	/^namespace Age$/;"	n	file:
Age	sdk/aBase64.h	/^namespace Age$/;"	n
Age	sdk/aFunc.h	/^namespace Age$/;"	n
BEFORE	sdk/aRedisClient.h	/^	BEFORE = 0,$/;"	e	enum:InsertDirection
BEGIN_MESSAGE_MAP	sdk/aMsgCallBack.h	34;"	d
BEGIN_PACK	sdk/aMsgCallBack.h	53;"	d
BILLSERVER	sdk/aDef.h	/^	BILLSERVER		= 70, \/**<计费服务器>*\/$/;"	e	enum:__anon3
BYTE	sdk/aDef.h	/^typedef unsigned char BYTE;$/;"	t
Backward	sdk/aVec3.h	/^		static const aVector3 Backward;$/;"	m	class:aVector3
BitOp	sdk/aRedisClient.h	/^enum BitOp $/;"	g
BitOp_Num	sdk/aRedisClient.h	/^	BitOp_Num$/;"	e	enum:BitOp
CHAR	sdk/aDef.h	/^typedef char CHAR;$/;"	t
CHECK_CURR_PTR	sdk/aMemStream.h	21;"	d
CONSOLE	sdk/aLogger.cpp	/^const char CONSOLE[] = "console";$/;"	v
CRCTable	sdk/aFunc.h	/^	static  int CRCTable[256];$/;"	m	namespace:Age
Callback	sdk/aThread.h	/^		struct Callback$/;"	s	class:aThreadGroup
ConnectState	sdk/aTCPClient.h	/^		enum ConnectState$/;"	g	class:aTCPClient
Container	sdk/aThread.h	/^		typedef std::vector<aThread*> Container;$/;"	t	class:aThreadGroup
DATA_BUFFER_SIZE	sdk/aSerialization.h	20;"	d
DATA_CALLBACK_CONST_ITER	sdk/aShareMem.h	/^		typedef  DATA_CALLBACK_MAP::const_iterator DATA_CALLBACK_CONST_ITER;$/;"	t	class:aShareMem
DATA_CALLBACK_ITER	sdk/aShareMem.h	/^		typedef  DATA_CALLBACK_MAP::iterator DATA_CALLBACK_ITER;$/;"	t	class:aShareMem
DATA_CALLBACK_MAP	sdk/aShareMem.h	/^		typedef std::map<unsigned short,LPRESUMECALLBACK > DATA_CALLBACK_MAP;$/;"	t	class:aShareMem
DATA_CALL_FUNC	sdk/aShareMem.h	/^typedef void ( * DATA_CALL_FUNC)( void * addr); $/;"	t
DBHANDLE	sdk/aDBConnectPool.h	/^typedef unsigned int DBHANDLE;$/;"	t
DBSTATE	sdk/aDBConnectPool.h	/^enum DBSTATE$/;"	g
DBTYPE	sdk/aTableDef.h	/^} DBTYPE ;$/;"	t	typeref:enum:__anon7
DBVARTYPE	sdk/aTable.h	/^			explicit DBVARTYPE(const X & bdata)$/;"	f	class:DBVARTYPE
DBVARTYPE	sdk/aTable.h	/^		DBVARTYPE():_bData(1,'\\0')$/;"	f	class:DBVARTYPE
DBVARTYPE	sdk/aTable.h	/^		DBVARTYPE(const DBVARTYPE & bData): _bData(bData._bData)$/;"	f	class:DBVARTYPE
DBVARTYPE	sdk/aTable.h	/^class DBVARTYPE$/;"	c
DB_BIN	sdk/aTableDef.h	/^	DB_BIN,$/;"	e	enum:__anon7
DB_BIN2	sdk/aTableDef.h	/^	DB_BIN2,$/;"	e	enum:__anon7
DB_BYTE	sdk/aTableDef.h	/^	DB_BYTE,$/;"	e	enum:__anon7
DB_CHAR	sdk/aTableDef.h	/^	DB_CHAR,$/;"	e	enum:__anon7
DB_DWORD	sdk/aTableDef.h	/^	DB_DWORD,$/;"	e	enum:__anon7
DB_FLOAT	sdk/aTableDef.h	/^	DB_FLOAT,$/;"	e	enum:__anon7
DB_LONG	sdk/aTableDef.h	/^	DB_LONG,$/;"	e	enum:__anon7
DB_LONGLONG	sdk/aTableDef.h	/^	DB_LONGLONG,$/;"	e	enum:__anon7
DB_NONE	sdk/aTableDef.h	/^	DB_NONE$/;"	e	enum:__anon7
DB_QWORD	sdk/aTableDef.h	/^	DB_QWORD,$/;"	e	enum:__anon7
DB_SHORT	sdk/aTableDef.h	/^	DB_SHORT,$/;"	e	enum:__anon7
DB_STR	sdk/aTableDef.h	/^	DB_STR,$/;"	e	enum:__anon7
DB_WORD	sdk/aTableDef.h	/^	DB_WORD,$/;"	e	enum:__anon7
DB_ZIP	sdk/aTableDef.h	/^	DB_ZIP,$/;"	e	enum:__anon7
DB_ZIP2	sdk/aTableDef.h	/^	DB_ZIP2,$/;"	e	enum:__anon7
DEBUG	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::DEBUG = new aLogger::aLevel(log4cxx::Level::getDebug());$/;"	m	class:aLogger::aLevel	file:
DEBUG	sdk/aLogger.h	/^			static const aLevel * DEBUG;$/;"	m	class:aLogger::aLevel
DEBUGSERVER	sdk/aDef.h	/^	DEBUGSERVER	= 100,\/**<debug服务器>*\/$/;"	e	enum:__anon3
DECLARE_MESSAGE_MAP	sdk/aMsgCallBack.h	28;"	d
DECLARE_SINGLETON_CLASS	sdk/aSingleton.h	13;"	d
DES_CBC_MODE	sdk/des.h	111;"	d
DES_DECRYPT	sdk/des.h	109;"	d
DES_ENCRYPT	sdk/des.h	108;"	d
DES_KEY_SZ	sdk/des.h	105;"	d
DES_PCBC_MODE	sdk/des.h	112;"	d
DES_SCHEDULE_SZ	sdk/des.h	106;"	d
DES_cblock	sdk/des.h	/^typedef unsigned char DES_cblock[8];$/;"	t
DES_check_key	sdk/des.h	127;"	d
DES_ecb2_encrypt	sdk/des.h	114;"	d
DES_ede2_cbc_encrypt	sdk/des.h	117;"	d
DES_ede2_cfb64_encrypt	sdk/des.h	120;"	d
DES_ede2_ofb64_encrypt	sdk/des.h	123;"	d
DES_fixup_key_parity	sdk/des.h	239;"	d
DES_key_schedule	sdk/des.h	/^    } DES_key_schedule;$/;"	t	typeref:struct:DES_ks
DES_ks	sdk/des.h	/^typedef struct DES_ks$/;"	s
DES_rw_mode	sdk/des.h	129;"	d
DIR_DOWN	sdk/aPos.h	/^	DIR_DOWN	=	4,\/**<下*\/$/;"	e	enum:__anon5
DIR_DOWNLEFT	sdk/aPos.h	/^	DIR_DOWNLEFT	=	5,\/**左下*\/$/;"	e	enum:__anon5
DIR_DOWNRIGHT	sdk/aPos.h	/^	DIR_DOWNRIGHT	=	3,\/**<右下*\/$/;"	e	enum:__anon5
DIR_ERROR	sdk/aPos.h	/^	DIR_ERROR	=	8 \/**<错误方向*\/$/;"	e	enum:__anon5
DIR_LEFT	sdk/aPos.h	/^	DIR_LEFT	=	6,\/**<左*\/$/;"	e	enum:__anon5
DIR_LEFTDOWN	sdk/aPos.h	/^	DIR_LEFTDOWN	=	5,\/**<左下*\/$/;"	e	enum:__anon5
DIR_LEFTUP	sdk/aPos.h	/^	DIR_LEFTUP	=	7,\/**<左上*\/$/;"	e	enum:__anon5
DIR_RIGHT	sdk/aPos.h	/^	DIR_RIGHT	=	2,\/**<右*\/$/;"	e	enum:__anon5
DIR_RIGHTDOWN	sdk/aPos.h	/^	DIR_RIGHTDOWN	=	3,\/**<右下*\/$/;"	e	enum:__anon5
DIR_RIGHTUP	sdk/aPos.h	/^	DIR_RIGHTUP	=	1,\/**<右上*\/$/;"	e	enum:__anon5
DIR_UP	sdk/aPos.h	/^	DIR_UP		=	0,\/**<上*\/$/;"	e	enum:__anon5
DIR_UPLEFT	sdk/aPos.h	/^	DIR_UPLEFT	=	7,\/**<左上*\/$/;"	e	enum:__anon5
DIR_UPRIGHT	sdk/aPos.h	/^	DIR_UPRIGHT	=	1,\/**<右上*\/$/;"	e	enum:__anon5
DWORD	sdk/aDef.h	/^typedef unsigned int DWORD;$/;"	t
DataCallBack	sdk/aSerialization.h	/^class DataCallBack$/;"	c
DataEntry	sdk/aSerialization.h	/^		class DataEntry : public aEntry,public DATA$/;"	c	class:DataSerialization
DataSerialization	sdk/aSerialization.h	/^		DataSerialization(){};$/;"	f	class:DataSerialization
DataSerialization	sdk/aSerialization.h	/^class DataSerialization : public aDataM$/;"	c
Down	sdk/aVec3.h	/^		static const aVector3 Down;$/;"	m	class:aVector3
END_MESSAGE_MAP	sdk/aMsgCallBack.h	45;"	d
END_PACK	sdk/aMsgCallBack.h	57;"	d
EPSILON_DBL	sdk/aDef.h	/^const double EPSILON_DBL = 0.0000000001;$/;"	v
EPSILON_FLT	sdk/aDef.h	/^const float EPSILON_FLT	= 0.000001;$/;"	v
ERROR	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::ERROR = new aLogger::aLevel(log4cxx::Level::getError());$/;"	m	class:aLogger::aLevel	file:
ERROR	sdk/aLogger.h	/^			static const aLevel * ERROR;$/;"	m	class:aLogger::aLevel
EVENT	sdk/aEvent.h	/^namespace EVENT$/;"	n
EVNET_CMD_PK	sdk/aEvent.h	/^	const BYTE EVNET_CMD_PK		=	2;$/;"	m	namespace:EVENT
EVNET_CMD_QUEST	sdk/aEvent.h	/^	const BYTE EVNET_CMD_QUEST	= 	1;$/;"	m	namespace:EVENT
Entry_Bulid	sdk/aSceneEntry.h	/^	Entry_Bulid,\/**<建筑*\/$/;"	e	enum:SceneEntryType
Entry_Death	sdk/aSceneEntry.h	/^	Entry_Death,$/;"	e	enum:SceneEntryState
Entry_Hide	sdk/aSceneEntry.h	/^	Entry_Hide$/;"	e	enum:SceneEntryState
Entry_MAX	sdk/aSceneEntry.h	/^	Entry_MAX$/;"	e	enum:SceneEntryType
Entry_NPC	sdk/aSceneEntry.h	/^	Entry_NPC,\/**<NPC*\/$/;"	e	enum:SceneEntryType
Entry_Normal	sdk/aSceneEntry.h	/^	Entry_Normal,$/;"	e	enum:SceneEntryState
Entry_Object	sdk/aSceneEntry.h	/^	Entry_Object,\/**<地物*\/$/;"	e	enum:SceneEntryType
Entry_Player	sdk/aSceneEntry.h	/^	Entry_Player, \/**<角色*\/$/;"	e	enum:SceneEntryType
FATAL	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::FATAL = new aLogger::aLevel(log4cxx::Level::getFatal());$/;"	m	class:aLogger::aLevel	file:
FATAL	sdk/aLogger.h	/^			static const aLevel * FATAL;$/;"	m	class:aLogger::aLevel
FLOAT	sdk/aDef.h	/^typedef float FLOAT;$/;"	t
FUNCTION_TIME_WARPPER	sdk/aTimeWarp.h	87;"	d
FUNTIME_HASH	sdk/aTimeWarp.h	/^		typedef  __gnu_cxx::hash_map<std::string,stFunctionTime,Age::key_hash,Age::key_equal> FUNTIME_HASH;$/;"	t	class:FunctionTime
FUNTIME_HASH_IT	sdk/aTimeWarp.h	/^		typedef FUNTIME_HASH::iterator FUNTIME_HASH_IT;$/;"	t	class:FunctionTime
Float	sdk/aRedisClient.cpp	/^float aRedisClient::Float(const aRedisCmd& cmd)$/;"	f	class:aRedisClient
Float	sdk/aRedisResult.cpp	/^float aRedisResult::Float(redisReply* reply)$/;"	f	class:aRedisResult
Forward	sdk/aVec3.h	/^		static const aVector3 Forward;$/;"	m	class:aVector3
FunctionTime	sdk/aTimeWarp.h	/^		FunctionTime(const int  how_long = 600):timer(how_long){}$/;"	f	class:FunctionTime
FunctionTime	sdk/aTimeWarp.h	/^class FunctionTime$/;"	c
FunctionTime_Wrapper	sdk/aTimeWarp.h	/^		FunctionTime_Wrapper(const std::string & func):_func(func)$/;"	f	class:FunctionTime_Wrapper
FunctionTime_Wrapper	sdk/aTimeWarp.h	/^class FunctionTime_Wrapper$/;"	c
GAMESERVER	sdk/aDef.h	/^	GAMESERVER		= 30,\/**<用户逻辑服务器*\/$/;"	e	enum:__anon3
GATEWAYSERVER	sdk/aDef.h	/^	GATEWAYSERVER	= 20,\/**<网关服务器*\/$/;"	e	enum:__anon3
GBUG	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::GBUG = new aLogger::aLevel(LEVELDEBUG);$/;"	m	class:aLogger::aLevel	file:
GBUG	sdk/aLogger.h	/^			static const aLevel * GBUG;$/;"	m	class:aLogger::aLevel
GBUG_INT	sdk/aLogger.h	/^				GBUG_INT	=	log4cxx::Level::DEBUG_INT$/;"	e	enum:aLogger::aLevel::aLevelInt
GLOBALSERVER	sdk/aDef.h	/^	GLOBALSERVER	= 10,\/**<全局管理服务器*\/$/;"	e	enum:__anon3
GLOBALVAL	sdk/aGlobal.h	/^		typedef __gnu_cxx::hash_map<std::string,std::string,key_hash,key_equal> GLOBALVAL;$/;"	t	class:aGlobal
GetLocalTime	sdk/aTime.h	/^		static void GetLocalTime(struct tm & tv,time_t timevalue)$/;"	f	class:aRealTime
GlobalClient	sdk/aGlobalClient.cpp	/^GlobalClient::GlobalClient(aNetService * lpsever) : aMiniTCPClient(SYS_SDK_ID_000007) {$/;"	f	class:GlobalClient
GlobalClient	sdk/aGlobalClient.h	/^class GlobalClient : public aMiniTCPClient$/;"	c
HEADER_NEW_DES_H	sdk/des.h	61;"	d
HMap	sdk/aRedisClient.cpp	/^int aRedisClient::HMap(const aRedisCmd& cmd, REDIS_HASH_MAP& h)$/;"	f	class:aRedisClient
HMap	sdk/aRedisClient.cpp	/^int aRedisClient::HMap(const aRedisCmd& cmd, const AVec<AStr> & fileds,REDIS_HASH_MAP& h)$/;"	f	class:aRedisClient
HMap	sdk/aRedisResult.cpp	/^int aRedisResult::HMap(redisReply* reply, REDIS_HASH_MAP & h)$/;"	f	class:aRedisResult
HMap	sdk/aRedisResult.cpp	/^int aRedisResult::HMap(redisReply* reply, const AVec<AStr>& fields, REDIS_HASH_MAP & h)$/;"	f	class:aRedisResult
IFFY	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::IFFY = new aLogger::aLevel(LEVELIFFY);$/;"	m	class:aLogger::aLevel	file:
IFFY	sdk/aLogger.h	/^			static const aLevel * IFFY;$/;"	m	class:aLogger::aLevel
IFFY_INT	sdk/aLogger.h	/^				IFFY_INT	=	log4cxx::Level::WARN_INT,$/;"	e	enum:aLogger::aLevel::aLevelInt
INCOMPLETE_READ	sdk/aSocket.cpp	/^const unsigned int aSocket::INCOMPLETE_READ   =       0x00000001;$/;"	m	class:aSocket	file:
INCOMPLETE_READ	sdk/aSocket.h	/^		static const unsigned int INCOMPLETE_READ;\/\/	=	0x00000001;$/;"	m	class:aSocket
INCOMPLETE_WRITE	sdk/aSocket.cpp	/^const unsigned int aSocket::INCOMPLETE_WRITE   =       0x00000002;$/;"	m	class:aSocket	file:
INCOMPLETE_WRITE	sdk/aSocket.h	/^		static const unsigned int INCOMPLETE_WRITE;\/\/	=	0x00000002;$/;"	m	class:aSocket
INDENTIFY	sdk/aComponent.h	/^		 typedef DWORD INDENTIFY;$/;"	t	class:aComponentBase
INFO	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::INFO = new aLogger::aLevel(log4cxx::Level::getInfo());$/;"	m	class:aLogger::aLevel	file:
INFO	sdk/aLogger.h	/^			static const aLevel * INFO;$/;"	m	class:aLogger::aLevel
INT64	sdk/aDef.h	/^typedef long INT64;$/;"	t
INVALID32	sdk/aDef.h	202;"	d
INVALID64	sdk/aDef.h	200;"	d
InsertDirection	sdk/aRedisClient.h	/^enum InsertDirection {$/;"	g
InsertDirection_Num	sdk/aRedisClient.h	/^	InsertDirection_Num$/;"	e	enum:InsertDirection
Int	sdk/aRedisClient.cpp	/^int aRedisClient::Int(const aRedisCmd& cmd)$/;"	f	class:aRedisClient
Int	sdk/aRedisResult.cpp	/^int aRedisResult::Int(redisReply* reply)$/;"	f	class:aRedisResult
L	sdk/aLuaBase.h	/^		lua_State *L;$/;"	m	struct:aLuaBase::aLuaContext
LEVELALARM	sdk/aLogger.h	/^			static const log4cxx::LevelPtr LEVELALARM;$/;"	m	class:aLogger::aLevel
LEVELDEBUG	sdk/aLogger.h	/^			static const log4cxx::LevelPtr LEVELDEBUG;$/;"	m	class:aLogger::aLevel
LEVELIFFY	sdk/aLogger.h	/^			static const log4cxx::LevelPtr LEVELIFFY;$/;"	m	class:aLogger::aLevel
LEVELTRACE	sdk/aLogger.h	/^			static const log4cxx::LevelPtr LEVELTRACE;$/;"	m	class:aLogger::aLevel
LICENSESERVER	sdk/aDef.h	/^	LICENSESERVER	= 80,\/**<用户验证服务器*\/$/;"	e	enum:__anon3
LOGINSERVER	sdk/aDef.h	/^	LOGINSERVER		= 60,\/**<登录服务器>*\/$/;"	e	enum:__anon3
LONG	sdk/aDef.h	/^typedef long LONG;$/;"	t
LONGLONG	sdk/aDef.h	/^typedef long long LONGLONG;$/;"	t
LPMEMBLOCK	sdk/aShareMem.h	/^typedef struct tagMemBlock *LPMEMBLOCK;$/;"	t	typeref:struct:tagMemBlock
LPRESUMECALLBACK	sdk/aShareMem.h	/^typedef struct tagResumeCallBack *LPRESUMECALLBACK;$/;"	t	typeref:struct:tagResumeCallBack
LPSHAREMEMHEAD	sdk/aShareMem.h	/^typedef struct tagShareMemHead *LPSHAREMEMHEAD;$/;"	t	typeref:struct:tagShareMemHead
Left	sdk/aVec3.h	/^		static const aVector3 Left;$/;"	m	class:aVector3
LimitHash	sdk/aEntryM.h	/^		LimitHash(){}$/;"	f	class:LimitHash
LimitHash	sdk/aEntryM.h	/^class LimitHash:private aNoneCopyable$/;"	c
Long	sdk/aRedisClient.cpp	/^long aRedisClient::Long(const aRedisCmd& cmd)$/;"	f	class:aRedisClient
Long	sdk/aRedisResult.cpp	/^long aRedisResult::Long(redisReply* reply)$/;"	f	class:aRedisResult
LongLong	sdk/aRedisClient.cpp	/^long long aRedisClient::LongLong(const aRedisCmd& cmd)$/;"	f	class:aRedisClient
LongLong	sdk/aRedisResult.cpp	/^long long  aRedisResult::LongLong(redisReply* reply)$/;"	f	class:aRedisResult
MAJOR_VERSION	sdk/aDef.h	32;"	d
MAKE_PARAM	sdk/aPython.cpp	4;"	d	file:
MAX_ACCOUNTSIZE	sdk/aDef.h	192;"	d
MAX_BLOCK_SIZE	sdk/aShareMem.h	16;"	d
MAX_CHATSIZE	sdk/aDef.h	198;"	d
MAX_COLNAME	sdk/aTableDef.h	37;"	d
MAX_COMPONENTS	sdk/aEntryBase.h	52;"	d
MAX_DATABUFFERSIZE	sdk/aSocket.cpp	/^const unsigned int aSocket::MAX_DATABUFFERSIZE = PACKET_MASK;$/;"	m	class:aSocket	file:
MAX_DATABUFFERSIZE	sdk/aSocket.h	/^		static const unsigned int MAX_DATABUFFERSIZE;\/\/	=	PACKET_MASK;$/;"	m	class:aSocket
MAX_DATASIZE	sdk/aSocket.cpp	/^const unsigned int aSocket::MAX_DATASIZE = (MAX_DATABUFFERSIZE - PH_LEN);$/;"	m	class:aSocket	file:
MAX_DATASIZE	sdk/aSocket.h	/^		static const unsigned int MAX_DATASIZE ;\/\/= (MAX_DATABUFFERSIZE - PH_LEN);$/;"	m	class:aSocket
MAX_DBSIZE	sdk/aDBConnectPool.h	/^const unsigned int MAX_DBSIZE = 32;$/;"	v
MAX_HOSTSIZE	sdk/aDBConnectPool.h	/^const unsigned int MAX_HOSTSIZE = 32;$/;"	v
MAX_IPLENGTH	sdk/aDef.h	190;"	d
MAX_NAMESIZE	sdk/aDef.h	188;"	d
MAX_PASSWDSIZE	sdk/aDef.h	194;"	d
MAX_ROLESIZE	sdk/aDef.h	196;"	d
MAX_SERVER	sdk/aDef.h	/^	MAX_SERVER,$/;"	e	enum:__anon3
MAX_USERDATASIZE	sdk/aSocket.cpp	/^const unsigned int aSocket::MAX_USERDATASIZE = (MAX_DATASIZE -128);$/;"	m	class:aSocket	file:
MAX_USERDATASIZE	sdk/aSocket.h	/^		static const unsigned int MAX_USERDATASIZE ;\/\/= (MAX_DATASIZE -128);$/;"	m	class:aSocket
MAX_USERSIZE	sdk/aDBConnectPool.h	/^const unsigned int MAX_USERSIZE = 32;$/;"	v
MAX_WAITQUEUE	sdk/aMTCPService.h	/^		static const int MAX_WAITQUEUE =2000;$/;"	m	class:aMTCPService
MAX_WAITQUEUE	sdk/aTCPServic.h	/^		static const int MAX_WAITQUEUE =2000;$/;"	m	class:aTCPServic
MAX_WAITQUEUE	sdk/aUDPServer.h	/^		static const int MAX_WAITQUEUE =2000;$/;"	m	class:aUDPServic
MEMBLOCK	sdk/aShareMem.h	/^typedef struct tagMemBlock MEMBLOCK;$/;"	t	typeref:struct:tagMemBlock
MICRO_VSRSION	sdk/aDef.h	40;"	d
MINOR_VSERSION	sdk/aDef.h	36;"	d
MYSQLMAP	sdk/aDBConnectPool.h	/^		typedef std::map<DWORD,stMysql> MYSQLMAP;$/;"	t	class:aDBConnectPool
MYSQLMAP_IT	sdk/aDBConnectPool.h	/^		typedef std::map<DWORD,stMysql>::iterator MYSQLMAP_IT;$/;"	t	class:aDBConnectPool
MYSQL_HANDLE_INVALED	sdk/aDBConnectPool.h	/^	MYSQL_HANDLE_INVALED =1 , \/**<can not be used*\/$/;"	e	enum:DBSTATE
MYSQL_HANDLE_USRD	sdk/aDBConnectPool.h	/^	MYSQL_HANDLE_USRD = 3\/**<using*\/$/;"	e	enum:DBSTATE
MYSQL_HANLDE_VALID	sdk/aDBConnectPool.h	/^	MYSQL_HANLDE_VALID = 2,\/**<can be userd*\/$/;"	e	enum:DBSTATE
Map	sdk/aRedisClient.cpp	/^int aRedisClient::Map(const aRedisCmd& cmd, const AVec<AStr>& keys, AMap<AStr,AStr>& m)$/;"	f	class:aRedisClient
Map	sdk/aRedisResult.cpp	/^int aRedisResult::Map(redisReply* reply, const AVec<AStr>& keys,AMap<AStr,AStr>& m)$/;"	f	class:aRedisResult
MultiHash	sdk/aEntryM.h	/^		MultiHash(){}$/;"	f	class:MultiHash
MultiHash	sdk/aEntryM.h	/^class MultiHash:private aNoneCopyable$/;"	c
NINESCREEN_HEIGHT	sdk/aSceneEntry.h	25;"	d
NINESCREEN_MAP	sdk/aNineScreenIndex.h	/^typedef __gnu_cxx::hash_map<DWORD,aPosIVector> NINESCREEN_MAP;$/;"	t
NINESCREEN_MAP_ITER	sdk/aNineScreenIndex.h	/^typedef NINESCREEN_MAP::iterator NINESCREEN_MAP_ITER;$/;"	t
NINESCREEN_MAP_VALUETYPE	sdk/aNineScreenIndex.h	/^typedef NINESCREEN_MAP::value_type NINESCREEN_MAP_VALUETYPE;$/;"	t
NINESCREEN_WIDTH	sdk/aSceneEntry.h	24;"	d
NOT	sdk/aRedisClient.h	/^	NOT,$/;"	e	enum:BitOp
NoneStr	sdk/aUrl.h	/^		std::string NoneStr;$/;"	m	class:aUrl
OFF	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::OFF = new aLogger::aLevel(log4cxx::Level::getOff());$/;"	m	class:aLogger::aLevel	file:
OFF	sdk/aLogger.h	/^			static const aLevel * OFF;$/;"	m	class:aLogger::aLevel
ON_COMMAND	sdk/aMsgCallBack.h	60;"	d
OPENSSL_ENABLE_OLD_DES_SUPPORT	sdk/des.h	97;"	d
OPENSSL_EXTERN	sdk/des.h	71;"	d
OPENSSL_EXTERN	sdk/des.h	72;"	d
OR	sdk/aRedisClient.h	/^	OR,$/;"	e	enum:BitOp
Ok	sdk/aRedisClient.cpp	/^bool aRedisClient::Ok(const aRedisCmd& cmd)$/;"	f	class:aRedisClient
Ok	sdk/aRedisResult.cpp	/^bool aRedisResult::Ok(redisReply* reply)$/;"	f	class:aRedisResult
PACKET_MASK	sdk/aSocket.cpp	/^const unsigned int aSocket::PACKET_MASK = _BLOCKSIZE - 1;$/;"	m	class:aSocket	file:
PACKET_MASK	sdk/aSocket.h	/^		static const unsigned int PACKET_MASK	;\/\/=	_BLOCKSIZE - 1;$/;"	m	class:aSocket
PACKET_ZIP	sdk/aSocket.cpp	/^const unsigned int aSocket::PACKET_ZIP 	=   0x40000000;$/;"	m	class:aSocket	file:
PACKET_ZIP	sdk/aSocket.h	/^		static const unsigned int PACKET_ZIP;\/\/	=	0x40000000;$/;"	m	class:aSocket
PACKET_ZIP_BUFFER	sdk/aMemStream.h	/^const unsigned int PACKET_ZIP_BUFFER = unzip_size(_BLOCKSIZE-1) + sizeof(unsigned int) + 8;$/;"	v
PACKET_ZIP_MIN	sdk/aSocket.cpp	/^const unsigned int aSocket::PACKET_ZIP_MIN    =       32;$/;"	m	class:aSocket	file:
PACKET_ZIP_MIN	sdk/aSocket.h	/^		static const unsigned int PACKET_ZIP_MIN;\/\/	=	32;$/;"	m	class:aSocket
PH_LEN	sdk/aSocket.cpp	/^const unsigned int aSocket::PH_LEN     =       sizeof(unsigned int);$/;"	m	class:aSocket	file:
PH_LEN	sdk/aSocket.h	/^		static const unsigned int PH_LEN;\/\/	=	sizeof(unsigned int);$/;"	m	class:aSocket
PI	sdk/aDef.h	/^const float PI				=	3.14159265;$/;"	v
PIDiv2	sdk/aDef.h	/^const float PIDiv2			=	1.57079633;$/;"	v
PIPow2	sdk/aDef.h	/^const float PIPow2			=	9.8696044;$/;"	v
POOLSTATE	sdk/aTCPTaskPool.h	/^enum POOLSTATE$/;"	g
POSIMAP_INDEX	sdk/aNineScreenIndex.h	/^typedef __gnu_cxx::hash_map<DWORD,SCENEENTRY_SET> POSIMAP_INDEX; $/;"	t
PROPERTYVARS	sdk/aVars.h	/^		enum PROPERTYVARS$/;"	g	class:Vars
PY_WRAP_BEGIN	sdk/aPython.h	20;"	d
PY_WRAP_END	sdk/aPython.h	26;"	d
PY_WRAP_REG	sdk/aPython.h	23;"	d
QWORD	sdk/aDef.h	/^typedef unsigned long QWORD;$/;"	t
RECORD	sdk/aTable.h	/^		typedef std::map<std::string,DBVARTYPE> RECORD;$/;"	t	class:aRecord
RECORDSERVER	sdk/aDef.h	/^	RECORDSERVER	= 50,\/**<档案服务器>*\/$/;"	e	enum:__anon3
RECORD_IT	sdk/aTable.h	/^                typedef std::map<std::string,DBVARTYPE>::iterator RECORD_IT;$/;"	t	class:aRecord
REDISMAP	sdk/aRedisConnectPool.h	/^		typedef std::map<DWORD,stRedis> REDISMAP;$/;"	t	class:aRedisConnectPool
REDISMAP_IT	sdk/aRedisConnectPool.h	/^		typedef std::map<DWORD,stRedis>::iterator REDISMAP_IT;$/;"	t	class:aRedisConnectPool
REDIS_HANDLE	sdk/aRedisConnectPool.h	/^typedef unsigned int REDIS_HANDLE;$/;"	t
REDIS_HANDLE_INVALED	sdk/aRedisConnectPool.h	/^	REDIS_HANDLE_INVALED =1 , \/**<can not be used*\/$/;"	e	enum:REDIS_STATE
REDIS_HANDLE_USRD	sdk/aRedisConnectPool.h	/^	REDIS_HANDLE_USRD = 3\/**<using*\/$/;"	e	enum:REDIS_STATE
REDIS_HANLDE_VALID	sdk/aRedisConnectPool.h	/^	REDIS_HANLDE_VALID = 2,\/**<can be userd*\/$/;"	e	enum:REDIS_STATE
REDIS_HASH_MAP	sdk/aRedisCommand.h	/^typedef	AHMap<AStr,AStr,Age::key_hash,Age::key_equal> REDIS_HASH_MAP;$/;"	t
REDIS_STATE	sdk/aRedisConnectPool.h	/^enum REDIS_STATE$/;"	g
REDIS_STATUS_REPLY_OK	sdk/aRedisClient.h	19;"	d
REDIS_STATUS_REPLY_PING	sdk/aRedisClient.h	20;"	d
RESUMECALLBACK	sdk/aShareMem.h	/^typedef struct tagResumeCallBack RESUMECALLBACK;$/;"	t	typeref:struct:tagResumeCallBack
Right	sdk/aVec3.h	/^		static const aVector3 Right;$/;"	m	class:aVector3
SAFE_DELETE	sdk/aDef.h	24;"	d
SAFE_DELETE_VEC	sdk/aDef.h	25;"	d
SCENEENTRY_SET	sdk/aNineScreenIndex.h	/^typedef std::set<aSceneEntry * ,std::less<aSceneEntry *> > SCENEENTRY_SET;$/;"	t
SDWORD	sdk/aDef.h	/^typedef signed int SDWORD;$/;"	t
SESSIONSERVER	sdk/aDef.h	/^	SESSIONSERVER	= 40,\/**<会话服务器>*\/$/;"	e	enum:__anon3
SHAREMEMHEAD	sdk/aShareMem.h	/^typedef struct tagShareMemHead SHAREMEMHEAD;$/;"	t	typeref:struct:tagShareMemHead
SHAREMEMHEAD_MAP	sdk/aShareMem.h	/^		typedef std::map<void *,LPSHAREMEMHEAD> SHAREMEMHEAD_MAP;$/;"	t	class:aShareMem
SHAREMEMHEAD_MAP_CONST_ITER	sdk/aShareMem.h	/^		typedef SHAREMEMHEAD_MAP SHAREMEMHEAD_MAP_CONST_ITER;$/;"	t	class:aShareMem
SHAREMEMHEAD_MAP_ITER	sdk/aShareMem.h	/^		typedef SHAREMEMHEAD_MAP SHAREMEMHEAD_MAP_ITER;$/;"	t	class:aShareMem
SHAREMEMHEAD_VEC	sdk/aShareMem.h	/^		typedef std::vectro<LPSHAREMEMHEAD> SHAREMEMHEAD_VEC;  $/;"	t	class:aShareMem
SHAREMEMHEAD_VEC_ITER	sdk/aShareMem.h	/^		typedef SHAREMEMHEAD_VEC::iterator SHAREMEMHEAD_VEC_ITER;$/;"	t	class:aShareMem
SHM_INIT_POOL	sdk/aShareMem.h	/^			SHM_INIT_POOL,$/;"	e	enum:aShareMem::__anon6
SHM_KEY	sdk/aShareMem.h	14;"	d
SHM_MAX_SIZE	sdk/aShareMem.h	28;"	d
SHM_MEDIUM1_SIZE	sdk/aShareMem.h	26;"	d
SHM_MEDIUM2_SIZE	sdk/aShareMem.h	27;"	d
SHM_MINI_SIZE	sdk/aShareMem.h	25;"	d
SHM_MaxSize	sdk/aShareMem.h	/^	SHM_MaxSize = 4,\/\/ SHM_MAX_SIZE$/;"	e	enum:Type_ShareMem
SHM_MediumSize1	sdk/aShareMem.h	/^	SHM_MediumSize1 = 2,\/\/ SHM_MEDIUM1_SIZE$/;"	e	enum:Type_ShareMem
SHM_MediumSize2	sdk/aShareMem.h	/^	SHM_MediumSize2  = 3,\/\/ SHM_MEDIUM2_SIZE$/;"	e	enum:Type_ShareMem
SHM_MinSize	sdk/aShareMem.h	/^	SHM_MinSize = 1,\/\/ SHM_MINI_SIZE$/;"	e	enum:Type_ShareMem
SHM_RESUME_POOL	sdk/aShareMem.h	/^			SHM_RESUME_POOL,$/;"	e	enum:aShareMem::__anon6
SHM_TYPE_SIZE	sdk/aShareMem.h	23;"	d
SHORT	sdk/aDef.h	/^typedef short SHORT;$/;"	t
SQWORD	sdk/aDef.h	/^typedef signed long SQWORD;$/;"	t
SWORD	sdk/aDef.h	/^typedef signed short SWORD;$/;"	t
SceneEntryState	sdk/aSceneEntry.h	/^enum SceneEntryState$/;"	g
SceneEntryType	sdk/aSceneEntry.h	/^enum SceneEntryType$/;"	g
Set	sdk/aRedisClient.cpp	/^int aRedisClient::Set(const aRedisCmd& cmd, ASet<AStr>& s)$/;"	f	class:aRedisClient
Set	sdk/aRedisResult.cpp	/^int aRedisResult::Set(redisReply* reply, ASet<AStr>& s)$/;"	f	class:aRedisResult
Status	sdk/aRedisClient.cpp	/^AStr aRedisClient::Status(const aRedisCmd& cmd)$/;"	f	class:aRedisClient
Status	sdk/aRedisResult.cpp	/^AStr aRedisResult::Status(redisReply* reply)$/;"	f	class:aRedisResult
String	sdk/aRedisClient.cpp	/^int aRedisClient::String(const aRedisCmd& cmd, AStr& str)$/;"	f	class:aRedisClient
String	sdk/aRedisResult.cpp	/^int aRedisResult::String(redisReply* reply, AStr& str)$/;"	f	class:aRedisResult
T1Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;$/;"	t	struct:aLuaBase::functor
T1Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;$/;"	t	struct:aLuaBase::mem_functor
T2Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;$/;"	t	struct:aLuaBase::functor
T2Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;$/;"	t	struct:aLuaBase::mem_functor
T3Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;$/;"	t	struct:aLuaBase::functor
T3Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;$/;"	t	struct:aLuaBase::mem_functor
T4Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;$/;"	t	struct:aLuaBase::functor
T4Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;$/;"	t	struct:aLuaBase::mem_functor
T5Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T5>::value,typename baseType<T5>::type , T5 >::type	T5Base;$/;"	t	struct:aLuaBase::functor
T5Base	sdk/aLuaBase.h	/^			typedef typename if_< isRef<T5>::value,typename baseType<T5>::type , T5 >::type	T5Base;$/;"	t	struct:aLuaBase::mem_functor
TABLEINFO	sdk/aTableDef.h	/^		typedef std::multimap<std::string,dbCol>  TABLEINFO;$/;"	t	class:aTableDef
TABLEINFO_IT	sdk/aTableDef.h	/^		typedef std::multimap<std::string,dbCol>::iterator TABLEINFO_IT;$/;"	t	class:aTableDef
TM_no	sdk/aTCPClient.h	/^			TM_no,$/;"	e	enum:aTCPClient::TerminateMethod
TM_server_close	sdk/aTCPClient.h	/^			TM_server_close$/;"	e	enum:aTCPClient::TerminateMethod
TM_sock_error	sdk/aTCPClient.h	/^			TM_sock_error,$/;"	e	enum:aTCPClient::TerminateMethod
TRACE	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::TRACE = new aLogger::aLevel(LEVELTRACE);$/;"	m	class:aLogger::aLevel	file:
TRACE	sdk/aLogger.h	/^			static const aLevel * TRACE;$/;"	m	class:aLogger::aLevel
TRACE_INT	sdk/aLogger.h	/^				TRACE_INT	=	log4cxx::Level::INFO_INT,$/;"	e	enum:aLogger::aLevel::aLevelInt
TYPE_COMPONENTS	sdk/aEntryBase.h	/^	typedef AMap<DWORD,aComponentBase *> TYPE_COMPONENTS;$/;"	t	class:aComponentEntity
T_MSEC	sdk/aMTCPService.h	/^		static const int T_MSEC = 2100;$/;"	m	class:aMTCPService
T_MSEC	sdk/aTCPServic.h	/^		static const int T_MSEC = 2100;$/;"	m	class:aTCPServic
T_MSEC	sdk/aUDPServer.h	/^		static const int T_MSEC = 2100;$/;"	m	class:aUDPServic
T_RD_MSEC	sdk/aSocket.cpp	/^const int aSocket::T_RD_MSEC   =       2100;$/;"	m	class:aSocket	file:
T_RD_MSEC	sdk/aSocket.h	/^		static const int T_RD_MSEC;\/\/	=	2100;$/;"	m	class:aSocket
T_WR_MSEC	sdk/aSocket.cpp	/^const int aSocket::T_WR_MSEC   =       5100;$/;"	m	class:aSocket	file:
T_WR_MSEC	sdk/aSocket.h	/^		static const int T_WR_MSEC;\/\/	=	5100;$/;"	m	class:aSocket
Terminate	sdk/aService.cpp	/^void aService::Terminate()$/;"	f	class:aService
Terminate	sdk/aTCPClient.cpp	/^void aTCPClient::Terminate(const TerminateMethod method)$/;"	f	class:aTCPClient
Terminate	sdk/aTCPTask.cpp	/^void aUDPTask::Terminate(const TerminateMethod method)$/;"	f	class:aUDPTask
Terminate	sdk/aUDPTask.cpp	/^void aTCPTask::Terminate(const TerminateMethod method)$/;"	f	class:aTCPTask
TerminateMethod	sdk/aTCPClient.h	/^		enum TerminateMethod$/;"	g	class:aTCPClient
TerminateMethod	sdk/aTCPTask.h	/^		enum TerminateMethod$/;"	g	class:aUDPTask
TerminateMethod	sdk/aUDPTask.h	/^		enum TerminateMethod$/;"	g	class:aTCPTask
TerminateWait	sdk/aTCPTask.cpp	/^void aUDPTask::TerminateWait()$/;"	f	class:aUDPTask
TerminateWait	sdk/aUDPTask.cpp	/^void aTCPTask::TerminateWait()$/;"	f	class:aTCPTask
TimeWheel	sdk/aTimeWheel.h	/^class TimeWheel$/;"	c
ToLower	sdk/aFunc.h	/^	struct ToLower $/;"	s	namespace:Age
ToUpper	sdk/aFunc.h	/^	struct ToUpper $/;"	s	namespace:Age
Type_ShareMem	sdk/aShareMem.h	/^enum Type_ShareMem$/;"	g
UNKNOWSERVER	sdk/aDef.h	/^	UNKNOWSERVER	= 1, \/**<未知服务器类型*\/$/;"	e	enum:__anon3
Up	sdk/aVec3.h	/^		static const aVector3 Up;$/;"	m	class:aVector3
VARSRVINFO	sdk/aGlobalClient.h	/^}VARSRVINFO;$/;"	t	typeref:struct:stVarServerInfo
VARS_REFRESH	sdk/aVars.h	/^			VARS_REFRESH	= 128, \/\/定时器刷新标志$/;"	e	enum:Vars::PROPERTYVARS
VARS_SAVEBIN	sdk/aVars.h	/^			VARS_SAVEBIN	= 1,  \/\/需要二进制存储$/;"	e	enum:Vars::PROPERTYVARS
VARS_SENDFRIEND	sdk/aVars.h	/^			VARS_SENDFRIEND	= 8,  \/\/发送到好友$/;"	e	enum:Vars::PROPERTYVARS
VARS_SENDME	sdk/aVars.h	/^			VARS_SENDME	= 2,  \/\/只发自己$/;"	e	enum:Vars::PROPERTYVARS
VARS_SENDNINE	sdk/aVars.h	/^			VARS_SENDNINE	= 4,  \/\/发送到九屏$/;"	e	enum:Vars::PROPERTYVARS
VARS_SENDSEPT	sdk/aVars.h	/^			VARS_SENDSEPT	= 16, \/\/发送到家族$/;"	e	enum:Vars::PROPERTYVARS
VARS_SENDUNION	sdk/aVars.h	/^			VARS_SENDUNION	= 32, \/\/发送到帮会$/;"	e	enum:Vars::PROPERTYVARS
VERSION_STRING	sdk/aDef.h	44;"	d
VERSION_STRING	sdk/aDef.h	46;"	d
VSRS_SENDTMP	sdk/aVars.h	/^			VSRS_SENDTMP	= 64, \/\/发送到临时对话组$/;"	e	enum:Vars::PROPERTYVARS
Vars	sdk/aVars.h	/^		Vars(){};$/;"	f	class:Vars
Vars	sdk/aVars.h	/^class Vars$/;"	c
VarsM	sdk/aVarsM .h	/^class VarsM$/;"	c
Vec	sdk/aRedisClient.cpp	/^int aRedisClient::Vec(const aRedisCmd& cmd, AVec<AStr>& arr)$/;"	f	class:aRedisClient
Vec	sdk/aRedisResult.cpp	/^int aRedisResult::Vec(redisReply* reply, AVec<AStr>& arr)$/;"	f	class:aRedisResult
WARN	sdk/aLogger.cpp	/^const aLogger::aLevel * aLogger::aLevel::WARN = new aLogger::aLevel(log4cxx::Level::getWarn());$/;"	m	class:aLogger::aLevel	file:
WARN	sdk/aLogger.h	/^			static const aLevel * WARN;$/;"	m	class:aLogger::aLevel
WORD	sdk/aDef.h	/^typedef unsigned short WORD;$/;"	t
XOR	sdk/aRedisClient.h	/^	XOR,$/;"	e	enum:BitOp
Zero	sdk/aVec3.cpp	/^const aVector3 aVector3::Zero = aVector3(0,0,0);$/;"	m	class:aVector3	file:
Zero	sdk/aVec3.h	/^		static const aVector3 Zero;$/;"	m	class:aVector3
_ASINGTON_H_	sdk/aSingleton.h	2;"	d
_Age_H__	sdk/Age.h	2;"	d
_BLOCKSIZE	sdk/aMemStream.h	/^const unsigned int _BLOCKSIZE = 64*1024;$/;"	v
_ERRORCODE_H__	sdk/ErrorCode.h	2;"	d
_MEMSTREA_H__	sdk/aMemStream.h	2;"	d
_MSGBUF_MAX	sdk/aLogger.h	20;"	d
_MsgCallBack_H__	sdk/aMsgCallBack.h	2;"	d
_SHAREMEM_H__	sdk/aShareMem.h	2;"	d
_TIME_WHEEL_H__	sdk/aTimeWheel.h	2;"	d
_VarsM_H__	sdk/aVarsM .h	2;"	d
__aRWLock_H__	sdk/aRWLock.h	2;"	d
_aArg_H__	sdk/aArg.h	2;"	d
_aBase64_h_	sdk/aBase64.h	10;"	d
_aBits_H__	sdk/aBits.h	2;"	d
_aComponent_H__	sdk/aComponent.h	2;"	d
_aConf_H__	sdk/aCond.h	2;"	d
_aConfig_H__	sdk/aConfig.h	2;"	d
_aDBConnectPool_H__	sdk/aDBConnectPool.h	2;"	d
_aDebugService_H__	sdk/aDebugService.h	2;"	d
_aDef_H__	sdk/aDef.h	2;"	d
_aEntryBase_H__	sdk/aEntryBase.h	2;"	d
_aEntryM_H__	sdk/aEntryM.h	2;"	d
_aEntry_H__	sdk/aEntry.h	2;"	d
_aEventM_H__	sdk/aEventM.h	2;"	d
_aEvent_H__	sdk/aEvent.h	2;"	d
_aFUNC_H__	sdk/aFunc.h	2;"	d
_aGlobalClient_H__	sdk/aGlobalClient.h	2;"	d
_aGlobal_H__	sdk/aGlobal.h	2;"	d
_aHttpTaskPool_h_	sdk/aHttpTaskPool.h	2;"	d
_aHttpTask_h_	sdk/aHttpTask.h	11;"	d
_aIni_H__	sdk/aIni.h	2;"	d
_aLogger_H__	sdk/aLogger.h	2;"	d
_aLuaBase_H__	sdk/aLuaBase.h	2;"	d
_aMNetService_H__	sdk/aMNetService.h	2;"	d
_aMTCPService_H__	sdk/aMTCPService.h	2;"	d
_aMiniTCPClinet_H__	sdk/aMiniTCPClient.h	2;"	d
_aMsgParse_H__	sdk/aMsgParse.h	2;"	d
_aMutex_H__	sdk/aMutex.h	2;"	d
_aNetService_H__	sdk/aNetService.h	2;"	d
_aNineScreenIndex_H__	sdk/aNineScreenIndex.h	2;"	d
_aNoneCopyable_H__	sdk/aNoneCopyable.h	2;"	d
_aPos_H__	sdk/aPos.h	2;"	d
_aPython_H__	sdk/aPython.h	2;"	d
_aRedisClient_H__	sdk/aRedisClient.h	2;"	d
_aRedisCommand_H__	sdk/aRedisCommand.h	2;"	d
_aRedisConnectPool_H__	sdk/aRedisConnectPool.h	2;"	d
_aRedisResult_H__	sdk/aRedisResult.h	2;"	d
_aSerialization_H__	sdk/aSerialization.h	2;"	d
_aService_H__	sdk/aService.h	2;"	d
_aSocket_H__	sdk/aSocket.h	2;"	d
_aTCPClientPool_H__	sdk/aTCPClientPool.h	2;"	d
_aTCPClient_H__	sdk/aTCPClient.h	2;"	d
_aTCPService_H__	sdk/aTCPServic.h	2;"	d
_aTCPTaskPool_H__	sdk/aTCPTaskPool.h	2;"	d
_aTCPTask_H__	sdk/aUDPTask.h	3;"	d
_aTableDef_H__	sdk/aTableDef.h	2;"	d
_aTable_H__	sdk/aTable.h	2;"	d
_aThread_H__	sdk/aThread.h	2;"	d
_aTimeWarp_H__	sdk/aTimeWarp.h	3;"	d
_aTime_H__	sdk/aTime.h	2;"	d
_aUDPNetService_H__	sdk/aUDPNetServer.h	2;"	d
_aUDPService_H__	sdk/aUDPServer.h	2;"	d
_aUDPTask_H__	sdk/aTCPTask.h	3;"	d
_aUniqueID_H__	sdk/aUniqueID.h	2;"	d
_aUserM_H__	sdk/aUserM.h	2;"	d
_aUser_H__	sdk/aUser.h	2;"	d
_aVars_H__	sdk/aVars.h	2;"	d
_aVec3_H__	sdk/aVec3.h	2;"	d
_aXMLReader_H__	sdk/aXMLReader.h	2;"	d
_add	sdk/aTCPClientPool.cpp	/^		void _add(aTCPClient *task)$/;"	f	class:aCkeckWaitThread	file:
_add	sdk/aTCPClientPool.cpp	/^		void _add(aTCPClient *task)$/;"	f	class:aTCPClientThread	file:
_add	sdk/aTCPTaskPool.cpp	/^		void _add(aTCPTask *task)$/;"	f	class:aOkayThread	file:
_add	sdk/aTCPTaskPool.cpp	/^		void _add(aTCPTask *task)$/;"	f	class:aRecycleThread	file:
_add	sdk/aTCPTaskPool.cpp	/^		void _add(aTCPTask *task)$/;"	f	class:aSyncThread	file:
_add	sdk/aTCPTaskPool.cpp	/^		void _add(aTCPTask *task)$/;"	f	class:aVerifyThread	file:
_alive	sdk/aThread.h	/^		volatile bool _alive; \/**<激活标记*\/$/;"	m	class:aThread
_all	sdk/aNineScreenIndex.h	/^		SCENEENTRY_SET _all;$/;"	m	class:aNineScreenIndex
_args	sdk/aRedisCommand.h	/^		AVec<AStr> _args;$/;"	m	class:aRedisCmdMaker
_autoCommit	sdk/aDBConnectPool.h	/^		bool _autoCommit;$/;"	m	class:aMysqlDB
_autoIncrease	sdk/aDBConnectPool.cpp	/^DWORD aMysqlDB::_autoIncrease = 0;$/;"	m	class:aMysqlDB	file:
_autoIncrease	sdk/aDBConnectPool.h	/^		static DWORD _autoIncrease;$/;"	m	class:aMysqlDB
_autoIncrease	sdk/aRedisClient.cpp	/^DWORD aRedisClient::_autoIncrease = 1;$/;"	m	class:aRedisClient	file:
_autoIncrease	sdk/aRedisClient.h	/^		static DWORD _autoIncrease;$/;"	m	class:aRedisClient
_bData	sdk/aTable.h	/^		std::vector<unsigned char > _bData;$/;"	m	class:DBVARTYPE
_bits	sdk/aBits.h	/^		DWORD _bits[MAX_BITS\/8+1];$/;"	m	class:aBits
_buffer	sdk/aMemStream.h	/^		_type _buffer;$/;"	m	class:aMemStream
_buffered	sdk/aMiniTCPClient.h	/^		volatile bool _buffered;$/;"	m	class:aMiniTCPClient
_checkSignal	sdk/aTCPTask.h	/^		const bool _checkSignal;\/**<是否发送链路检测标记*\/$/;"	m	class:aUDPTask
_checkSignal	sdk/aUDPTask.h	/^		const bool _checkSignal;\/**<是否发送链路检测标记*\/$/;"	m	class:aTCPTask
_cmd	sdk/aRedisCommand.h	/^		aRedisCmd _cmd;$/;"	m	class:aRedisCmdMaker
_complete	sdk/aThread.h	/^		volatile bool _complete; \/**<结束标记*\/$/;"	m	class:aThread
_componentCount	sdk/aComponent.cpp	/^DWORD  aComponentBase::_componentCount = 0;$/;"	m	class:aComponentBase	file:
_componentCount	sdk/aComponent.h	/^		static DWORD _componentCount;$/;"	m	class:aComponentBase
_components	sdk/aEntryBase.h	/^	TYPE_COMPONENTS _components;$/;"	m	class:aComponentEntity
_compress	sdk/aMiniTCPClient.h	/^		bool _compress;$/;"	m	class:aMiniTCPClient
_cond	sdk/aThread.h	/^		aCond _cond;\/**<环境变量*\/$/;"	m	class:aThread
_context	sdk/aRedisClient.h	/^		redisContext* _context;$/;"	m	class:aRedisClient
_curMax	sdk/aUniqueID.h	/^	T _curMax;$/;"	m	class:aUniqueID
_currPtr	sdk/aMemStream.h	/^		unsigned int _currPtr;$/;"	m	class:aMemStream
_curren_cmd	sdk/aSocket.h	/^		unsigned int _curren_cmd;$/;"	m	class:aSocket
_data_addr	sdk/aShareMem.h	/^	void * _data_addr;	\/** <数据地址> *\/$/;"	m	struct:tagShareMemHead
_data_id	sdk/aShareMem.h	/^	unsigned short _data_id;$/;"	m	struct:tagResumeCallBack
_datacall_map	sdk/aShareMem.h	/^		static DATA_CALLBACK_MAP _datacall_map; \/** < 回调处理> *\/ $/;"	m	class:aShareMem
_datatype_id	sdk/aShareMem.h	/^	unsigned short _datatype_id; \/** <存储的数据类型 > *\/$/;"	m	struct:tagShareMemHead
_db	sdk/aRedisClient.h	/^		int _db;$/;"	m	class:aRedisClient
_db	sdk/aRedisConnectPool.h	/^		int _db;$/;"	m	class:aRedisConnectPool
_dbName	sdk/aDBConnectPool.h	/^		char _dbName[MAX_DBSIZE];$/;"	m	class:aDBConnectPool
_dbName	sdk/aDBConnectPool.h	/^		char _dbName[MAX_DBSIZE];$/;"	m	class:aMysqlDB
_directScreen	sdk/aNineScreenIndex.cpp	/^NINESCREEN_MAP aNineScreenIndex<MAX_X,MAX_Y>::_directScreen[8];$/;"	m	class:aNineScreenIndex	file:
_directScreen	sdk/aNineScreenIndex.h	/^		static NINESCREEN_MAP _directScreen[8];$/;"	m	class:aNineScreenIndex
_doc	sdk/aXMLReader.h	/^		xmlDocPtr _doc; \/**< XML2 对象结构指针 *\/$/;"	m	class:aXMLReader
_dwEntryID	sdk/aComponent.h	/^		DWORD _dwEntryID;$/;"	m	class:aComponent
_dwID	sdk/aRedisClient.h	/^		DWORD _dwID;$/;"	m	class:aRedisClient
_enc_queue	sdk/aSocket.h	/^		stBufferCmdQueue _enc_queue;$/;"	m	class:aSocket
_entryState	sdk/aSceneEntry.h	/^		SceneEntryState _entryState;$/;"	m	class:aSceneEntry
_entryType	sdk/aSceneEntry.h	/^		SceneEntryType  _entryType;$/;"	m	class:aSceneEntry
_extPort	sdk/aNetService.h	/^		DWORD _extPort;$/;"	m	class:aNetService
_extPort	sdk/aUDPNetServer.h	/^		DWORD _extPort;$/;"	m	class:aUDPNetService
_extra	sdk/aVarsM .h	/^			DWORD _extra;\/\/刷新间隔,发送组别$/;"	m	struct:VarsM::stVars
_free_vec	sdk/aShareMem.h	/^		SHAREMEMHEAD_VEC _free_vec; \/** < 空闲的共享内存> *\/$/;"	t	class:aShareMem
_fun	sdk/aFunc.h	/^				std::function<R(Args...) > _fun;$/;"	m	class:Age::aFuncion
_func	sdk/aTimeWarp.h	/^		const std::string _func;$/;"	m	class:FunctionTime_Wrapper
_host	sdk/aDBConnectPool.h	/^		char _host[MAX_HOSTSIZE];$/;"	m	class:aDBConnectPool
_host	sdk/aDBConnectPool.h	/^		char _host[MAX_HOSTSIZE];$/;"	m	class:aMysqlDB
_host	sdk/aRedisClient.h	/^		AStr _host;$/;"	m	class:aRedisClient
_host	sdk/aRedisConnectPool.h	/^		char _host[MAX_IPLENGTH];$/;"	m	class:aRedisConnectPool
_host	sdk/aUrl.h	/^		std::string _host;$/;"	m	class:aUrl
_http	sdk/aUrl.h	/^		std::string _http;$/;"	m	class:aUrl
_id	sdk/aDBConnectPool.h	/^		DWORD _id;$/;"	m	class:aMysqlDB
_ids	sdk/aUniqueID.h	/^	std::set<T> _ids;$/;"	m	class:aUniqueID
_index	sdk/aNineScreenIndex.h	/^		POSIMAP_INDEX _index;$/;"	m	class:aNineScreenIndex
_index	sdk/aTableDef.h	/^		std::multimap<std::string , std::string> _index;\/\/索引信息$/;"	m	class:aTableDef
_inserted	sdk/aSceneEntry.h	/^		bool _inserted;$/;"	m	class:aSceneEntry
_instance	sdk/aSerialization.h	/^		static DataSerialization<DATA> * _instance;$/;"	m	class:DataSerialization
_instance	sdk/aService.cpp	/^aService * aService::_instance = NULL;$/;"	m	class:aService	file:
_instance	sdk/aService.h	/^		static aService *_instance;$/;"	m	class:aService
_instance	sdk/aSingleton.h	/^	static T * _instance;$/;"	m	class:aSingleton
_instance	sdk/aSingleton.h	/^T* aSingleton<T>::_instance = NULL;$/;"	m	class:aSingleton
_ip	sdk/aMiniTCPClient.h	/^		std::string _ip;$/;"	m	class:aMiniTCPClient
_isConn	sdk/aGlobalClient.h	/^		volatile bool _isConn;$/;"	m	class:GlobalClient
_isUsed	sdk/aShareMem.h	/^	unsigned char _isUsed;  \/** <是否在使用  resume时使用 > *\/$/;"	m	struct:tagShareMemHead
_joinable	sdk/aThread.h	/^		bool _joinable; \/**<挂起标记*\/$/;"	m	class:aThread
_key	sdk/aTableDef.h	/^		std::map<std::string , std::string> _key;\/\/主键信息$/;"	m	class:aTableDef
_leftTime	sdk/aDBConnectPool.h	/^		atmTime _leftTime;$/;"	m	class:aMysqlDB
_long	sdk/aTime.h	/^		int _long;$/;"	m	class:aTimer
_mask	sdk/aEntryBase.h	/^	aBits<MAX_COMPONENTS> _mask;$/;"	m	class:aComponentEntity
_maxConns	sdk/aTCPTaskPool.h	/^		const int _maxConns;										\/**< 线程池并行处理连接的最大数量*\/$/;"	m	class:aTCPTaskPool
_maxID	sdk/aUniqueID.h	/^	T _maxID;$/;"	m	class:aUniqueID
_maxSize	sdk/aMemStream.h	/^		unsigned int _maxSize;$/;"	m	class:aMemStream
_minID	sdk/aUniqueID.h	/^	T _minID;$/;"	m	class:aUniqueID
_msecs	sdk/aTime.h	/^		unsigned long long _msecs; \/*<时间 毫秒值>*\/$/;"	m	class:aRealTime
_mutex	sdk/aLogger.h	/^		aMutex _mutex;$/;"	m	class:aLogger
_mutex	sdk/aMTCPService.h	/^		aMutex _mutex;$/;"	m	class:aMTCPService
_mutex	sdk/aThread.h	/^		aMutex _mutex; \/**<互斥量*\/$/;"	m	class:aThread
_mutex	sdk/aUniqueID.h	/^	aMutex _mutex;$/;"	m	class:aUniqueID
_mutex	sdk/aUser.h	/^	aMutex _mutex;$/;"	m	struct:aUser
_mysql	sdk/aDBConnectPool.h	/^		MYSQL * _mysql;$/;"	m	class:aMysqlDB
_netType	sdk/aNetService.h	/^		DWORD _netType;$/;"	m	class:aNetService
_netType	sdk/aUDPNetServer.h	/^		DWORD _netType;$/;"	m	class:aUDPNetService
_netinstance	sdk/aNetService.cpp	/^aNetService * aNetService::_netinstance = NULL;$/;"	m	class:aNetService	file:
_netinstance	sdk/aNetService.h	/^		static aNetService * _netinstance;$/;"	m	class:aNetService
_netinstance	sdk/aUDPNetServer.cpp	/^aUDPNetService * aUDPNetService::_netinstance = NULL;$/;"	m	class:aUDPNetService	file:
_netinstance	sdk/aUDPNetServer.h	/^		static aUDPNetService * _netinstance;$/;"	m	class:aUDPNetService
_nineScreen	sdk/aNineScreenIndex.cpp	/^NINESCREEN_MAP  aNineScreenIndex<MAX_X,MAX_Y>::_nineScreen;$/;"	m	class:aNineScreenIndex	file:
_nineScreen	sdk/aNineScreenIndex.h	/^		static NINESCREEN_MAP _nineScreen;$/;"	m	class:aNineScreenIndex
_now	sdk/aTime.h	/^		unsigned long long _now()$/;"	f	class:aRealTime
_offPtr	sdk/aMemStream.h	/^		unsigned int _offPtr;$/;"	m	class:aMemStream
_param	sdk/aUrl.h	/^		std::string _param;$/;"	m	class:aUrl
_paramMap	sdk/aUrl.h	/^		std::map<std::string , std::string> _paramMap;$/;"	m	class:aUrl
_passwd	sdk/aDBConnectPool.h	/^		char _passwd[MAX_PASSWDSIZE];$/;"	m	class:aDBConnectPool
_passwd	sdk/aDBConnectPool.h	/^		char _passwd[MAX_PASSWDSIZE];$/;"	m	class:aMysqlDB
_passwd	sdk/aRedisClient.h	/^		AStr _passwd;$/;"	m	class:aRedisClient
_passwd	sdk/aRedisConnectPool.h	/^		char _passwd[MAX_PASSWDSIZE];$/;"	m	class:aRedisConnectPool
_path	sdk/aUrl.h	/^		std::string _path;$/;"	m	class:aUrl
_poolMap	sdk/aDBConnectPool.h	/^		MYSQLMAP _poolMap;$/;"	m	class:aDBConnectPool
_poolMap	sdk/aRedisConnectPool.h	/^		REDISMAP _poolMap;	$/;"	m	class:aRedisConnectPool
_poolsize	sdk/aDBConnectPool.h	/^		unsigned int _poolsize;$/;"	m	class:aDBConnectPool
_poolsize	sdk/aRedisConnectPool.h	/^		unsigned int _poolsize;$/;"	m	class:aRedisConnectPool
_port	sdk/aDBConnectPool.h	/^		unsigned int _port;$/;"	m	class:aDBConnectPool
_port	sdk/aDBConnectPool.h	/^		unsigned int _port;$/;"	m	class:aMysqlDB
_port	sdk/aMiniTCPClient.h	/^		unsigned int _port;$/;"	m	class:aMiniTCPClient
_port	sdk/aNetService.h	/^		DWORD _port;$/;"	m	class:aNetService
_port	sdk/aRedisClient.h	/^		int _port;$/;"	m	class:aRedisClient
_port	sdk/aRedisConnectPool.h	/^		unsigned int _port;$/;"	m	class:aRedisConnectPool
_port	sdk/aUDPNetServer.h	/^		DWORD _port;$/;"	m	class:aUDPNetService
_portMap	sdk/aMTCPService.h	/^		std::map<int,unsigned short> _portMap;$/;"	m	class:aMTCPService
_posI	sdk/aSceneEntry.h	/^		aPosI _posI;$/;"	m	class:aSceneEntry
_position	sdk/aSceneEntry.h	/^		aPos _position;$/;"	m	class:aSceneEntry
_property	sdk/aVars.h	/^		DWORD _property;$/;"	m	class:Vars
_pstrExtIP	sdk/aNetService.h	/^		char _pstrExtIP[MAX_IPLENGTH+1];$/;"	m	class:aNetService
_pstrExtIP	sdk/aUDPNetServer.h	/^		char _pstrExtIP[MAX_IPLENGTH+1];$/;"	m	class:aUDPNetService
_pstrIP	sdk/aNetService.h	/^		char _pstrIP[MAX_IPLENGTH+1]$/;"	m	class:aNetService
_pstrIP	sdk/aUDPNetServer.h	/^		char _pstrIP[MAX_IPLENGTH+1]$/;"	m	class:aUDPNetService
_queue	sdk/aTCPClientPool.cpp	/^		std::queue<aTCPClient *, std::deque<aTCPClient * > > _queue;$/;"	m	class:aTCPClientTaskQueue	file:
_queue	sdk/aTCPTaskPool.cpp	/^		std::queue<aTCPTask *, std::deque<aTCPTask * > > _queue;$/;"	m	class:aTCPTaskQueue	file:
_rcv_queue	sdk/aSocket.h	/^		stBufferCmdQueue _rcv_queue;$/;"	m	class:aSocket
_rcv_raw_size	sdk/aSocket.h	/^		unsigned int _rcv_raw_size;$/;"	m	class:aSocket
_record	sdk/aTable.h	/^		RECORD _record;$/;"	m	class:aRecord
_recordSet	sdk/aTable.h	/^		std::vector<aRecord *> _recordSet;$/;"	m	class:aRecordSet
_reply	sdk/aRedisResult.cpp	/^		redisReply* _reply;$/;"	m	class:aReplyGuard	file:
_reverDirectScreen	sdk/aNineScreenIndex.cpp	/^NINESCREEN_MAP aNineScreenIndex<MAX_X,MAX_Y>::_reverDirectScreen[8];$/;"	m	class:aNineScreenIndex	file:
_reverDirectScreen	sdk/aNineScreenIndex.h	/^		static NINESCREEN_MAP _reverDirectScreen[8];$/;"	m	class:aNineScreenIndex
_rotation	sdk/aSceneEntry.h	/^		aVector3 _rotation; $/;"	m	class:aSceneEntry
_rwlock	sdk/aNineScreenIndex.h	/^		aRWLock _rwlock;$/;"	m	class:aNineScreenIndex
_rwlock	sdk/aUserM.h	/^	aRWLock _rwlock; $/;"	m	class:aUserM
_screenIndex	sdk/aSceneEntry.h	/^		DWORD _screenIndex;	$/;"	m	class:aSceneEntry
_serverList	sdk/aGlobalClient.h	/^		AMMap<DWORD,VARSRVINFO> _serverList;$/;"	m	class:GlobalClient
_shmAddr	sdk/aShareMem.h	/^		void * _shmAddr; \/** <共享内存的地址> *\/ $/;"	m	class:aShareMem
_shmID	sdk/aShareMem.h	/^		int _shmID;		$/;"	m	class:aShareMem
_size	sdk/aShareMem.h	/^	unsigned char _size;$/;"	m	struct:tagResumeCallBack
_size	sdk/aTCPClientPool.cpp	/^		unsigned int _size;$/;"	m	class:aTCPClientTaskQueue	file:
_size	sdk/aTCPTaskPool.cpp	/^		unsigned int _size;$/;"	m	class:aTCPTaskQueue	file:
_snd_queue	sdk/aSocket.h	/^		stBufferCmdQueue _snd_queue;$/;"	m	class:aSocket
_sock	sdk/aMiniTCPClient.h	/^		aSocket * _sock;$/;"	m	class:aMiniTCPClient
_sock	sdk/aTCPClient.h	/^		aSocket *_sock;$/;"	m	class:aTCPClient
_socket	sdk/aTCPTask.h	/^		aSocket _socket;\/*<套接口>**\/$/;"	m	class:aUDPTask
_socket	sdk/aUDPTask.h	/^		aSocket _socket;\/*<套接口>**\/$/;"	m	class:aTCPTask
_state	sdk/aPython.h	/^		PyGILState_STATE _state;$/;"	m	class:aPyThreadStateLock
_tableDef	sdk/aDBConnectPool.h	/^		aTableDef * _tableDef;$/;"	m	class:aDBConnectPool
_tableDef	sdk/aDBConnectPool.h	/^		aTableDef * _tableDef;$/;"	m	class:aMysqlDB
_tableInfo	sdk/aTableDef.h	/^		TABLEINFO _tableInfo;$/;"	m	class:aTableDef
_taskPool	sdk/aDebugService.h	/^		aTCPTaskPool * _taskPool;$/;"	m	class:aDebugService
_temp_queue	sdk/aTCPClientPool.cpp	/^		std::queue<aTCPClient *, std::deque<aTCPClient * > > _temp_queue;$/;"	m	class:aTCPClientTaskQueue	file:
_temp_queue	sdk/aTCPTaskPool.cpp	/^		std::queue<aTCPTask *, std::deque<aTCPTask * > > _temp_queue;$/;"	m	class:aTCPTaskQueue	file:
_terminate	sdk/aService.h	/^		bool _terminate; $/;"	m	class:aService
_thread	sdk/aThread.h	/^		pthread_t _thread;\/**<线程对象*\/$/;"	m	class:aThread
_threadName	sdk/aThread.h	/^		std::string _threadName; \/**<线程名*\/$/;"	m	class:aThread
_tick_timer	sdk/aTCPClient.h	/^		aTimer _tick_timer;$/;"	m	class:aTCPClient
_tick_timer	sdk/aTCPTask.h	/^		aTimer _tick_timer;\/**<定时器*\/$/;"	m	class:aUDPTask
_tick_timer	sdk/aUDPTask.h	/^		aTimer _tick_timer;\/**<定时器*\/$/;"	m	class:aTCPTask
_timer	sdk/aTime.h	/^		aRealTime _timer;$/;"	m	class:aTimer
_times	sdk/aTimeWarp.h	/^			unsigned long _times;$/;"	m	struct:FunctionTime::stFunctionTime
_times	sdk/aTimeWarp.h	/^		FUNTIME_HASH _times;$/;"	m	class:FunctionTime
_timezone	sdk/aTime.cpp	/^long aRealTime::_timezone = 0L;$/;"	m	class:aRealTime	file:
_timezone	sdk/aTime.h	/^		static long _timezone; \/*<时区>*\/$/;"	m	class:aRealTime
_total_time	sdk/aTimeWarp.h	/^			unsigned long _total_time;$/;"	m	struct:FunctionTime::stFunctionTime
_tv_1	sdk/aTimeWarp.h	/^		struct timespec _tv_1;$/;"	m	class:FunctionTime_Wrapper	typeref:struct:FunctionTime_Wrapper::timespec
_type	sdk/aShareMem.h	/^	unsigned char _type; 	\/** <内存类型 > *\/$/;"	m	struct:tagShareMemHead
_usedTimes	sdk/aDBConnectPool.h	/^		DWORD _usedTimes;$/;"	m	class:aMysqlDB
_used_map	sdk/aShareMem.h	/^		SHAREMEMHEAD_MAP _used_map; \/** < 正在使用的共享内存 key为数据的使用地址即tagStoredHead 中  _data_addr的地址 方便回收> *\/$/;"	m	class:aShareMem
_userName	sdk/aDBConnectPool.h	/^		char _userName[MAX_USERSIZE];$/;"	m	class:aDBConnectPool
_userName	sdk/aDBConnectPool.h	/^		char _userName[MAX_USERSIZE];$/;"	m	class:aMysqlDB
_usingTime	sdk/aDBConnectPool.h	/^		atmTime _usingTime;$/;"	m	class:aMysqlDB
_usleeptime	sdk/aMiniTCPClient.h	/^		unsigned long _usleeptime;$/;"	m	class:aMiniTCPClient
_values	sdk/aGlobal.h	/^		GLOBALVAL _values;$/;"	m	class:aGlobal
_var	sdk/aLuaBase.h	/^		V T::*_var;$/;"	m	class:aLuaBase::mem_var::T
_var	sdk/aVars.h	/^		VARTYPE _var;$/;"	m	class:Vars
_var	sdk/aVarsM .h	/^			Vars _var;$/;"	m	struct:VarsM::stVars
_version	sdk/aShareMem.h	/^	unsigned short _version; \/** <版本号 > *\/$/;"	m	struct:tagShareMemHead
_wdServerID	sdk/aNetService.h	/^		DWORD _wdServerID;$/;"	m	class:aNetService
_wdServerID	sdk/aUDPNetServer.h	/^		DWORD _wdServerID;$/;"	m	class:aUDPNetService
_wdServerType	sdk/aNetService.h	/^		DWORD _wdServerType;$/;"	m	class:aNetService
_wdServerType	sdk/aUDPNetServer.h	/^		DWORD _wdServerType;$/;"	m	class:aUDPNetService
aArg	sdk/aArg.cpp	/^aArg::aArg()$/;"	f	class:aArg
aArg	sdk/aArg.h	/^class aArg:private aNoneCopyable$/;"	c
aBits	sdk/aBits.h	/^		aBits()$/;"	f	class:aBits
aBits	sdk/aBits.h	/^class aBits$/;"	c
aCheckConnThread	sdk/aTCPClientPool.cpp	/^		aCheckConnThread(aTCPClientPool * pool,const std::string & name = std::string("aCheckConnThread"))$/;"	f	class:aCheckConnThread
aCheckConnThread	sdk/aTCPClientPool.cpp	/^class aCheckConnThread:public aThread$/;"	c	file:
aCkeckWaitThread	sdk/aTCPClientPool.cpp	/^		aCkeckWaitThread($/;"	f	class:aCkeckWaitThread
aCkeckWaitThread	sdk/aTCPClientPool.cpp	/^class aCkeckWaitThread : public aThread, public aTCPClientTaskQueue$/;"	c	file:
aComponent	sdk/aComponent.h	/^		aComponent(DWORD id):_dwEntryID(id){}$/;"	f	class:aComponent
aComponent	sdk/aComponent.h	/^class aComponent : public aComponentBase$/;"	c
aComponentBase	sdk/aComponent.h	/^class aComponentBase$/;"	c
aComponentEntity	sdk/aEntryBase.h	/^class aComponentEntity : public aEntryBase$/;"	c
aCond	sdk/aCond.cpp	/^aCond::aCond()$/;"	f	class:aCond
aCond	sdk/aCond.h	/^class aCond : private aNoneCopyable$/;"	c
aConfig	sdk/aConfig.cpp	/^aConfig::aConfig(const char * configfile \/* = *\/ ):filename(configfile)$/;"	f	class:aConfig
aConfig	sdk/aConfig.h	/^class aConfig$/;"	c
aDBConnectPool	sdk/aDBConnectPool.cpp	/^aDBConnectPool::aDBConnectPool(){$/;"	f	class:aDBConnectPool
aDBConnectPool	sdk/aDBConnectPool.h	/^class aDBConnectPool:private aNoneCopyable$/;"	c
aDataM	sdk/aSerialization.h	/^typedef aEntryM<aEntryID,aMultiEntryName> aDataM;$/;"	t
aDebugService	sdk/aDebugService.h	/^		aDebugService():aNetService("DebugServer",DEBUGSERVER),aThread("DebugThread")$/;"	f	class:aDebugService
aDebugService	sdk/aDebugService.h	/^class aDebugService : public aNetService,public aThread$/;"	c
aEntry	sdk/aEntry.h	/^	aEntry():aEntryBase()$/;"	f	struct:aEntry
aEntry	sdk/aEntry.h	/^struct aEntry : public aEntryBase,private aNoneCopyable$/;"	s
aEntryBase	sdk/aEntryBase.h	/^	aEntryBase()$/;"	f	struct:aEntryBase
aEntryBase	sdk/aEntryBase.h	/^struct aEntryBase$/;"	s
aEntryCallBack	sdk/aEntryBase.h	/^struct aEntryCallBack$/;"	s
aEntryID	sdk/aEntryM.h	/^class aEntryID:public LimitHash<DWORD,aEntry *>$/;"	c
aEntryM	sdk/aEntryM.h	/^class aEntryM:protected e1,protected e2,protected e3$/;"	c
aEntryName	sdk/aEntryM.h	/^class aEntryName:public LimitHash<const char *,aEntry *>$/;"	c
aEntryNone	sdk/aEntryM.h	/^class aEntryNone$/;"	c
aEntryTempID	sdk/aEntryM.h	/^		aEntryTempID(){}$/;"	f	class:aEntryTempID
aEntryTempID	sdk/aEntryM.h	/^class aEntryTempID:public LimitHash<DWORD,aEntry *>$/;"	c
aFuncion	sdk/aFunc.h	/^				aFuncion(std::function<R(Args...)> fun) : _fun(fun) {$/;"	f	class:Age::aFuncion
aFuncion	sdk/aFunc.h	/^		class aFuncion {$/;"	c	namespace:Age
aGlobal	sdk/aGlobal.h	/^class aGlobal$/;"	c
aHttpTask	sdk/aHttpTask.h	/^		aHttpTask($/;"	f	class:aHttpTask
aHttpTask	sdk/aHttpTask.h	/^class aHttpTask : private aNoneCopyable$/;"	c
aHttpTaskContainer	sdk/aHttpTaskPool.cpp	/^		typedef std::list<aHttpTask * > aHttpTaskContainer;$/;"	t	class:aHttpThread	file:
aHttpTaskP	sdk/aHttpTaskPool.cpp	/^		typedef aHttpTask* aHttpTaskP;$/;"	t	class:aHttpThread	file:
aHttpTaskPool	sdk/aHttpTaskPool.h	/^		aHttpTaskPool()$/;"	f	class:aHttpTaskPool
aHttpTaskPool	sdk/aHttpTaskPool.h	/^class aHttpTaskPool : private aNoneCopyable$/;"	c
aHttpThread	sdk/aHttpTaskPool.cpp	/^		aHttpThread($/;"	f	class:aHttpThread
aHttpThread	sdk/aHttpTaskPool.cpp	/^class aHttpThread : public aThread$/;"	c	file:
aIni	sdk/aIni.cpp	/^aIni::aIni(string filepath) {$/;"	f	class:aIni
aIni	sdk/aIni.h	/^class aIni {$/;"	c
aLevel	sdk/aLogger.cpp	/^aLogger::aLevel::aLevel(log4cxx::LevelPtr level):alevel(level)$/;"	f	class:aLogger::aLevel
aLevel	sdk/aLogger.h	/^		class aLevel$/;"	c	class:aLogger
aLevelInt	sdk/aLogger.h	/^			enum aLevelInt$/;"	g	class:aLogger::aLevel
aLogger	sdk/aLogger.cpp	/^aLogger::aLogger(const std::string & name)$/;"	f	class:aLogger
aLogger	sdk/aLogger.h	/^class aLogger$/;"	c
aLuaBase	sdk/aLuaBase.h	/^namespace aLuaBase$/;"	n
aLuaContext	sdk/aLuaBase.h	/^		aLuaContext( void ) : L( aLuaBase::open() )$/;"	f	struct:aLuaBase::aLuaContext
aLuaContext	sdk/aLuaBase.h	/^	struct aLuaContext$/;"	s	namespace:aLuaBase
aMNetService	sdk/aMNetService.cpp	/^aMNetService::aMNetService(const std::string &name) :aService(name)$/;"	f	class:aMNetService
aMNetService	sdk/aMNetService.h	/^class aMNetService : public aService$/;"	c
aMTCPService	sdk/aMTCPService.cpp	/^aMTCPService::aMTCPService(const std::string &name) : name(name)$/;"	f	class:aMTCPService
aMTCPService	sdk/aMTCPService.h	/^class aMTCPService : private aNoneCopyable$/;"	c
aMemStream	sdk/aMemStream.h	/^		aMemStream(){$/;"	f	class:aMemStream
aMemStream	sdk/aMemStream.h	/^class aMemStream$/;"	c
aMemStream	sdk/aSocket.cpp	/^stBufferCmdQueue::aMemStream():_maxSize(_BLOCKSIZE),_offPtr(0),_currPtr(0),_buffer(_maxSize)$/;"	f	class:stBufferCmdQueue
aMemStream	sdk/aSocket.cpp	/^stStackCmdQueue::aMemStream():_maxSize(PACKET_ZIP_BUFFER),_offPtr(0),_currPtr(0)$/;"	f	class:stStackCmdQueue
aMiniTCPClient	sdk/aMiniTCPClient.cpp	/^aMiniTCPClient::aMiniTCPClient(const std::string &name,$/;"	f	class:aMiniTCPClient
aMiniTCPClient	sdk/aMiniTCPClient.h	/^class aMiniTCPClient: public aThread,public aMsgParse$/;"	c
aMisc	sdk/aFunc.h	/^	class aMisc$/;"	c	namespace:Age
aMsgParse	sdk/aMsgParse.h	/^		aMsgParse()$/;"	f	class:aMsgParse
aMsgParse	sdk/aMsgParse.h	/^class aMsgParse$/;"	c
aMsgtarget	sdk/aMsgCallBack.h	/^class aMsgtarget$/;"	c
aMultiEntryName	sdk/aEntryM.h	/^class aMultiEntryName:public MultiHash<const char *,aEntry *>$/;"	c
aMutex	sdk/aMutex.h	/^	aMutex(int kind = PTHREAD_MUTEX_FAST_NP)$/;"	f	class:aMutex
aMutex	sdk/aMutex.h	/^class aMutex : private aNoneCopyable$/;"	c
aMutexAutoScop	sdk/aMutex.h	/^		aMutexAutoScop()$/;"	f	class:aMutexAutoScop
aMutexAutoScop	sdk/aMutex.h	/^class aMutexAutoScop:private aNoneCopyable$/;"	c
aMysqlDB	sdk/aDBConnectPool.cpp	/^aMysqlDB::aMysqlDB(const char * host,char * userName, char *passwd,unsigned int port,char * dbName,aTableDef *tableDef,bool autoCommit):_id(++_autoIncrease)$/;"	f	class:aMysqlDB
aMysqlDB	sdk/aDBConnectPool.h	/^class aMysqlDB :private aNoneCopyable$/;"	c
aNetService	sdk/aNetService.cpp	/^aNetService::aNetService(const std::string   &name,DWORD serverType) :aService(name)$/;"	f	class:aNetService
aNetService	sdk/aNetService.h	/^class aNetService : public aService$/;"	c
aNineScreenIndex	sdk/aNineScreenIndex.cpp	/^aNineScreenIndex<MAX_X,MAX_Y>::aNineScreenIndex()$/;"	f	class:aNineScreenIndex
aNineScreenIndex	sdk/aNineScreenIndex.h	/^class aNineScreenIndex : public aNoneCopyable$/;"	c
aNoneCopyable	sdk/aNoneCopyable.h	/^		aNoneCopyable(){};$/;"	f	class:aNoneCopyable
aNoneCopyable	sdk/aNoneCopyable.h	/^class  aNoneCopyable$/;"	c
aOkayThread	sdk/aTCPTaskPool.cpp	/^		aOkayThread($/;"	f	class:aOkayThread
aOkayThread	sdk/aTCPTaskPool.cpp	/^class aOkayThread : public aThread, public aTCPTaskQueue$/;"	c	file:
aPos	sdk/aPos.h	/^	aPos():aVector3() $/;"	f	struct:aPos
aPos	sdk/aPos.h	/^	aPos(const float & x, const float &y,const float &z) : aVector3(x,y,z)$/;"	f	struct:aPos
aPos	sdk/aPos.h	/^struct aPos : public aVector3$/;"	s
aPosI	sdk/aSceneEntry.h	/^typedef DWORD aPosI;$/;"	t
aPosIVector	sdk/aNineScreenIndex.h	/^typedef std::vector<aPosI> aPosIVector;$/;"	t
aPosToaPosI	sdk/aSceneEntry.h	/^		static void aPosToaPosI(const aPos & screenWH,const aPos & pos, aPosI & posi)$/;"	f	class:aSceneEntry
aPyThreadStateLock	sdk/aPython.h	/^		aPyThreadStateLock()$/;"	f	class:aPyThreadStateLock
aPyThreadStateLock	sdk/aPython.h	/^class aPyThreadStateLock$/;"	c
aPython	sdk/aPython.h	/^		aPython(const char * path)$/;"	f	class:aPython
aPython	sdk/aPython.h	/^class aPython$/;"	c
aRWLock	sdk/aRWLock.h	/^		aRWLock():rd_count(0),wr_count(0)$/;"	f	class:aRWLock
aRWLock	sdk/aRWLock.h	/^class aRWLock : private aNoneCopyable$/;"	c
aRWLockAutoScopeRD	sdk/aRWLock.h	/^		aRWLockAutoScopeRD(aRWLock & lock) : rwlock(lock)$/;"	f	class:aRWLockAutoScopeRD
aRWLockAutoScopeRD	sdk/aRWLock.h	/^class aRWLockAutoScopeRD :private aNoneCopyable$/;"	c
aRWLockAutoScopeRW	sdk/aRWLock.h	/^		aRWLockAutoScopeRW(aRWLock & lock) : rwlock(lock)$/;"	f	class:aRWLockAutoScopeRW
aRWLockAutoScopeRW	sdk/aRWLock.h	/^class aRWLockAutoScopeRW : private aNoneCopyable$/;"	c
aRealTime	sdk/aTime.h	/^		aRealTime(const aRealTime &rt)$/;"	f	class:aRealTime
aRealTime	sdk/aTime.h	/^		aRealTime(const int delay = 0 )$/;"	f	class:aRealTime
aRealTime	sdk/aTime.h	/^class aRealTime$/;"	c
aRecord	sdk/aTable.h	/^		aRecord(){};$/;"	f	class:aRecord
aRecord	sdk/aTable.h	/^class aRecord$/;"	c
aRecordSet	sdk/aTable.h	/^		aRecordSet(){};$/;"	f	class:aRecordSet
aRecordSet	sdk/aTable.h	/^class aRecordSet$/;"	c
aRecycleThread	sdk/aTCPTaskPool.cpp	/^		aRecycleThread($/;"	f	class:aRecycleThread
aRecycleThread	sdk/aTCPTaskPool.cpp	/^class aRecycleThread : public aThread, public aTCPTaskQueue$/;"	c	file:
aRedisClient	sdk/aRedisClient.cpp	/^aRedisClient::aRedisClient(const AStr &host,const int port,const AStr &pass,const int db):_context(NULL),_port(0),_dwID( _autoIncrease ++)$/;"	f	class:aRedisClient
aRedisClient	sdk/aRedisClient.h	/^class aRedisClient:private aNoneCopyable$/;"	c
aRedisCmd	sdk/aRedisCommand.h	/^	aRedisCmd() : argc(0), argv(NULL), argvlen(NULL) {}$/;"	f	struct:aRedisCmd
aRedisCmd	sdk/aRedisCommand.h	/^struct aRedisCmd {$/;"	s
aRedisCmdMaker	sdk/aRedisCommand.h	/^		explicit aRedisCmdMaker(const AStr& cmdname)$/;"	f	class:aRedisCmdMaker
aRedisCmdMaker	sdk/aRedisCommand.h	/^class aRedisCmdMaker {$/;"	c
aRedisConnectPool	sdk/aRedisConnectPool.cpp	/^aRedisConnectPool::aRedisConnectPool()$/;"	f	class:aRedisConnectPool
aRedisConnectPool	sdk/aRedisConnectPool.h	/^class aRedisConnectPool : private aNoneCopyable$/;"	c
aRedisResult	sdk/aRedisResult.h	/^class aRedisResult$/;"	c
aReplyGuard	sdk/aRedisResult.cpp	/^		aReplyGuard(redisReply* reply)$/;"	f	class:aReplyGuard
aReplyGuard	sdk/aRedisResult.cpp	/^class aReplyGuard {$/;"	c	file:
aSceneEntry	sdk/aSceneEntry.h	/^		aSceneEntry(SceneEntryType type,const SceneEntryState state = Entry_Normal):_entryType(type),_entryState(state),_position(0.0f,0.0f,0.0f)$/;"	f	class:aSceneEntry
aSceneEntry	sdk/aSceneEntry.h	/^class aSceneEntry : public aEntry$/;"	c
aSceneEntry_H__	sdk/aSceneEntry.h	2;"	d
aService	sdk/aService.cpp	/^aService::aService(const std::string  & name)$/;"	f	class:aService
aService	sdk/aService.h	/^class aService : private aNoneCopyable$/;"	c
aShareMem	sdk/aShareMem.cpp	/^aShareMem::aShareMem()$/;"	f	class:aShareMem
aShareMem	sdk/aShareMem.h	/^class aShareMem$/;"	c
aSingleton	sdk/aSingleton.h	/^	aSingleton() {}$/;"	f	class:aSingleton
aSingleton	sdk/aSingleton.h	/^class aSingleton$/;"	c
aSocket	sdk/aSocket.cpp	/^aSocket::aSocket(const int sock, const struct sockaddr_in * addr \/* = NULL *\/,const bool compress \/* = false *\/,const bool istcp \/* = false *\/)$/;"	f	class:aSocket
aSocket	sdk/aSocket.h	/^class aSocket : private aNoneCopyable$/;"	c
aSyncThread	sdk/aTCPTaskPool.cpp	/^		aSyncThread($/;"	f	class:aSyncThread
aSyncThread	sdk/aTCPTaskPool.cpp	/^class aSyncThread : public aThread, public aTCPTaskQueue$/;"	c	file:
aTCPClient	sdk/aTCPClient.cpp	/^aTCPClient::aTCPClient(const std::string &lip,const DWORD sport,const bool bcompress):port(sport),compress(bcompress), _tick_timer(180),ip(lip)$/;"	f	class:aTCPClient
aTCPClient	sdk/aTCPClient.h	/^class aTCPClient : private aNoneCopyable ,public aMsgParse$/;"	c
aTCPClientConntainer	sdk/aTCPClientPool.cpp	/^typedef std::list<aTCPClient *> aTCPClientConntainer;$/;"	t	file:
aTCPClientConntainer	sdk/aTCPClientPool.h	/^		typedef std::list< aTCPClient* > aTCPClientConntainer;$/;"	t	class:aTCPClientPool
aTCPClientPool	sdk/aTCPClientPool.h	/^		explicit aTCPClientPool(const unsigned int connPerThread = 512,const unsigned long us = 50000L ):connPerThread(connPerThread)$/;"	f	class:aTCPClientPool
aTCPClientPool	sdk/aTCPClientPool.h	/^class aTCPClientPool : protected aNoneCopyable$/;"	c
aTCPClientTaskQueue	sdk/aTCPClientPool.cpp	/^		aTCPClientTaskQueue() :_size(0) {}$/;"	f	class:aTCPClientTaskQueue
aTCPClientTaskQueue	sdk/aTCPClientPool.cpp	/^class aTCPClientTaskQueue$/;"	c	file:
aTCPClientThread	sdk/aTCPClientPool.cpp	/^		aTCPClientThread($/;"	f	class:aTCPClientThread
aTCPClientThread	sdk/aTCPClientPool.cpp	/^class aTCPClientThread : public aThread, public aTCPClientTaskQueue$/;"	c	file:
aTCPClient_IT	sdk/aTCPClientPool.cpp	/^typedef aTCPClientConntainer::iterator aTCPClient_IT;$/;"	t	file:
aTCPClient_IT	sdk/aTCPClientPool.h	/^		typedef aTCPClientConntainer::iterator aTCPClient_IT;$/;"	t	class:aTCPClientPool
aTCPServic	sdk/aTCPServic.cpp	/^aTCPServic::aTCPServic(const std::string &name) : name(name),sock(-1)$/;"	f	class:aTCPServic
aTCPServic	sdk/aTCPServic.h	/^class aTCPServic : private aNoneCopyable$/;"	c
aTCPTask	sdk/aUDPTask.cpp	/^aTCPTask::aTCPTask(const int sock, const struct sockaddr_in *addr,const bool compress,const bool checkSignal): _socket(sock,addr,compress),lifeTime(),_checkSignal(checkSignal),_tick_timer(30),tick(false)$/;"	f	class:aTCPTask
aTCPTask	sdk/aUDPTask.h	/^class aTCPTask :private aNoneCopyable,public aMsgParse$/;"	c
aTCPTaskContainer	sdk/aTCPTaskPool.cpp	/^typedef std::list<aTCPTask * > aTCPTaskContainer;$/;"	t	file:
aTCPTaskPool	sdk/aTCPTaskPool.h	/^		explicit aTCPTaskPool(const int maxConns, const int state,const unsigned long us=50000L) : _maxConns(maxConns), state(state)$/;"	f	class:aTCPTaskPool
aTCPTaskPool	sdk/aTCPTaskPool.h	/^class aTCPTaskPool : private aNoneCopyable$/;"	c
aTCPTaskQueue	sdk/aTCPTaskPool.cpp	/^		aTCPTaskQueue() :_size(0) {}$/;"	f	class:aTCPTaskQueue
aTCPTaskQueue	sdk/aTCPTaskPool.cpp	/^class aTCPTaskQueue$/;"	c	file:
aTCPTask_IT	sdk/aTCPTaskPool.cpp	/^typedef aTCPTaskContainer::iterator aTCPTask_IT;$/;"	t	file:
aTCPTask_State	sdk/aUDPTask.h	/^		enum aTCPTask_State$/;"	g	class:aTCPTask
aTableDef	sdk/aTableDef.h	/^		aTableDef(){}$/;"	f	class:aTableDef
aTableDef	sdk/aTableDef.h	/^class aTableDef:private aNoneCopyable$/;"	c
aThread	sdk/aThread.h	/^		aThread(const std::string & name = std::string("aThread"),const bool joinable = true):_threadName(name),_alive(false),_complete(false)$/;"	f	class:aThread
aThread	sdk/aThread.h	/^class aThread : private aNoneCopyable$/;"	c
aThreadGroup	sdk/aThread.cpp	/^aThreadGroup::aThreadGroup():vts(),rwlock()$/;"	f	class:aThreadGroup
aThreadGroup	sdk/aThread.h	/^class aThreadGroup : private aNoneCopyable$/;"	c
aTimer	sdk/aTime.h	/^		aTimer(const float how_long,const aRealTime &cur):_long((int)(how_long * 1000)),_timer(cur)$/;"	f	class:aTimer
aTimer	sdk/aTime.h	/^		aTimer(const float how_long,const int delay = 0) : _long ((int)(how_long*1000)),_timer(delay * 1000)$/;"	f	class:aTimer
aTimer	sdk/aTime.h	/^class aTimer$/;"	c
aUDPNetService	sdk/aUDPNetServer.cpp	/^aUDPNetService::aUDPNetService(const std::string   &name,DWORD serverType) :aService(name)$/;"	f	class:aUDPNetService
aUDPNetService	sdk/aUDPNetServer.h	/^class aUDPNetService : public aService$/;"	c
aUDPServic	sdk/aUDPServer.cpp	/^aUDPServic::aUDPServic(const std::string &name) : name(name),sock(-1)$/;"	f	class:aUDPServic
aUDPServic	sdk/aUDPServer.h	/^class aUDPServic : private aNoneCopyable$/;"	c
aUDPTask	sdk/aTCPTask.cpp	/^aUDPTask::aUDPTask(const int sock, const struct sockaddr_in *addr,const bool compress,const bool checkSignal): _socket(sock,addr,compress),lifeTime(),_checkSignal(checkSignal),_tick_timer(30),tick(false)$/;"	f	class:aUDPTask
aUDPTask	sdk/aTCPTask.h	/^class aUDPTask :private aNoneCopyable,public aMsgParse$/;"	c
aUDPTask_State	sdk/aTCPTask.h	/^		enum aUDPTask_State$/;"	g	class:aUDPTask
aUNIQUEIDDWORD	sdk/aUniqueID.h	/^typedef aUniqueID<DWORD> aUNIQUEIDDWORD;$/;"	t
aUniqueID	sdk/aUniqueID.h	/^	aUniqueID()$/;"	f	class:aUniqueID
aUniqueID	sdk/aUniqueID.h	/^	aUniqueID(T minID)$/;"	f	class:aUniqueID
aUniqueID	sdk/aUniqueID.h	/^	aUniqueID(T minID, T maxID)$/;"	f	class:aUniqueID
aUniqueID	sdk/aUniqueID.h	/^class aUniqueID : public aNoneCopyable$/;"	c
aUrl	sdk/aUrl.h	/^		aUrl(const char * http):_http(http)$/;"	f	class:aUrl
aUrl	sdk/aUrl.h	/^		aUrl(std::string & http):_http(http)$/;"	f	class:aUrl
aUrl	sdk/aUrl.h	/^class aUrl$/;"	c
aUser	sdk/aUser.h	/^	aUser(SceneEntryType type = Entry_Player):aSceneEntry(type)$/;"	f	struct:aUser
aUser	sdk/aUser.h	/^struct aUser : aSceneEntry$/;"	s
aUserM	sdk/aUserM.h	/^	aUserM()$/;"	f	class:aUserM
aUserM	sdk/aUserM.h	/^class aUserM:public aEntryM<aEntryID,aEntryTempID,aEntryName>$/;"	c
aVector3	sdk/aVec3.cpp	/^inline aVector3::aVector3()$/;"	f	class:aVector3
aVector3	sdk/aVec3.cpp	/^inline aVector3::aVector3(const float &x, const float &y, const float &z): x( x ), y( y ), z( z ){}$/;"	f	class:aVector3
aVector3	sdk/aVec3.h	/^class aVector3$/;"	c
aVerifyThread	sdk/aTCPTaskPool.cpp	/^		aVerifyThread($/;"	f	class:aVerifyThread
aVerifyThread	sdk/aTCPTaskPool.cpp	/^class aVerifyThread : public aThread, public aTCPTaskQueue$/;"	c	file:
aXMLReader	sdk/aXMLReader.cpp	/^aXMLReader::aXMLReader()$/;"	f	class:aXMLReader
aXMLReader	sdk/aXMLReader.h	/^class aXMLReader$/;"	c
accept	sdk/aMTCPService.cpp	/^int aMTCPService::accept(ACCEPTINFO & info)$/;"	f	class:aMTCPService
accept	sdk/aTCPServic.cpp	/^int aTCPServic::accept(struct sockaddr_in * addr)$/;"	f	class:aTCPServic
accept	sdk/aUDPServer.cpp	/^int aUDPServic::accept(struct sockaddr_in * addr)$/;"	f	class:aUDPServic
add	sdk/aArg.cpp	/^bool aArg::add(const struct argp_option * options \/* = 0 *\/,argsParser func \/* = 0 *\/,const char * args_doc \/* = 0 *\/,const char * doc \/* = 0 *\/)$/;"	f	class:aArg
add	sdk/aHttpTaskPool.cpp	/^		void add(aHttpTask *task)$/;"	f	class:aHttpThread
add	sdk/aIni.cpp	/^void iniNode::add(const char* s) {$/;"	f	class:iniNode
add	sdk/aIni.cpp	/^void iniNode::add(string &s) {$/;"	f	class:iniNode
add	sdk/aIni.cpp	/^void iniNode::add(string name, string s) {$/;"	f	class:iniNode
add	sdk/aTCPClientPool.cpp	/^		inline void add(aTCPClient *task)$/;"	f	class:aTCPClientTaskQueue
add	sdk/aTCPTaskPool.cpp	/^		inline void add(aTCPTask *task)$/;"	f	class:aTCPTaskQueue
add	sdk/aThread.cpp	/^void aThreadGroup::add(aThread * _thread)$/;"	f	class:aThreadGroup
addCheckWait	sdk/aTCPClientPool.cpp	/^void aTCPClientPool::addCheckWait(aTCPClient * task)$/;"	f	class:aTCPClientPool
addConsoleLog	sdk/aLogger.cpp	/^bool aLogger::addConsoleLog()$/;"	f	class:aLogger
addDailyLocalFileLog	sdk/aLogger.cpp	/^bool aLogger::addDailyLocalFileLog( const std::string & file )$/;"	f	class:aLogger
addDelay	sdk/aTime.h	/^		void addDelay(int delay)$/;"	f	class:aRealTime
addEntry	sdk/aEntryM.h	/^		inline bool addEntry(aEntry * e)$/;"	f	class:aEntryM
addEpoll	sdk/aHttpTask.h	/^		void addEpoll(int kdpfd, __uint32_t events, void *ptr)$/;"	f	class:aHttpTask
addEpoll	sdk/aSocket.h	/^		inline void addEpoll( int kdpfd, __uint32_t events, void * ptr)$/;"	f	class:aSocket
addEpoll	sdk/aTCPClient.cpp	/^void aTCPClient::addEpoll(int kdpfd,__uint32_t events,void *ptr)$/;"	f	class:aTCPClient
addEpoll	sdk/aTCPTask.cpp	/^void aUDPTask::addEpoll(int kdpfd,__uint32_t events,void *ptr)$/;"	f	class:aUDPTask
addEpoll	sdk/aUDPTask.cpp	/^void aTCPTask::addEpoll(int kdpfd,__uint32_t events,void *ptr)$/;"	f	class:aTCPTask
addHttp	sdk/aHttpTaskPool.cpp	/^bool aHttpTaskPool::addHttp(aHttpTask *task)$/;"	f	class:aHttpTaskPool
addLocalFileLog	sdk/aLogger.cpp	/^bool aLogger::addLocalFileLog(const std::string & file)$/;"	f	class:aLogger
addMain	sdk/aTCPClientPool.cpp	/^bool aTCPClientPool::addMain(aTCPClient * task)$/;"	f	class:aTCPClientPool
addOkay	sdk/aTCPTaskPool.cpp	/^bool aTCPTaskPool::addOkay(aTCPTask *task)$/;"	f	class:aTCPTaskPool
addOption	sdk/aArg.cpp	/^void aArg::addOption(const struct argp_option *options)$/;"	f	class:aArg
addOrReplace	sdk/aIni.cpp	/^void aIni::addOrReplace(string temp) {$/;"	f	class:aIni
addOrReplaceFile	sdk/aIni.cpp	/^void aIni::addOrReplaceFile(string f) {$/;"	f	class:aIni
addRecycle	sdk/aTCPTaskPool.cpp	/^void aTCPTaskPool::addRecycle(aTCPTask *task)$/;"	f	class:aTCPTaskPool
addSync	sdk/aTCPTaskPool.cpp	/^void aTCPTaskPool::addSync(aTCPTask *task)$/;"	f	class:aTCPTaskPool
addToContainer	sdk/aTCPClient.h	/^		virtual void addToContainer(){};$/;"	f	class:aTCPClient
addToContainer	sdk/aTCPTask.h	/^		virtual void addToContainer(){}$/;"	f	class:aUDPTask
addToContainer	sdk/aUDPTask.h	/^		virtual void addToContainer(){}$/;"	f	class:aTCPTask
addUser	sdk/aUserM.cpp	/^bool aUserM::addUser(aUser *user)$/;"	f	class:aUserM
addVerify	sdk/aTCPTaskPool.cpp	/^bool aTCPTaskPool::addVerify(aTCPTask *task)$/;"	f	class:aTCPTaskPool
addr	sdk/aMTCPService.h	/^	struct sockaddr_in addr;$/;"	m	struct:stAcceptInfo	typeref:struct:stAcceptInfo::sockaddr_in
addr	sdk/aSocket.h	/^		struct sockaddr_in addr;$/;"	m	class:aSocket	typeref:struct:aSocket::sockaddr_in
age_args_doc	sdk/aArg.cpp	/^static const char age_args_doc[] = "";$/;"	v	file:
age_doc	sdk/aArg.cpp	/^static const char age_doc[] = "the defalut age doc";$/;"	v	file:
age_options	sdk/aArg.cpp	/^static struct argp_option age_options[] =$/;"	v	typeref:struct:argp_option	file:
alarm	sdk/aLogger.cpp	/^bool aLogger::alarm(const char * pattern,... )$/;"	f	class:aLogger
alevel	sdk/aLogger.h	/^			log4cxx::LevelPtr alevel;$/;"	m	class:aLogger::aLevel
allOptions	sdk/aArg.h	/^	struct argp_option *allOptions;$/;"	m	class:aArg	typeref:struct:aArg::argp_option
allocate	sdk/aShareMem.cpp	/^void * aShareMem::allocate(Type_MemSize size,unsigned short dataid)$/;"	f	class:aShareMem
aparse_opt	sdk/aArg.cpp	/^error_t aparse_opt(int key ,char * arg,struct argp_state *state)$/;"	f
append	sdk/aRedisClient.cpp	/^int aRedisClient::append(const AStr& key, const AStr& value)$/;"	f	class:aRedisClient
arg	sdk/aLuaBase.h	/^			static T arg; $/;"	m	struct:aLuaBase::isEnum
argInstance	sdk/aArg.cpp	/^aArg * aArg::argInstance = NULL;$/;"	m	class:aArg	file:
argInstance	sdk/aArg.h	/^	static aArg * argInstance;$/;"	m	class:aArg
argc	sdk/aRedisCommand.h	/^	int argc;$/;"	m	struct:aRedisCmd
argsParser	sdk/aArg.h	/^typedef error_t(* argsParser)(int key,char * arg,struct argp_state *state);$/;"	t
argv	sdk/aRedisCommand.h	/^	char** argv;$/;"	m	struct:aRedisCmd
argvlen	sdk/aRedisCommand.h	/^	size_t* argvlen;$/;"	m	struct:aRedisCmd
array	sdk/aIni.h	/^		bool array;$/;"	m	class:iniNode
arrayLength	sdk/aIni.h	/^		int arrayLength;$/;"	m	class:iniNode
assign	sdk/aEntryBase.h	/^aComponent <C>* aComponentEntity::assign(Args && ... args)$/;"	f	class:aComponentEntity
atmTime	sdk/aTime.h	/^		atmTime()$/;"	f	class:atmTime
atmTime	sdk/aTime.h	/^		atmTime(const aRealTime &realTime)$/;"	f	class:atmTime
atmTime	sdk/aTime.h	/^		atmTime(const atmTime &ct)$/;"	f	class:atmTime
atmTime	sdk/aTime.h	/^		atmTime(const time_t &inTime)$/;"	f	class:atmTime
atmTime	sdk/aTime.h	/^class atmTime$/;"	c
auth	sdk/aRedisClient.cpp	/^bool aRedisClient::auth()$/;"	f	class:aRedisClient
base64_decrypt	sdk/aBase64.cpp	/^	void base64_decrypt(const std::string &input, std::string &output)$/;"	f	namespace:Age
base64_encrypt	sdk/aBase64.cpp	/^	void base64_encrypt(const std::string &input, std::string &output)$/;"	f	namespace:Age
baseType	sdk/aLuaBase.h	/^		struct baseType { typedef A type; };$/;"	s	namespace:aLuaBase
baseType	sdk/aLuaBase.h	/^		struct baseType<A&> { typedef A type; };$/;"	s	namespace:aLuaBase
baseType	sdk/aLuaBase.h	/^		struct baseType<A*> { typedef A type; };$/;"	s	namespace:aLuaBase
baseType	sdk/aLuaBase.h	/^		struct baseType<const A&> { typedef A type; };$/;"	s	namespace:aLuaBase
baseType	sdk/aLuaBase.h	/^		struct baseType<const A*> { typedef A type; };$/;"	s	namespace:aLuaBase
bind	sdk/aMNetService.cpp	/^bool aMNetService::bind(const std::string & name ,const unsigned short port)$/;"	f	class:aMNetService
bind	sdk/aMTCPService.cpp	/^bool aMTCPService::bind(const std::string &name, const unsigned short port)$/;"	f	class:aMTCPService
bind	sdk/aTCPServic.cpp	/^bool aTCPServic::bind(const std::string &name, const unsigned short port)$/;"	f	class:aTCPServic
bind	sdk/aUDPServer.cpp	/^bool aUDPServic::bind(const std::string &name, const unsigned short port)$/;"	f	class:aUDPServic
bitcount	sdk/aRedisClient.cpp	/^int aRedisClient::bitcount(const AStr& key)$/;"	f	class:aRedisClient
bitcount	sdk/aRedisClient.cpp	/^int aRedisClient::bitcount(const AStr& key, const int start)$/;"	f	class:aRedisClient
bitcount	sdk/aRedisClient.cpp	/^int aRedisClient::bitcount(const AStr& key, const int start, const int end )$/;"	f	class:aRedisClient
bitmask	sdk/aSocket.h	/^		unsigned int  bitmask;$/;"	m	class:aSocket
bitop	sdk/aRedisClient.cpp	/^int aRedisClient::bitop(const BitOp operation, const AStr& destkey, const AVec<AStr>& keys)$/;"	f	class:aRedisClient
bitop_strs	sdk/aRedisClient.cpp	/^AStr bitop_strs[] = {"AND", "OR", "XOR", "NOT"};$/;"	v
blpop	sdk/aRedisClient.cpp	/^int aRedisClient::blpop(const AVec<AStr>& keys, const int timeout, AVec<AStr>& values)$/;"	f	class:aRedisClient
bool_to_yesno	sdk/aLuaBase.h	/^	template <> struct bool_to_yesno<true> { typedef yesType type; }; $/;"	s	namespace:aLuaBase
bool_to_yesno	sdk/aLuaBase.h	/^	template <bool C> struct bool_to_yesno { typedef noType type; }; $/;"	s	namespace:aLuaBase
broadcast	sdk/aCond.cpp	/^void aCond::broadcast()$/;"	f	class:aCond
brpoplpush	sdk/aRedisClient.cpp	/^int aRedisClient::brpoplpush(const AStr& source, const AStr& destination, const int timeout, AVec<AStr>& values)$/;"	f	class:aRedisClient
buffered	sdk/aTCPTask.h	/^		bool buffered; \/**<发送端是否做发送缓冲*\/$/;"	m	class:aUDPTask
buffered	sdk/aUDPTask.h	/^		bool buffered; \/**<发送端是否做发送缓冲*\/$/;"	m	class:aTCPTask
bzero_Head	sdk/aShareMem.cpp	/^void aShareMem::bzero_Head(LPSHAREMEMHEAD headData)$/;"	f	class:aShareMem
calculateSHMSize	sdk/aShareMem.cpp	/^unsigned int aShareMem::calculateSHMSize()$/;"	f	class:aShareMem
call	sdk/aEntryBase.h	/^void call(aComponentEntity * entity,typename identity<std::function<void(aComponentEntity * entity, Components&...)>>::type f)$/;"	f
call	sdk/aEntryBase.h	/^void call(aComponentEntity * entity,typename identity<std::function<void(aComponentEntity * entity, Components&...)>>::type f,Components ... rest)$/;"	f
call	sdk/aLuaBase.h	/^			RVal call(const char* name)$/;"	f	struct:aLuaBase::table
call	sdk/aLuaBase.h	/^			RVal call(const char* name)$/;"	f	struct:aLuaBase::table_obj
call	sdk/aLuaBase.h	/^			RVal call(const char* name, T1 arg1)$/;"	f	struct:aLuaBase::table
call	sdk/aLuaBase.h	/^			RVal call(const char* name, T1 arg1)$/;"	f	struct:aLuaBase::table_obj
call	sdk/aLuaBase.h	/^			RVal call(const char* name, T1 arg1, T2 arg2)$/;"	f	struct:aLuaBase::table
call	sdk/aLuaBase.h	/^			RVal call(const char* name, T1 arg1, T2 arg2)$/;"	f	struct:aLuaBase::table_obj
call	sdk/aLuaBase.h	/^			RVal call(const char* name, T1 arg1, T2 arg2, T3 arg3)$/;"	f	struct:aLuaBase::table
call	sdk/aLuaBase.h	/^			RVal call(const char* name, T1 arg1, T2 arg2, T3 arg3)$/;"	f	struct:aLuaBase::table_obj
call	sdk/aLuaBase.h	/^		RVal call(lua_State* L, const char* name)$/;"	f	namespace:aLuaBase
call	sdk/aLuaBase.h	/^		RVal call(lua_State* L, const char* name, T1 arg)$/;"	f	namespace:aLuaBase
call	sdk/aLuaBase.h	/^		RVal call(lua_State* L, const char* name, T1 arg1, T2 arg2)$/;"	f	namespace:aLuaBase
call	sdk/aLuaBase.h	/^		RVal call(lua_State* L, const char* name, T1 arg1, T2 arg2, T3 arg3)$/;"	f	namespace:aLuaBase
call	sdk/aLuaBase.h	/^		RVal call(lua_State* L, const char* name, T1 arg1, T2 arg2, T3 arg3,T4 arg4)$/;"	f	namespace:aLuaBase
call	sdk/aPython.cpp	/^bool aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^char aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^double aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^float aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^long aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^map<string , string > aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^short aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^string aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^vector<string> aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call	sdk/aPython.cpp	/^void aPython::call(const char * module,const char * fun,const char * format,...)$/;"	f	class:aPython
call_stack	sdk/aLuaBase.cpp	/^static void call_stack(lua_State* L, int n)$/;"	f	file:
cblock	sdk/des.h	/^	DES_cblock cblock;$/;"	m	union:DES_ks::__anon8
charConv	sdk/aXMLReader.cpp	/^unsigned char * aXMLReader::charConv(unsigned char *in,const char * fromEncording,const char *toEncoding)$/;"	f	class:aXMLReader
checkAuction	sdk/aDBConnectPool.cpp	/^void aMysqlDB::checkAuction()$/;"	f	class:aMysqlDB
checkFirstMainLoop	sdk/aTCPClient.cpp	/^bool aTCPClient::checkFirstMainLoop()$/;"	f	class:aTCPClient
checkHttpTimeout	sdk/aHttpTask.h	/^		bool checkHttpTimeout(const aRealTime &ct, const unsigned long long interval = 2000) const$/;"	f	class:aHttpTask
checkIOForRead	sdk/aSocket.cpp	/^int aSocket::checkIOForRead()$/;"	f	class:aSocket
checkIOForWrite	sdk/aSocket.cpp	/^int aSocket::checkIOForWrite()$/;"	f	class:aSocket
checkInterval	sdk/aTCPClient.cpp	/^bool aTCPClient::checkInterval(const aRealTime & ct)$/;"	f	class:aTCPClient
checkInterval	sdk/aTCPTask.cpp	/^bool aUDPTask::checkInterval(const aRealTime &ct)$/;"	f	class:aUDPTask
checkInterval	sdk/aUDPTask.cpp	/^bool aTCPTask::checkInterval(const aRealTime &ct)$/;"	f	class:aTCPTask
checkRebound	sdk/aTCPClient.h	/^		virtual int checkRebound()$/;"	f	class:aTCPClient
checkSignal	sdk/aTCPTask.cpp	/^void aUDPTask::checkSignal(const aRealTime &ct)$/;"	f	class:aUDPTask
checkSignal	sdk/aUDPTask.cpp	/^void aTCPTask::checkSignal(const aRealTime &ct)$/;"	f	class:aTCPTask
checkStateTimeOut	sdk/aTCPClient.cpp	/^bool aTCPClient::checkStateTimeOut(const ConnectState state, const atmTime &ct,const time_t timeout)const$/;"	f	class:aTCPClient
checkTick	sdk/aTCPClient.cpp	/^bool aTCPClient::checkTick()const$/;"	f	class:aTCPClient
checkTick	sdk/aTCPTask.cpp	/^bool aUDPTask::checkTick()const$/;"	f	class:aUDPTask
checkTick	sdk/aUDPTask.cpp	/^bool aTCPTask::checkTick()const$/;"	f	class:aTCPTask
checkVerifyTimeOut	sdk/aTCPTask.cpp	/^bool aUDPTask::checkVerifyTimeOut(const aRealTime &rt,const unsigned long long interval)const$/;"	f	class:aUDPTask
checkVerifyTimeOut	sdk/aUDPTask.cpp	/^bool aTCPTask::checkVerifyTimeOut(const aRealTime &rt,const unsigned long long interval)const$/;"	f	class:aTCPTask
check_count	sdk/aTCPTask.h	/^		BYTE check_count; \/**<信号检测次数*\/$/;"	m	class:aUDPTask
check_count	sdk/aUDPTask.h	/^		BYTE check_count; \/**<信号检测次数*\/$/;"	m	class:aTCPTask
check_ptr	sdk/aDef.h	100;"	d
check_queue	sdk/aTCPClientPool.cpp	/^		inline void check_queue()$/;"	f	class:aTCPClientTaskQueue
check_queue	sdk/aTCPTaskPool.cpp	/^		inline void check_queue()$/;"	f	class:aTCPTaskQueue
checkconnThread	sdk/aTCPClientPool.h	/^		aCheckConnThread * checkconnThread;$/;"	m	class:aTCPClientPool
checkwaitThread	sdk/aTCPClientPool.h	/^		aCkeckWaitThread * checkwaitThread;$/;"	m	class:aTCPClientPool
child	sdk/aIni.h	/^		map<string, iniNode*> child;$/;"	m	class:iniNode
className	sdk/aLuaBase.h	/^		struct className$/;"	s	namespace:aLuaBase
classType	sdk/aLuaBase.h	/^		struct classType { typedef typename removeConst<typename baseType<A>::type>::type type; };$/;"	s	namespace:aLuaBase
class_add	sdk/aLuaBase.h	/^		void class_add(lua_State* L, const char* name) $/;"	f	namespace:aLuaBase
class_con	sdk/aLuaBase.h	/^		void class_con(lua_State* L,F func)$/;"	f	namespace:aLuaBase
class_def	sdk/aLuaBase.h	/^		void class_def(lua_State* L, const char* name, F func) $/;"	f	namespace:aLuaBase
class_inh	sdk/aLuaBase.h	/^		void class_inh(lua_State* L)$/;"	f	namespace:aLuaBase
class_mem	sdk/aLuaBase.h	/^		void class_mem(lua_State* L, const char* name, VAR BASE::*val) $/;"	f	namespace:aLuaBase
clean	sdk/aBits.h	/^		bool clean(DWORD bit)$/;"	f	class:aBits
cleanUp	sdk/aShareMem.cpp	/^void aShareMem::cleanUp()$/;"	f	class:aShareMem
clear	sdk/aEntryM.h	/^		inline void clear()$/;"	f	class:LimitHash
clear	sdk/aEntryM.h	/^		inline void clear()$/;"	f	class:MultiHash
clear	sdk/aEntryM.h	/^		inline void clear()$/;"	f	class:aEntryM
clear	sdk/aEntryM.h	/^	inline void clear(){}$/;"	f	class:aEntryNone
clear	sdk/aTable.h	/^		inline void clear()$/;"	f	class:aRecord
clear	sdk/aTable.h	/^		inline void clear()$/;"	f	class:aRecordSet
clearFlag	sdk/aSocket.h	/^		inline void clearFlag(unsigned int _f) { bitmask &= ~_f; }$/;"	f	class:aSocket
clearState	sdk/aTCPTaskPool.h	/^		void clearState(const int state)$/;"	f	class:aTCPTaskPool
clearTick	sdk/aTCPClient.cpp	/^void aTCPClient::clearTick()$/;"	f	class:aTCPClient
clearTick	sdk/aTCPTask.cpp	/^void aUDPTask::clearTick()$/;"	f	class:aUDPTask
clearTick	sdk/aUDPTask.cpp	/^void aTCPTask::clearTick()$/;"	f	class:aTCPTask
close	sdk/aLuaBase.h	/^	inline void close( lua_State *L )$/;"	f	namespace:aLuaBase
close	sdk/aMiniTCPClient.cpp	/^void aMiniTCPClient::close()$/;"	f	class:aMiniTCPClient
close	sdk/aTCPClient.h	/^			close = 0,$/;"	e	enum:aTCPClient::ConnectState
cmd	sdk/aEvent.h	/^		BYTE cmd;$/;"	m	struct:EVENT::stEVENT
component	sdk/aEntryBase.h	/^aComponent<C>* aComponentEntity::component()$/;"	f	class:aComponentEntity
components	sdk/aEntryBase.h	/^std::tuple< aComponent<Components>...> aComponentEntity::components()$/;"	f	class:aComponentEntity
compress	sdk/aTCPClient.h	/^		const bool compress;$/;"	m	class:aTCPClient
cond	sdk/aCond.h	/^		pthread_cond_t cond;$/;"	m	class:aCond
connPerThread	sdk/aTCPClientPool.cpp	/^		static const aTCPClientConntainer::size_type connPerThread = 512;	\/**< 每个线程带的连接数量 *\/$/;"	m	class:aTCPClientThread	file:
connPerThread	sdk/aTCPClientPool.h	/^		const unsigned int connPerThread;$/;"	m	class:aTCPClientPool
connPerThread	sdk/aTCPTaskPool.cpp	/^		static const aTCPTaskContainer::size_type connPerThread = 512;	\/**< 每个线程带的连接数量 *\/$/;"	m	class:aOkayThread	file:
connect	sdk/aMiniTCPClient.cpp	/^bool aMiniTCPClient::connect()$/;"	f	class:aMiniTCPClient
connect	sdk/aMiniTCPClient.cpp	/^bool aMiniTCPClient::connect(const char *ip,unsigned short port)$/;"	f	class:aMiniTCPClient
connect	sdk/aRedisClient.cpp	/^bool aRedisClient::connect(  )$/;"	f	class:aRedisClient
connect	sdk/aTCPClient.cpp	/^bool aTCPClient::connect()$/;"	f	class:aTCPClient
const_DES_cblock	sdk/des.h	/^typedef \/* const *\/ unsigned char const_DES_cblock[8];$/;"	t
const_iter	sdk/aEntryM.h	/^		typedef typename hashmap::const_iterator const_iter;$/;"	t	class:LimitHash
const_iter	sdk/aEntryM.h	/^		typedef typename hashmap::const_iterator const_iter;$/;"	t	class:MultiHash
constructor	sdk/aLuaBase.h	/^		int constructor(lua_State *L) $/;"	f	namespace:aLuaBase
copy	sdk/aIni.cpp	/^void iniNode::copy(iniNode *n) {$/;"	f	class:iniNode
count	sdk/aIni.cpp	/^int aIni::count()$/;"	f	class:aIni
count	sdk/aIni.cpp	/^int iniNode::count() {$/;"	f	class:iniNode
cross	sdk/aVec3.cpp	/^inline aVector3 cross(aVector3 const &vec2, aVector3 const &vec1){$/;"	f
ctrlcHandler	sdk/aService.cpp	/^static void ctrlcHandler(int signum)$/;"	f	file:
currPtr	sdk/aMemStream.h	/^		inline unsigned int currPtr() const$/;"	f	class:aMemStream
currentTime	sdk/aHttpTaskPool.cpp	/^		aRealTime currentTime;			\/**< 当前时间 *\/$/;"	m	class:aHttpThread	file:
date	sdk/aEvent.h	/^		void * date;$/;"	m	struct:EVENT::stEVENT
dateSize	sdk/aEvent.h	/^		DWORD dateSize;$/;"	m	struct:EVENT::stEVENT
dbCol	sdk/aTableDef.h	/^struct dbCol$/;"	s
debug	sdk/aLogger.cpp	/^bool aLogger::debug(const char * pattern,... )$/;"	f	class:aLogger
debug_currPtr	sdk/aSocket.h	/^		unsigned int debug_currPtr;$/;"	m	class:aSocket
debug_max_size	sdk/aSocket.h	/^		unsigned int debug_max_size;$/;"	m	class:aSocket
debug_offPtr	sdk/aSocket.h	/^		unsigned int debug_offPtr;$/;"	m	class:aSocket
debug_wait_size	sdk/aSocket.h	/^		unsigned int debug_wait_size;$/;"	m	class:aSocket
dec_ref	sdk/aLuaBase.cpp	/^void aLuaBase::table_obj::dec_ref()$/;"	f	class:aLuaBase::table_obj
decl	sdk/aLuaBase.h	/^		void decl(lua_State* L, const char* name, T object)$/;"	f	namespace:aLuaBase
decr	sdk/aRedisClient.cpp	/^int aRedisClient::decr(const AStr& key)$/;"	f	class:aRedisClient
decrby	sdk/aRedisClient.cpp	/^int aRedisClient::decrby(const AStr& key, const int increment)$/;"	f	class:aRedisClient
def	sdk/aLuaBase.h	/^		void def(lua_State* L, const char* name, F func)$/;"	f	namespace:aLuaBase
del	sdk/aRedisClient.cpp	/^int aRedisClient::del(const AVec<AStr>& keys)$/;"	f	class:aRedisClient
delEpoll	sdk/aHttpTask.h	/^		void delEpoll(int kdpfd, __uint32_t events)$/;"	f	class:aHttpTask
delEpoll	sdk/aSocket.h	/^		inline void delEpoll( int kdpfd, __uint32_t events)$/;"	f	class:aSocket
delEpoll	sdk/aTCPClient.cpp	/^void aTCPClient::delEpoll(int kpdfd,__uint32_t evenets)$/;"	f	class:aTCPClient
delEpoll	sdk/aTCPTask.cpp	/^void aUDPTask::delEpoll(int kpdfd,__uint32_t events)$/;"	f	class:aUDPTask
delEpoll	sdk/aUDPTask.cpp	/^void aTCPTask::delEpoll(int kpdfd,__uint32_t events)$/;"	f	class:aTCPTask
delEvery	sdk/aSerialization.h	/^		class delEvery:public DataCallBack<DataEntry>$/;"	c	class:DataSerialization
delSpace	sdk/aFunc.h	/^	inline void delSpace(std::string &in)$/;"	f	namespace:Age
deslong	sdk/des.h	/^	DES_LONG deslong[2];$/;"	m	union:DES_ks::__anon8
dest	sdk/aEvent.h	/^		aEntry * dest;$/;"	m	struct:EVENT::stEVENT
destroyer	sdk/aLuaBase.h	/^		int destroyer(lua_State *L) $/;"	f	namespace:aLuaBase
disconnect	sdk/aRedisClient.cpp	/^void aRedisClient::disconnect()$/;"	f	class:aRedisClient
distance	sdk/aVec3.cpp	/^inline float distance(aVector3 const&vec1,aVector3 const&vec2){$/;"	f
distanceSquared	sdk/aVec3.cpp	/^inline float distanceSquared(aVector3 const&vec1,aVector3 const&vec2){$/;"	f
doFile	sdk/aLuaBase.cpp	/^void aLuaBase::doFile(lua_State *L, const char *filename)$/;"	f	class:aLuaBase
doString	sdk/aLuaBase.cpp	/^void aLuaBase::doString(lua_State *L, const char* buff)$/;"	f	class:aLuaBase
dobuffer	sdk/aLuaBase.cpp	/^int aLuaBase::dobuffer(lua_State *L, const char* buff, size_t len)$/;"	f	class:aLuaBase
dot	sdk/aVec3.cpp	/^inline float dot(aVector3 const&vec1,aVector3 const&vec2){$/;"	f
downNum	sdk/aFunc.h	/^				DWORD downNum;$/;"	m	struct:Age::aMisc::odds_t
dump	sdk/aGlobal.cpp	/^void aGlobal::dump(std::ostream &out)$/;"	f	class:aGlobal
dump	sdk/aXMLReader.cpp	/^std::string & aXMLReader::dump(std::string &s,bool foramt \/* = false *\/)$/;"	f	class:aXMLReader
dump	sdk/aXMLReader.cpp	/^std::string & aXMLReader::dump(xmlNodePtr dumpNode,std::string &s,bool head \/* = true *\/)$/;"	f	class:aXMLReader
dwExtPort	sdk/aGlobalClient.h	/^	DWORD dwExtPort;$/;"	m	struct:stVarServerInfo
dwID	sdk/aGlobalClient.h	/^	DWORD dwID;$/;"	m	struct:stVarServerInfo
dwNetType	sdk/aGlobalClient.h	/^	DWORD dwNetType;$/;"	m	struct:stVarServerInfo
dwPort	sdk/aGlobalClient.h	/^	DWORD  dwPort;$/;"	m	struct:stVarServerInfo
dwServerType	sdk/aGlobalClient.h	/^	DWORD dwServerType;$/;"	m	struct:stVarServerInfo
dwTimestamp	sdk/aEvent.h	/^		DWORD dwTimestamp;$/;"	m	struct:EVENT::stEVENT
elapse	sdk/aTime.h	/^		time_t elapse()const$/;"	f	class:atmTime
elapse	sdk/aTime.h	/^		time_t elapse(const atmTime & rt) const$/;"	f	class:atmTime
elapse	sdk/aTime.h	/^		unsigned long long elapse( const aRealTime & rt) const$/;"	f	class:aRealTime
empty	sdk/aEntryM.h	/^		inline bool empty()const$/;"	f	class:LimitHash
empty	sdk/aEntryM.h	/^		inline bool empty()const$/;"	f	class:MultiHash
empty	sdk/aEntryM.h	/^		inline bool empty(void)const$/;"	f	class:aEntryM
empty	sdk/aIni.cpp	/^bool iniNode::empty() {$/;"	f	class:iniNode
empty	sdk/aTable.h	/^		inline bool empty()const$/;"	f	class:DBVARTYPE
empty	sdk/aTable.h	/^		inline bool empty(){return _recordSet.empty();}$/;"	f	class:aRecordSet
enc	sdk/aSocket.h	/^		CEnctypt enc;$/;"	m	class:aSocket
enum2lua	sdk/aLuaBase.h	/^		struct enum2lua { static void invoke(lua_State *L, T val) { lua_pushnumber(L, (int)val); } };$/;"	s	namespace:aLuaBase
enum_stack	sdk/aLuaBase.cpp	/^void aLuaBase::enum_stack(lua_State *L)$/;"	f	class:aLuaBase
epfds	sdk/aHttpTaskPool.cpp	/^		epollfdContainer epfds;$/;"	m	class:aHttpThread	file:
epfds	sdk/aMTCPService.h	/^		std::vector<struct epoll_event > epfds;$/;"	m	class:aMTCPService
epfds	sdk/aTCPClientPool.cpp	/^		epollfdContainer epfds;$/;"	m	class:aCkeckWaitThread	file:
epfds	sdk/aTCPClientPool.cpp	/^		epollfdContainer epfds;$/;"	m	class:aTCPClientThread	file:
epfds	sdk/aTCPTaskPool.cpp	/^		epollfdContainer epfds;$/;"	m	class:aOkayThread	file:
epfds	sdk/aTCPTaskPool.cpp	/^		epollfdContainer epfds;$/;"	m	class:aVerifyThread	file:
epollfdContainer	sdk/aHttpTaskPool.cpp	/^		typedef std::vector<struct epoll_event> epollfdContainer;$/;"	t	class:aHttpThread	file:
epollfdContainer	sdk/aTCPClientPool.cpp	/^typedef std::vector<struct epoll_event> epollfdContainer;$/;"	t	file:
epollfdContainer	sdk/aTCPTaskPool.cpp	/^typedef std::vector<struct epoll_event> epollfdContainer;$/;"	t	file:
eq_s64	sdk/aLuaBase.cpp	/^static int eq_s64(lua_State *L)$/;"	f	file:
eq_u64	sdk/aLuaBase.cpp	/^static int eq_u64(lua_State *L)$/;"	f	file:
error	sdk/aLogger.cpp	/^bool aLogger::error(const char * pattern,... )$/;"	f	class:aLogger
escapeString	sdk/aDBConnectPool.cpp	/^bool aDBConnectPool::escapeString(DBHANDLE handleID,const char *src)$/;"	f	class:aDBConnectPool
escapeString	sdk/aDBConnectPool.cpp	/^bool aDBConnectPool::escapeString(DBHANDLE handleID,std::string &src)$/;"	f	class:aDBConnectPool
escapeString	sdk/aDBConnectPool.cpp	/^bool aMysqlDB::escapeString(const char *src)$/;"	f	class:aMysqlDB
escapeString	sdk/aDBConnectPool.cpp	/^bool aMysqlDB::escapeString(std::string &src)$/;"	f	class:aMysqlDB
escapeString	sdk/aDBConnectPool.cpp	/^char * aDBConnectPool::escapeString(DBHANDLE handleID,const char * src,char * dest,unsigned int len)$/;"	f	class:aDBConnectPool
escapeString	sdk/aDBConnectPool.cpp	/^char * aMysqlDB::escapeString(const char * src,char * dest,unsigned int len)$/;"	f	class:aMysqlDB
escapeString	sdk/aDBConnectPool.cpp	/^std::string & aDBConnectPool::escapeString(DBHANDLE handleID,std::string &src,std::string& dest)$/;"	f	class:aDBConnectPool
escapeString	sdk/aDBConnectPool.cpp	/^std::string & aMysqlDB::escapeString(std::string &src,std::string &dest)$/;"	f	class:aMysqlDB
ets	sdk/aEntryM.h	/^		hashmap ets;$/;"	m	class:LimitHash
ets	sdk/aEntryM.h	/^		hashmap ets;$/;"	m	class:MultiHash
exeCreate	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeCreate(DBHANDLE handleID,const char * tableName)$/;"	f	class:aDBConnectPool
exeCreate	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeCreate(const char * tableName)$/;"	f	class:aMysqlDB
exeDelete	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeDelete(DBHANDLE handleID,const char * tableName, aRecord * where)$/;"	f	class:aDBConnectPool
exeDelete	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeDelete(DBHANDLE handleID,const char * tableName, const char * where)$/;"	f	class:aDBConnectPool
exeDelete	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeDelete(const char * tableName, aRecord * where)$/;"	f	class:aMysqlDB
exeDelete	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeDelete(const char * tableName, const char * where)$/;"	f	class:aMysqlDB
exeEveryUser	sdk/aUserM.h	/^	void exeEveryUser(execEntry<YOURUSERENTRY> & exec)$/;"	f	class:aUserM
exeInsert	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeInsert(DBHANDLE handleID,const char * tableName, aRecord *rec)$/;"	f	class:aDBConnectPool
exeInsert	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeInsert(DBHANDLE handleID,const char * tableName,aRecordSet *ret)$/;"	f	class:aDBConnectPool
exeInsert	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeInsert(const char * tableName, aRecord *rec)$/;"	f	class:aMysqlDB
exeInsert	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeInsert(const char * tableName,aRecordSet *ret)$/;"	f	class:aMysqlDB
exeSelect	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeSelect(DBHANDLE handleID,const char * tableName,aRecordSet & ret,aRecord * where)$/;"	f	class:aDBConnectPool
exeSelect	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeSelect(DBHANDLE handleID,const char * tableName,aRecordSet & ret,const char * where)$/;"	f	class:aDBConnectPool
exeSelect	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeSelect(const char * tableName,aRecordSet & ret,aRecord * where)$/;"	f	class:aMysqlDB
exeSelect	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeSelect(const char * tableName,aRecordSet & ret,const char * where)$/;"	f	class:aMysqlDB
exeSql	sdk/aDBConnectPool.cpp	/^int aMysqlDB::exeSql(const char * cmd,unsigned int len)$/;"	f	class:aMysqlDB
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeUpdate(DBHANDLE handleID,const char * tableName,aRecord * rec,aRecord * where)$/;"	f	class:aDBConnectPool
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeUpdate(DBHANDLE handleID,const char * tableName,aRecord * rec,const char * where)$/;"	f	class:aDBConnectPool
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeUpdate(DBHANDLE handleID,const char * tableName,aRecordSet * ret,aRecord * where)$/;"	f	class:aDBConnectPool
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::exeUpdate(DBHANDLE handleID,const char * tableName,aRecordSet * ret,const char * where)$/;"	f	class:aDBConnectPool
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeUpdate(const char * tableName,aRecord * rec,aRecord * where)$/;"	f	class:aMysqlDB
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeUpdate(const char * tableName,aRecord * rec,const char * where)$/;"	f	class:aMysqlDB
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeUpdate(const char * tableName,aRecordSet * ret,aRecord * where)$/;"	f	class:aMysqlDB
exeUpdate	sdk/aDBConnectPool.cpp	/^unsigned int aMysqlDB::exeUpdate(const char * tableName,aRecordSet * ret,const char * where)$/;"	f	class:aMysqlDB
exec	sdk/aSerialization.h	/^				bool exec( DataEntry * entry)$/;"	f	class:DataSerialization::delEvery
execAll	sdk/aSerialization.h	/^		void execAll( DataCallBack<DataEntry> & base){$/;"	f	class:DataSerialization
execAll	sdk/aThread.cpp	/^void aThreadGroup::execAll(Callback & cb)$/;"	f	class:aThreadGroup
execEntry	sdk/aEntryM.h	/^struct execEntry$/;"	s
execEveryEntry	sdk/aEntryM.h	/^			inline bool execEveryEntry(execEntry<YourEntry> &eee)$/;"	f	class:aEntryM
execute	sdk/aRedisClient.cpp	/^redisReply* aRedisClient::execute(const aRedisCmd& cmd)$/;"	f	class:aRedisClient
exist	sdk/aIni.h	/^		bool exist;$/;"	m	class:iniNode
exists	sdk/aRedisClient.cpp	/^int aRedisClient::exists(const AStr& key)$/;"	f	class:aRedisClient
expire	sdk/aRedisClient.cpp	/^int aRedisClient::expire(const AStr& key, const unsigned int seconds)$/;"	f	class:aRedisClient
expireat	sdk/aRedisClient.cpp	/^int aRedisClient::expireat(const AStr& key, const unsigned int timestamp)$/;"	f	class:aRedisClient
fatal	sdk/aLogger.cpp	/^bool aLogger::fatal(const char * pattern,... )$/;"	f	class:aLogger
fds_count	sdk/aHttpTaskPool.cpp	/^		epollfdContainer::size_type fds_count;$/;"	m	class:aHttpThread	file:
fdsrAdd	sdk/aTCPTask.cpp	/^bool aUDPTask::fdsrAdd()$/;"	f	class:aUDPTask
fdsrAdd	sdk/aUDPTask.cpp	/^bool aTCPTask::fdsrAdd()$/;"	f	class:aTCPTask
fdsradd	sdk/aTCPTask.h	/^		bool fdsradd;\/**<读事件标志*\/$/;"	m	class:aUDPTask
fdsradd	sdk/aUDPTask.h	/^		bool fdsradd;\/**<读事件标志*\/$/;"	m	class:aTCPTask
fdstrAdd	sdk/aTCPClient.cpp	/^bool aTCPClient::fdstrAdd(bool set)$/;"	f	class:aTCPClient
fdstradd	sdk/aTCPClient.h	/^		bool fdstradd;$/;"	m	class:aTCPClient
file	sdk/aIni.h	/^		fstream file;$/;"	m	class:aIni
filePath	sdk/aIni.h	/^		string filePath;$/;"	m	class:aIni
fileStats	sdk/aIni.h	/^		struct stat fileStats;$/;"	m	class:aIni	typeref:struct:aIni::stat
filename	sdk/aConfig.h	/^	std::string filename;$/;"	m	class:aConfig
fillPollFD	sdk/aSocket.h	/^		inline void fillPollFD(struct pollfd & pfd, short events)$/;"	f	class:aSocket
final	sdk/aDBConnectPool.cpp	/^void aDBConnectPool::final()$/;"	f	class:aDBConnectPool
final	sdk/aDBConnectPool.cpp	/^void aMysqlDB::final()$/;"	f	class:aMysqlDB
final	sdk/aGlobalClient.cpp	/^void GlobalClient::final()$/;"	f	class:GlobalClient
final	sdk/aHttpTaskPool.cpp	/^void aHttpTaskPool::final()$/;"	f	class:aHttpTaskPool
final	sdk/aMNetService.cpp	/^void aMNetService::final()$/;"	f	class:aMNetService
final	sdk/aNetService.cpp	/^void aNetService::final()$/;"	f	class:aNetService
final	sdk/aRedisConnectPool.cpp	/^void aRedisConnectPool::final()$/;"	f	class:aRedisConnectPool
final	sdk/aTCPClient.cpp	/^void aTCPClient::final()$/;"	f	class:aTCPClient
final	sdk/aTCPTaskPool.cpp	/^void aTCPTaskPool::final()$/;"	f	class:aTCPTaskPool
final	sdk/aThread.h	/^		void final()$/;"	f	class:aThread
final	sdk/aUDPNetServer.cpp	/^void aUDPNetService::final()$/;"	f	class:aUDPNetService
final	sdk/aXMLReader.cpp	/^void aXMLReader::final()$/;"	f	class:aXMLReader
finalLibXML2	sdk/aXMLReader.cpp	/^void finalLibXML2()$/;"	f
find	sdk/aEntryM.h	/^		inline bool find(const char * & name,aEntry * &e, const bool r = false)const$/;"	f	class:aMultiEntryName
find	sdk/aEntryM.h	/^		inline bool find(const keyT &key,valueT &value)const$/;"	f	class:LimitHash
find	sdk/aEntryM.h	/^		inline bool find(const keyT &key,valueT &value)const$/;"	f	class:MultiHash
findOne	sdk/aEntryM.h	/^		inline bool findOne(const valueT &value)const$/;"	f	class:LimitHash
forceLog	sdk/aLogger.cpp	/^bool aLogger::forceLog( const aLevel * aLevelPtr,const char * pattern, ...)$/;"	f	class:aLogger
force_sync	sdk/aSocket.cpp	/^void  aSocket::force_sync()$/;"	f	class:aSocket
func	sdk/aShareMem.h	/^	DATA_CALL_FUNC func;$/;"	m	struct:tagResumeCallBack
func	sdk/aTimeWarp.cpp	/^FunctionTime FunctionTime_Wrapper::func;$/;"	m	class:FunctionTime_Wrapper	file:
func	sdk/aTimeWarp.h	/^		static FunctionTime func;$/;"	m	class:FunctionTime_Wrapper
functor	sdk/aLuaBase.h	/^		struct functor$/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<RVal,T1,T2,T3,T4> $/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<RVal,T1,T2,T3> $/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<RVal,T1,T2> $/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<RVal,T1> $/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<RVal>$/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<void, T1, T2, T3, T4, T5>$/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<void, T1, T2, T3, T4>$/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<void, T1, T2, T3>$/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<void, T1, T2>$/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<void, T1>$/;"	s	namespace:aLuaBase
functor	sdk/aLuaBase.h	/^		struct functor<void>$/;"	s	namespace:aLuaBase
gbug	sdk/aLogger.cpp	/^bool aLogger::gbug(const char * pattern,... )$/;"	f	class:aLogger
get	sdk/aIni.cpp	/^double iniNode::get(double s) {$/;"	f	class:iniNode
get	sdk/aIni.cpp	/^float iniNode::get(float s) {$/;"	f	class:iniNode
get	sdk/aIni.cpp	/^int iniNode::get(int s) {$/;"	f	class:iniNode
get	sdk/aIni.cpp	/^string iniNode::get(){$/;"	f	class:iniNode
get	sdk/aIni.cpp	/^string iniNode::get(string s) {$/;"	f	class:iniNode
get	sdk/aLuaBase.h	/^			T get(const char* name)$/;"	f	struct:aLuaBase::table
get	sdk/aLuaBase.h	/^			T get(const char* name)$/;"	f	struct:aLuaBase::table_obj
get	sdk/aLuaBase.h	/^			T get(int index)$/;"	f	struct:aLuaBase::table
get	sdk/aLuaBase.h	/^			T get(int index)$/;"	f	struct:aLuaBase::table_obj
get	sdk/aLuaBase.h	/^		T get(lua_State* L, const char* name)$/;"	f	namespace:aLuaBase
get	sdk/aLuaBase.h	/^		void get(lua_State *L)	{ push(L, read<T*>(L,1)->*(_var));		}$/;"	f	struct:aLuaBase::mem_var
get	sdk/aRedisClient.cpp	/^int aRedisClient::get(const AStr& key, AStr& value)$/;"	f	class:aRedisClient
get	sdk/aSerialization.h	/^		DATA * get(DWORD id){$/;"	f	class:DataSerialization
get	sdk/aSerialization.h	/^		DATA * get(const char * name){$/;"	f	class:DataSerialization
get	sdk/aTable.h	/^		inline DBVARTYPE& get(const std::string &colName)$/;"	f	class:aRecord
get	sdk/aTable.h	/^		inline aRecord * get(const unsigned int index)$/;"	f	class:aRecordSet
get	sdk/aUniqueID.h	/^	T get()$/;"	f	class:aUniqueID
get	sdk/aUniqueID.h	/^	T get(int size ,int &count)$/;"	f	class:aUniqueID
get2DDir	sdk/aPos.h	/^	const int get2DDir(const aPos & pos)$/;"	f	struct:aPos
getAddr	sdk/aSocket.h	/^		inline const DWORD getAddr()const{return addr.sin_addr.s_addr;}$/;"	f	class:aSocket
getAddr	sdk/aTCPTask.cpp	/^const DWORD aUDPTask::getAddr()const$/;"	f	class:aUDPTask
getAddr	sdk/aUDPTask.cpp	/^const DWORD aTCPTask::getAddr()const$/;"	f	class:aTCPTask
getArg	sdk/aArg.cpp	/^aArg * aArg::getArg()$/;"	f	class:aArg
getBufferSize	sdk/aSocket.h	/^		inline unsigned int getBufferSize()const { return _rcv_queue.maxSize()+_snd_queue.maxSize();}$/;"	f	class:aSocket
getByIndex	sdk/aThread.cpp	/^aThread * aThreadGroup::getByIndex(const Container::size_type index)$/;"	f	class:aThreadGroup
getCRC	sdk/aFunc.h	/^	inline unsigned int getCRC(const char * buff,size_t len)$/;"	f	namespace:Age
getChildNode	sdk/aXMLReader.cpp	/^xmlNodePtr aXMLReader::getChildNode(const xmlNodePtr parent,const char * childName)$/;"	f	class:aXMLReader
getChildNodeNum	sdk/aXMLReader.cpp	/^unsigned int aXMLReader::getChildNodeNum(const xmlNodePtr parent,const char * nodeName)$/;"	f	class:aXMLReader
getColType	sdk/aTableDef.cpp	/^int aTableDef::getColType(const char * tableName,const char * colName)$/;"	f	class:aTableDef
getCreateCmd	sdk/aTableDef.cpp	/^void aTableDef::getCreateCmd(const char * tableName,std::string & cmd)$/;"	f	class:aTableDef
getCurrentThreadID	sdk/aThread.h	/^		virtual pthread_t getCurrentThreadID()$/;"	f	class:aThread
getD	sdk/aIni.cpp	/^double iniNode::getD() {$/;"	f	class:iniNode
getD	sdk/aIni.cpp	/^double iniNode::getD(double s) {$/;"	f	class:iniNode
getDirectScreen	sdk/aNineScreenIndex.cpp	/^const aPosIVector & aNineScreenIndex<MAX_X,MAX_Y>::getDirectScreen(const aPosI & posi , const int dir)$/;"	f	class:aNineScreenIndex
getEntryByID	sdk/aEntryM.h	/^		inline aEntry * getEntryByID(const DWORD id)const$/;"	f	class:aEntryID
getEntryByID	sdk/aSerialization.h	/^		aEntry * getEntryByID(DWORD id)const$/;"	f	class:DataSerialization
getEntryByName	sdk/aEntryM.h	/^		inline aEntry * getEntryByName(const char * name) const$/;"	f	class:aEntryName
getEntryByName	sdk/aEntryM.h	/^		inline aEntry * getEntryByName(const std::string &name) const$/;"	f	class:aEntryName
getEntryByName	sdk/aSerialization.h	/^		aEntry * getEntryByName(const char * name)$/;"	f	class:DataSerialization
getEntryByTempID	sdk/aEntryM.h	/^		inline aEntry * getEntryByTempID(const  DWORD tempid)const$/;"	f	class:aEntryTempID
getExtIP	sdk/aNetService.cpp	/^const char *  aNetService::getExtIP(){$/;"	f	class:aNetService
getExtIP	sdk/aUDPNetServer.cpp	/^const char *  aUDPNetService::getExtIP(){$/;"	f	class:aUDPNetService
getExtPort	sdk/aNetService.cpp	/^DWORD aNetService::getExtPort(){$/;"	f	class:aNetService
getExtPort	sdk/aUDPNetServer.cpp	/^DWORD aUDPNetService::getExtPort(){$/;"	f	class:aUDPNetService
getF	sdk/aIni.cpp	/^float iniNode::getF() {$/;"	f	class:iniNode
getF	sdk/aIni.cpp	/^float iniNode::getF(float s) {$/;"	f	class:iniNode
getHandle	sdk/aDBConnectPool.cpp	/^DBHANDLE  aDBConnectPool::getHandle()$/;"	f	class:aDBConnectPool
getHandle	sdk/aRedisConnectPool.cpp	/^REDIS_HANDLE aRedisConnectPool::getHandle()$/;"	f	class:aRedisConnectPool
getHost	sdk/aUrl.h	/^		std::string getHost()$/;"	f	class:aUrl
getHour	sdk/aTime.h	/^		int getHour()$/;"	f	class:atmTime
getI	sdk/aIni.cpp	/^int iniNode::getI(){$/;"	f	class:iniNode
getI	sdk/aIni.cpp	/^int iniNode::getI(int s) {$/;"	f	class:iniNode
getID	sdk/aComponent.h	/^aComponentBase::INDENTIFY aComponent<C>::getID() {$/;"	f	class:aComponent
getID	sdk/aDBConnectPool.h	/^		DWORD getID()$/;"	f	class:aMysqlDB
getID	sdk/aRedisClient.cpp	/^DWORD aRedisClient::getID()$/;"	f	class:aRedisClient
getIP	sdk/aHttpTask.cpp	/^const char * aHttpTask::getIP() const$/;"	f	class:aHttpTask
getIP	sdk/aMiniTCPClient.cpp	/^const char * aMiniTCPClient::getIP()$/;"	f	class:aMiniTCPClient
getIP	sdk/aNetService.cpp	/^const char *  aNetService::getIP(){$/;"	f	class:aNetService
getIP	sdk/aSocket.h	/^		inline const char * getIP()const{ return inet_ntoa(addr.sin_addr); }$/;"	f	class:aSocket
getIP	sdk/aTCPTask.cpp	/^const char * aUDPTask::getIP() const$/;"	f	class:aUDPTask
getIP	sdk/aUDPNetServer.cpp	/^const char *  aUDPNetService::getIP(){$/;"	f	class:aUDPNetService
getIP	sdk/aUDPTask.cpp	/^const char * aTCPTask::getIP() const$/;"	f	class:aTCPTask
getIPByIfName	sdk/aSocket.cpp	/^const char * aSocket::getIPByIfName(const char * ifName)$/;"	f	class:aSocket
getInstance	sdk/aSerialization.h	/^		static DataSerialization & getInstance()$/;"	f	class:DataSerialization
getInstance	sdk/aService.h	/^		static aService * getInstance()$/;"	f	class:aService
getInstance	sdk/aSingleton.h	/^	static T& getInstance()$/;"	f	class:aSingleton
getLocalIP	sdk/aSocket.h	/^		inline const char * getLocalIP() const{return inet_ntoa((localaddr.sin_addr));}$/;"	f	class:aSocket
getLocalPort	sdk/aSocket.h	/^		inline const unsigned short getLocalPort()const{return ntohs(localaddr.sin_port);}$/;"	f	class:aSocket
getLocalTimeZone	sdk/aTime.cpp	/^const std::string & aRealTime::getLocalTimeZone()$/;"	f	class:aRealTime
getMDay	sdk/aTime.h	/^		int getMDay()$/;"	f	class:atmTime
getMaxConns	sdk/aTCPTaskPool.h	/^		inline const int getMaxConns() const { return _maxConns; }$/;"	f	class:aTCPTaskPool
getMessage	sdk/aLogger.cpp	357;"	d	file:
getMeta	sdk/aLuaBase.cpp	/^int aLuaBase::getMeta(lua_State *L)$/;"	f	class:aLuaBase
getMin	sdk/aTime.h	/^		int getMin()$/;"	f	class:atmTime
getMonth	sdk/aTime.h	/^		int getMonth()$/;"	f	class:atmTime
getMysqlByID	sdk/aDBConnectPool.cpp	/^aMysqlDB * aDBConnectPool::getMysqlByID(DBHANDLE handle)$/;"	f	class:aDBConnectPool
getName	sdk/aIni.cpp	/^string iniNode::getName() {$/;"	f	class:iniNode
getName	sdk/aLogger.cpp	/^const std::string  aLogger::getName()$/;"	f	class:aLogger
getNetType	sdk/aNetService.cpp	/^const DWORD aNetService::getNetType()$/;"	f	class:aNetService
getNetType	sdk/aUDPNetServer.cpp	/^const DWORD aUDPNetService::getNetType()$/;"	f	class:aUDPNetService
getNextNode	sdk/aXMLReader.cpp	/^xmlNodePtr aXMLReader::getNextNode(const xmlNodePtr node,const char * nodeName)$/;"	f	class:aXMLReader
getNextState	sdk/aTCPClient.cpp	/^void aTCPClient::getNextState()$/;"	f	class:aTCPClient
getNextState	sdk/aTCPTask.cpp	/^void aUDPTask::getNextState()$/;"	f	class:aUDPTask
getNextState	sdk/aUDPTask.cpp	/^void aTCPTask::getNextState()$/;"	f	class:aTCPTask
getNineEntry	sdk/aNineScreenIndex.cpp	/^const SCENEENTRY_SET & aNineScreenIndex<MAX_X,MAX_Y>:: getNineEntry(DWORD screen)$/;"	f	class:aNineScreenIndex
getNineScreen	sdk/aNineScreenIndex.cpp	/^const aPosIVector & aNineScreenIndex<MAX_X,MAX_Y>::getNineScreen(const aPosI & posi)$/;"	f	class:aNineScreenIndex
getNodeContentNum	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodeContentNum(const xmlNodePtr node,void * content,int contentSize)$/;"	f	class:aXMLReader
getNodeContentStr	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodeContentStr(const xmlNodePtr node,std::string &content)$/;"	f	class:aXMLReader
getNodeContentStr	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodeContentStr(const xmlNodePtr node,void *content , int contentSize)$/;"	f	class:aXMLReader
getNodeContentTime	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodeContentTime(const xmlNodePtr node,time_t &prop)$/;"	f	class:aXMLReader
getNodePropNum	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodePropNum(const xmlNodePtr node,const char * propName,void * prop, int propSize)$/;"	f	class:aXMLReader
getNodePropStr	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodePropStr(const xmlNodePtr node,const char * propName,std::string &prop)$/;"	f	class:aXMLReader
getNodePropStr	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodePropStr(const xmlNodePtr node,const char * propName,void *prop,int propSize)$/;"	f	class:aXMLReader
getNodePropTime	sdk/aXMLReader.cpp	/^bool aXMLReader::getNodePropTime(const xmlNodePtr node,const char * propName,time_t &prop)$/;"	f	class:aXMLReader
getParam	sdk/aUrl.h	/^		std::string getParam()$/;"	f	class:aUrl
getPath	sdk/aUrl.h	/^		std::string getPath()$/;"	f	class:aUrl
getPollState	sdk/aNetService.h	/^		virtual const int getPollState()const$/;"	f	class:aNetService
getPollState	sdk/aUDPNetServer.h	/^		virtual const int getPollState()const$/;"	f	class:aUDPNetService
getPoolSize	sdk/aNetService.h	/^		virtual const int getPoolSize()const$/;"	f	class:aNetService
getPoolSize	sdk/aUDPNetServer.h	/^		virtual const int getPoolSize()const$/;"	f	class:aUDPNetService
getPort	sdk/aMiniTCPClient.cpp	/^const unsigned short aMiniTCPClient::getPort()$/;"	f	class:aMiniTCPClient
getPort	sdk/aNetService.cpp	/^DWORD  aNetService::getPort(){$/;"	f	class:aNetService
getPort	sdk/aSocket.h	/^		inline const unsigned short getPort()const {return ntohs(addr.sin_port);}$/;"	f	class:aSocket
getPort	sdk/aUDPNetServer.cpp	/^DWORD  aUDPNetService::getPort(){$/;"	f	class:aUDPNetService
getPosI	sdk/aSceneEntry.h	/^		inline const aPosI & getPosI()const$/;"	f	class:aSceneEntry
getPosition	sdk/aSceneEntry.h	/^		inline const aPos & getPosition()const$/;"	f	class:aSceneEntry
getProperty	sdk/aGlobal.cpp	/^const std::string & aGlobal::getProperty(const std::string &key)$/;"	f	class:aGlobal
getRedisByID	sdk/aRedisConnectPool.cpp	/^aRedisClient * aRedisConnectPool::getRedisByID(REDIS_HANDLE handle)$/;"	f	class:aRedisConnectPool
getReverDirectScreen	sdk/aNineScreenIndex.cpp	/^const aPosIVector & aNineScreenIndex<MAX_X,MAX_Y>::getReverDirectScreen(const aPosI & posi, const int dir)$/;"	f	class:aNineScreenIndex
getRootNode	sdk/aXMLReader.cpp	/^xmlNodePtr aXMLReader::getRootNode(const char * nodeName)$/;"	f	class:aXMLReader
getRotation	sdk/aSceneEntry.h	/^		inline const aVector3 getRotation()const$/;"	f	class:aSceneEntry
getS	sdk/aIni.cpp	/^string iniNode::getS() {$/;"	f	class:iniNode
getS	sdk/aIni.cpp	/^string iniNode::getS(string s) {$/;"	f	class:iniNode
getSHMID	sdk/aShareMem.cpp	/^int aShareMem::getSHMID()$/;"	f	class:aShareMem
getScreenIndex	sdk/aSceneEntry.h	/^		inline DWORD getScreenIndex()$/;"	f	class:aSceneEntry
getSec	sdk/aTime.h	/^		int getSec()$/;"	f	class:atmTime
getServerID	sdk/aNetService.cpp	/^DWORD  aNetService::getServerID(){$/;"	f	class:aNetService
getServerID	sdk/aUDPNetServer.cpp	/^DWORD  aUDPNetService::getServerID(){$/;"	f	class:aUDPNetService
getServerList	sdk/aGlobalClient.cpp	/^void GlobalClient::getServerList(DWORD type, AVec<VARSRVINFO> &lpList)$/;"	f	class:GlobalClient
getServerName	sdk/aService.cpp	/^const char * aService::getServerName()$/;"	f	class:aService
getSize	sdk/aTCPTaskPool.cpp	/^const int aTCPTaskPool::getSize()$/;"	f	class:aTCPTaskPool
getSize	sdk/aTable.h	/^		inline size_t getSize() const$/;"	f	class:aRecord
getSize	sdk/aUserM.cpp	/^unsigned int aUserM::getSize() $/;"	f	class:aUserM
getState	sdk/aSceneEntry.h	/^		inline const SceneEntryState & getState()const$/;"	f	class:aSceneEntry
getState	sdk/aTCPClient.cpp	/^const aTCPClient::ConnectState aTCPClient::getState()const$/;"	f	class:aTCPClient
getState	sdk/aTCPTask.cpp	/^const aUDPTask::aUDPTask_State aUDPTask::getState()const$/;"	f	class:aUDPTask
getState	sdk/aTCPTaskPool.h	/^		const int getState() const$/;"	f	class:aTCPTaskPool
getState	sdk/aUDPTask.cpp	/^const aTCPTask::aTCPTask_State aTCPTask::getState()const$/;"	f	class:aTCPTask
getStateString	sdk/aTCPClient.cpp	/^const char * aTCPClient::getStateString(const ConnectState state)$/;"	f	class:aTCPClient
getStateString	sdk/aTCPTask.cpp	/^const char * aUDPTask::getStateString(const aUDPTask_State state) const$/;"	f	class:aUDPTask
getStateString	sdk/aUDPTask.cpp	/^const char * aTCPTask::getStateString(const aTCPTask_State state) const$/;"	f	class:aTCPTask
getTableDef	sdk/aDBConnectPool.cpp	/^aTableDef * aDBConnectPool::getTableDef()$/;"	f	class:aDBConnectPool
getThisMessageMap	sdk/aMsgCallBack.cpp	/^const AGE_MSGMAP*  aMsgtarget::getThisMessageMap()  $/;"	f	class:aMsgtarget
getThreadName	sdk/aThread.h	/^		const std::string & getThreadName()const$/;"	f	class:aThread
getType	sdk/aNetService.cpp	/^DWORD  aNetService::getType(){$/;"	f	class:aNetService
getType	sdk/aSceneEntry.h	/^		inline const SceneEntryType & getType()const$/;"	f	class:aSceneEntry
getType	sdk/aUDPNetServer.cpp	/^DWORD  aUDPNetService::getType(){$/;"	f	class:aUDPNetService
getUserByID	sdk/aUserM.cpp	/^aUser *aUserM::getUserByID(const DWORD id)$/;"	f	class:aUserM
getUserByName	sdk/aUserM.cpp	/^aUser * aUserM::getUserByName(const char *name)$/;"	f	class:aUserM
getUserByTempID	sdk/aUserM.cpp	/^aUser * aUserM::getUserByTempID(const DWORD tempid)$/;"	f	class:aUserM
getWDay	sdk/aTime.h	/^		int getWDay()$/;"	f	class:atmTime
getWeekDay	sdk/aTime.h	/^		int getWeekDay()$/;"	f	class:atmTime
getYDay	sdk/aTime.h	/^		int getYDay()$/;"	f	class:atmTime
getYear	sdk/aTime.h	/^		int getYear()$/;"	f	class:atmTime
getbit	sdk/aRedisClient.cpp	/^int aRedisClient::getbit(const AStr& key, const int offset)$/;"	f	class:aRedisClient
getrange	sdk/aRedisClient.cpp	/^int aRedisClient::getrange(const AStr& key, const int start, const int end, AStr& substring)$/;"	f	class:aRedisClient
getset	sdk/aRedisClient.cpp	/^int aRedisClient::getset(const AStr& key, const AStr& value, AStr& original)$/;"	f	class:aRedisClient
geturl	sdk/aUrl.h	/^		std::string geturl()$/;"	f	class:aUrl
global	sdk/Age.cpp	/^	aGlobal global;$/;"	m	namespace:Age	file:
hasAssigned	sdk/aUniqueID.h	/^	bool hasAssigned(T tvalue)$/;"	f	class:aUniqueID
hasInScene	sdk/aSceneEntry.h	/^		inline bool hasInScene()const$/;"	f	class:aSceneEntry
has_component	sdk/aEntryBase.h	/^bool aComponentEntity::has_component() $/;"	f	class:aComponentEntity
hashAccount	sdk/aFunc.h	/^	inline unsigned int hashAccount(const char* __s)$/;"	f	namespace:Age
hashmap	sdk/aEntryM.h	/^		typedef __gnu_cxx::hash_map<keyT,valueT,__gnu_cxx::hash<keyT>,my_key_queal<keyT> > hashmap;$/;"	t	class:LimitHash
hashmap	sdk/aEntryM.h	/^		typedef __gnu_cxx::hash_multimap<keyT,valueT,__gnu_cxx::hash<keyT>,my_key_queal<keyT> > hashmap;$/;"	t	class:MultiHash
hexists	sdk/aRedisClient.cpp	/^int aRedisClient::hexists(const AStr& key, const AStr& field)$/;"	f	class:aRedisClient
hget	sdk/aRedisClient.cpp	/^int aRedisClient::hget(const AStr& key, const AStr& field, AStr& value)$/;"	f	class:aRedisClient
hgetall	sdk/aRedisClient.cpp	/^int aRedisClient::hgetall(const AStr& key,REDIS_HASH_MAP& h)$/;"	f	class:aRedisClient
hincrby	sdk/aRedisClient.cpp	/^int aRedisClient::hincrby(const AStr& key, const AStr& field, const int increment)$/;"	f	class:aRedisClient
hincrbyfloat	sdk/aRedisClient.cpp	/^float aRedisClient::hincrbyfloat(const AStr& key, const AStr& filed, const float increment)$/;"	f	class:aRedisClient
hkeys	sdk/aRedisClient.cpp	/^int aRedisClient::hkeys(const AStr& key, AVec<AStr>& fields)$/;"	f	class:aRedisClient
hlen	sdk/aRedisClient.cpp	/^int aRedisClient::hlen(const AStr& key)$/;"	f	class:aRedisClient
hmget	sdk/aRedisClient.cpp	/^int aRedisClient::hmget(const AStr& key, const AVec<AStr>& fields, REDIS_HASH_MAP& h)$/;"	f	class:aRedisClient
hmset	sdk/aRedisClient.cpp	/^bool aRedisClient::hmset(const AStr& key, const REDIS_HASH_MAP & h)$/;"	f	class:aRedisClient
hset	sdk/aRedisClient.cpp	/^int aRedisClient::hset(const AStr& key, const AStr& field, const AStr& value)$/;"	f	class:aRedisClient
hsetnx	sdk/aRedisClient.cpp	/^int aRedisClient::hsetnx(const AStr& key, const AStr& field, const AStr& value)$/;"	f	class:aRedisClient
httpCore	sdk/aHttpTask.h	/^		virtual int httpCore()$/;"	f	class:aHttpTask
httpThreads	sdk/aHttpTaskPool.h	/^		aThreadGroup httpThreads;								\/**< http服务处理线程组 *\/$/;"	m	class:aHttpTaskPool
hupHandler	sdk/aService.cpp	/^static void hupHandler(int signum)$/;"	f	file:
hvals	sdk/aRedisClient.cpp	/^int aRedisClient::hvals(const AStr& key, AVec<AStr>& values)$/;"	f	class:aRedisClient
id	sdk/aDef.h	/^		DWORD id; \/**<游戏区ID*\/$/;"	m	union:stZONE::__anon1
id	sdk/aEntryBase.h	/^	DWORD id;$/;"	m	struct:aEntryBase
identity	sdk/aEntryBase.h	/^template <typename T> struct identity { typedef T type; };$/;"	s
ifCheckSinal	sdk/aTCPTask.cpp	/^const bool aUDPTask::ifCheckSinal()const$/;"	f	class:aUDPTask
ifCheckSinal	sdk/aUDPTask.cpp	/^const bool aTCPTask::ifCheckSinal()const$/;"	f	class:aTCPTask
if_	sdk/aLuaBase.h	/^	template<bool C, typename A, typename B> struct if_ {};$/;"	s	namespace:aLuaBase
if_	sdk/aLuaBase.h	/^	template<typename A, typename B>		struct if_<false, A, B> { typedef B type; };$/;"	s	namespace:aLuaBase
if_	sdk/aLuaBase.h	/^	template<typename A, typename B>		struct if_<true, A, B> { typedef A type; };$/;"	s	namespace:aLuaBase
iffy	sdk/aLogger.cpp	/^bool aLogger::iffy(const char * pattern,... )$/;"	f	class:aLogger
inc	sdk/aTimeWarp.h	/^		void inc(const std::string & func,const unsigned long total)$/;"	f	class:FunctionTime
inc_ref	sdk/aLuaBase.cpp	/^void aLuaBase::table_obj::inc_ref()$/;"	f	class:aLuaBase::table_obj
incr	sdk/aRedisClient.cpp	/^int aRedisClient::incr(const AStr& key)$/;"	f	class:aRedisClient
incrby	sdk/aRedisClient.cpp	/^int aRedisClient::incrby(const AStr& key, const int increment)$/;"	f	class:aRedisClient
incrbyfloat	sdk/aRedisClient.cpp	/^float aRedisClient::incrbyfloat(const AStr& key, const float increment)$/;"	f	class:aRedisClient
info	sdk/aLogger.cpp	/^bool aLogger::info(const char * pattern,... )$/;"	f	class:aLogger
iniNode	sdk/aIni.cpp	/^iniNode::iniNode(string name, iniNode* parent) {$/;"	f	class:iniNode
iniNode	sdk/aIni.cpp	/^iniNode::iniNode(string name, string s, iniNode* parent) {$/;"	f	class:iniNode
iniNode	sdk/aIni.h	/^class iniNode {$/;"	c
init	sdk/aDBConnectPool.cpp	/^bool aDBConnectPool::init(const char * urlstring,aTableDef * tabdef)$/;"	f	class:aDBConnectPool
init	sdk/aDBConnectPool.cpp	/^bool aMysqlDB::init()$/;"	f	class:aMysqlDB
init	sdk/aDebugService.cpp	/^bool aDebugService::init(WORD port)$/;"	f	class:aDebugService
init	sdk/aGlobalClient.cpp	/^bool GlobalClient::init(bool isReconn)$/;"	f	class:GlobalClient
init	sdk/aHttpTaskPool.cpp	/^bool aHttpTaskPool::init()$/;"	f	class:aHttpTaskPool
init	sdk/aLuaBase.cpp	/^void aLuaBase::init(lua_State *L)$/;"	f	class:aLuaBase
init	sdk/aMNetService.cpp	/^bool aMNetService::init()$/;"	f	class:aMNetService
init	sdk/aNetService.cpp	/^bool aNetService::init(unsigned short port)$/;"	f	class:aNetService
init	sdk/aNineScreenIndex.cpp	/^bool aNineScreenIndex<MAX_X,MAX_Y>::init()$/;"	f	class:aNineScreenIndex
init	sdk/aRedisClient.cpp	/^bool aRedisClient::init()$/;"	f	class:aRedisClient
init	sdk/aRedisConnectPool.cpp	/^bool aRedisConnectPool::init(const char * url)$/;"	f	class:aRedisConnectPool
init	sdk/aService.cpp	/^bool aService::init()$/;"	f	class:aService
init	sdk/aTCPClientPool.cpp	/^bool aTCPClientPool::init()$/;"	f	class:aTCPClientPool
init	sdk/aTCPTaskPool.cpp	/^bool aTCPTaskPool::init()$/;"	f	class:aTCPTaskPool
init	sdk/aTableDef.cpp	/^bool aTableDef::init(const char * filename)$/;"	f	class:aTableDef
init	sdk/aUDPNetServer.cpp	/^bool aUDPNetService::init(unsigned short port)$/;"	f	class:aUDPNetService
init	sdk/aUniqueID.h	/^	void init( T min, T max)$/;"	f	class:aUniqueID
init	sdk/aXMLReader.cpp	/^bool aXMLReader::init()$/;"	f	class:aXMLReader
initCRCTable	sdk/aFunc.h	/^	inline void initCRCTable()$/;"	f	namespace:Age
initFile	sdk/aXMLReader.cpp	/^bool aXMLReader::initFile(const char * xmlFile)$/;"	f	class:aXMLReader
initFile	sdk/aXMLReader.cpp	/^bool aXMLReader::initFile(const std::string &xmlFile)$/;"	f	class:aXMLReader
initPool	sdk/aShareMem.cpp	/^int aShareMem::initPool( int key )$/;"	f	class:aShareMem
initSHMContiner	sdk/aShareMem.cpp	/^void aShareMem::initSHMContiner( bool isResume )$/;"	f	class:aShareMem
initSHMOneType	sdk/aShareMem.cpp	/^char *  aShareMem::initSHMOneType(char * addr,Type_MemSize type,bool isresume)$/;"	f	class:aShareMem
initStr	sdk/aXMLReader.cpp	/^bool aXMLReader::initStr(const char * xmlStr)$/;"	f	class:aXMLReader
initStr	sdk/aXMLReader.cpp	/^bool aXMLReader::initStr(const std::string &xmlFile)$/;"	f	class:aXMLReader
initWrap	sdk/aPython.h	/^		virtual void initWrap(){};$/;"	f	class:aPython
init_s64	sdk/aLuaBase.cpp	/^void aLuaBase::init_s64(lua_State *L)$/;"	f	class:aLuaBase
init_u64	sdk/aLuaBase.cpp	/^void aLuaBase::init_u64(lua_State *L)$/;"	f	class:aLuaBase
insert	sdk/aEntryM.h	/^		inline bool insert(const keyT &key,valueT &value)$/;"	f	class:LimitHash
insert	sdk/aEntryM.h	/^		inline bool insert(const keyT &key,valueT &value)$/;"	f	class:MultiHash
insert_direction_str	sdk/aRedisClient.cpp	/^AStr insert_direction_str[] =  {"BEFORE", "AFTER"};$/;"	v
instance	sdk/aMNetService.cpp	/^aMNetService * aMNetService::instance = NULL;$/;"	m	class:aMNetService	file:
instance	sdk/aMNetService.h	/^		static aMNetService * instance;$/;"	m	class:aMNetService
intConv	sdk/aLuaBase.h	/^	struct intConv { intConv(int); }; $/;"	s	namespace:aLuaBase
invalid	sdk/aUniqueID.h	/^	T invalid()$/;"	f	class:aUniqueID
invoke	sdk/aLuaBase.h	/^			static T invoke(lua_State *L, int index) $/;"	f	struct:aLuaBase::lua2object
invoke	sdk/aLuaBase.h	/^			static T invoke(void* ptr)$/;"	f	struct:aLuaBase::void2type
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)()>(L))(); return 0; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1)>(L))(read<T1Base>(L,2)); return 0; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2)>(L))(read<T1Base>(L,2),read<T2Base>(L,3)); return 0; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2,T3)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4)); return 0; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2,T3,T4)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5)); return 0; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2,T3,T4,T5)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5),read<T5Base>(L,6)); return 0; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)()>(L))()); return 1; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1)>(L))(read<T1Base>(L,2))); return 1; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2)>(L))(read<T1Base>(L,2),read<T2Base>(L,3))); return 1; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2,T3)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4))); return 1; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2,T3,T4)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5))); return 1; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2,T3,T4,T5)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5),read<T5Base>(L,6)));; return 1; }$/;"	f	struct:aLuaBase::mem_functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)()>(L)()); return 1; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1)>(L)(read<T1Base>(L,1))); return 1; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2)>(L)(read<T1Base>(L,1),read<T2Base>(L,2))); return 1; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2,T3)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3))); return 1; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2,T3,T4)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4))); return 1; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2,T3,T4,T5)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4),read<T5Base>(L,5))); return 1; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { upvalue_<void(*)()>(L)(); return 0; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { upvalue_<void(*)(T1)>(L)(read<T1Base>(L,1)); return 0; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2)>(L)(read<T1Base>(L,1),read<T2Base>(L,2)); return 0; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2,T3)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3)); return 0; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2,T3,T4)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4)); return 0; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2,T3,T4,T5)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4),read<T5Base>(L,5)); return 0; }$/;"	f	struct:aLuaBase::functor
invoke	sdk/aLuaBase.h	/^			static void invoke(lua_State *L, T val) $/;"	f	struct:aLuaBase::object2lua
invoke	sdk/aLuaBase.h	/^		struct enum2lua { static void invoke(lua_State *L, T val) { lua_pushnumber(L, (int)val); } };$/;"	f	struct:aLuaBase::enum2lua
invoke	sdk/aLuaBase.h	/^		struct lua2enum { static T invoke(lua_State *L, int index) { return (T)(int)lua_tonumber(L, index); } };$/;"	f	struct:aLuaBase::lua2enum
invoke	sdk/aLuaBase.h	/^		struct ptr2lua { static void invoke(lua_State *L, T* input){ if(input) new(lua_newuserdata(L, sizeof(ptr2user<T>))) ptr2user<T>(input); else lua_pushnil(L); } };$/;"	f	struct:aLuaBase::ptr2lua
invoke	sdk/aLuaBase.h	/^		struct ref2lua { static void invoke(lua_State *L, T& input){ new(lua_newuserdata(L, sizeof(ref2user<T>))) ref2user<T>(input); } };$/;"	f	struct:aLuaBase::ref2lua
invoke	sdk/aLuaBase.h	/^		struct user2type { static T invoke(lua_State *L, int index) { return void2type<T>::invoke(lua_touserdata(L, index)); } };$/;"	f	struct:aLuaBase::user2type
invoke	sdk/aLuaBase.h	/^		struct val2lua { static void invoke(lua_State *L, T& input){ new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(input); } };$/;"	f	struct:aLuaBase::val2lua
invoke	sdk/aLuaBase.h	/^		struct void2ptr { static T* invoke(void* input){ return (T*)input; } };$/;"	f	struct:aLuaBase::void2ptr
invoke	sdk/aLuaBase.h	/^		struct void2ref { static T& invoke(void* input){ return *(T*)input; } };$/;"	f	struct:aLuaBase::void2ref
invoke	sdk/aLuaBase.h	/^		struct void2val { static T invoke(void* input){ return *(T*)input; } };$/;"	f	struct:aLuaBase::void2val
invoke_parent	sdk/aLuaBase.cpp	/^static void invoke_parent(lua_State *L)$/;"	f	file:
ip	sdk/aTCPClient.h	/^		const std::string ip;$/;"	m	class:aTCPClient
is	sdk/aBits.h	/^		bool is(DWORD bit)$/;"	f	class:aBits
isAlive	sdk/aThread.h	/^		const bool isAlive()const$/;"	f	class:aThread
isConn	sdk/aGlobalClient.h	/^		bool isConn(){return _isConn;}$/;"	f	class:GlobalClient
isEnum	sdk/aLuaBase.h	/^		struct isEnum $/;"	s	namespace:aLuaBase
isEqula	sdk/aVec3.cpp	/^inline bool aVector3::isEqula(const aVector3& vector)const$/;"	f	class:aVector3
isFdsrAdd	sdk/aTCPClient.cpp	/^bool aTCPClient::isFdsrAdd()$/;"	f	class:aTCPClient
isFdsrAdd	sdk/aTCPTask.cpp	/^bool aUDPTask::isFdsrAdd()$/;"	f	class:aUDPTask
isFdsrAdd	sdk/aUDPTask.cpp	/^bool aTCPTask::isFdsrAdd()$/;"	f	class:aTCPTask
isFinal	sdk/aThread.h	/^		const bool isFinal()const$/;"	f	class:aThread
isFloatEqual	sdk/aVec3.cpp	/^inline bool aVector3::isFloatEqual(float f1,float f2,float fEpsilon)const$/;"	f	class:aVector3
isInWeekDay	sdk/aTime.h	/^		static bool isInWeekDay(int day)$/;"	f	class:aRealTime
isInitCRC	sdk/aFunc.h	/^	static int isInitCRC = 0;$/;"	m	namespace:Age
isIntEqual	sdk/aVec3.cpp	/^inline bool aVector3::isIntEqual(float f1,float f2)const$/;"	f	class:aVector3
isJoinable	sdk/aThread.h	/^		bool isJoinable()const$/;"	f	class:aThread
isPtr	sdk/aLuaBase.h	/^		struct isPtr { static const bool value = false; };$/;"	s	namespace:aLuaBase
isPtr	sdk/aLuaBase.h	/^		struct isPtr<A*> { static const bool value = true; };$/;"	s	namespace:aLuaBase
isRef	sdk/aLuaBase.h	/^		struct isRef { static const bool value = false; };$/;"	s	namespace:aLuaBase
isRef	sdk/aLuaBase.h	/^		struct isRef<A&> { static const bool value = true; };$/;"	s	namespace:aLuaBase
isReload	sdk/aTCPClientPool.cpp	/^bool aTCPClientPool::isReload()$/;"	f	class:aTCPClientPool
isSame	sdk/aPos.h	/^	bool isSame(const aPos& pos)const$/;"	f	struct:aPos
isTerminate	sdk/aService.cpp	/^bool aService::isTerminate()const$/;"	f	class:aService
isTerminate	sdk/aTCPClient.cpp	/^bool aTCPClient::isTerminate()const$/;"	f	class:aTCPClient
isTerminate	sdk/aTCPTask.cpp	/^bool aUDPTask::isTerminate()const$/;"	f	class:aUDPTask
isTerminate	sdk/aUDPTask.cpp	/^bool aTCPTask::isTerminate()const$/;"	f	class:aTCPTask
isTerminateWait	sdk/aTCPTask.cpp	/^bool aUDPTask::isTerminateWait()$/;"	f	class:aUDPTask
isTerminateWait	sdk/aUDPTask.cpp	/^bool aTCPTask::isTerminateWait()$/;"	f	class:aTCPTask
isUnique	sdk/aTCPTask.cpp	/^bool aUDPTask::isUnique() const$/;"	f	class:aUDPTask
isUnique	sdk/aUDPTask.cpp	/^bool aTCPTask::isUnique() const$/;"	f	class:aTCPTask
isVerified	sdk/aGlobalClient.h	/^		bool isVerified()$/;"	f	class:GlobalClient
isZero	sdk/aVec3.cpp	/^inline const bool isZero(aVector3 const&vector){$/;"	f
issetFlag	sdk/aSocket.h	/^		inline bool issetFlag(unsigned int _f ) const { return bitmask & _f; }$/;"	f	class:aSocket
iter	sdk/aEntryM.h	/^		typedef typename hashmap::iterator iter;$/;"	t	class:LimitHash
iter	sdk/aEntryM.h	/^		typedef typename hashmap::iterator iter;$/;"	t	class:MultiHash
join	sdk/aThread.cpp	/^void aThread::join()$/;"	f	class:aThread
joinAll	sdk/aThread.cpp	/^void aThreadGroup::joinAll()$/;"	f	class:aThreadGroup
kdpfd	sdk/aHttpTaskPool.cpp	/^		int kdpfd;$/;"	m	class:aHttpThread	file:
kdpfd	sdk/aMTCPService.h	/^		int kdpfd;$/;"	m	class:aMTCPService
kdpfd	sdk/aTCPClientPool.cpp	/^		int kdpfd;$/;"	m	class:aCkeckWaitThread	file:
kdpfd	sdk/aTCPClientPool.cpp	/^		int kdpfd;$/;"	m	class:aTCPClientThread	file:
kdpfd	sdk/aTCPServic.h	/^		int kdpfd;$/;"	m	class:aTCPServic
kdpfd	sdk/aTCPTaskPool.cpp	/^		int kdpfd;$/;"	m	class:aOkayThread	file:
kdpfd	sdk/aTCPTaskPool.cpp	/^		int kdpfd;$/;"	m	class:aVerifyThread	file:
kdpfd	sdk/aUDPServer.h	/^		int kdpfd;$/;"	m	class:aUDPServic
key_equal	sdk/aFunc.h	/^	struct key_equal : public std::binary_function<const std::string , const std::string , bool>$/;"	s	namespace:Age
key_equal	sdk/aGlobal.h	/^		struct key_equal :public std::binary_function<const std::string , const std::string ,bool>$/;"	s	class:aGlobal
key_hash	sdk/aFunc.h	/^	struct key_hash : public std::unary_function<const std::string , size_t>$/;"	s	namespace:Age
key_hash	sdk/aGlobal.h	/^		struct key_hash:public std::unary_function<const std::string ,size_t>$/;"	s	class:aGlobal
keys	sdk/aRedisClient.cpp	/^int aRedisClient::keys(const AStr& pattern, AVec<AStr>& arr)$/;"	f	class:aRedisClient
ks	sdk/des.h	/^	} ks[16];$/;"	m	struct:DES_ks	typeref:union:DES_ks::__anon8
lastName	sdk/aIni.h	/^		string lastName;$/;"	m	class:aIni
lastchecktime	sdk/aSocket.h	/^		atmTime lastchecktime;$/;"	m	class:aSocket
le_s64	sdk/aLuaBase.cpp	/^static int le_s64(lua_State *L)$/;"	f	file:
le_u64	sdk/aLuaBase.cpp	/^static int le_u64(lua_State *L)$/;"	f	file:
lengthSquared	sdk/aVec3.cpp	/^inline float lengthSquared(aVector3 const&vector){$/;"	f
lerp	sdk/aVec3.cpp	/^inline aVector3 lerp(aVector3 const&vec1, aVector3 const&vec2, float const& num)$/;"	f
lifeTime	sdk/aHttpTask.h	/^		aRealTime lifeTime;								\/**< 连接创建时间记录 *\/$/;"	m	class:aHttpTask
lifeTime	sdk/aTCPClient.h	/^		atmTime lifeTime;$/;"	m	class:aTCPClient
lifeTime	sdk/aTCPTask.h	/^		aRealTime lifeTime;\/**<连接建立的时间*\/$/;"	m	class:aUDPTask
lifeTime	sdk/aUDPTask.h	/^		aRealTime lifeTime;\/**<连接建立的时间*\/$/;"	m	class:aTCPTask
lindex	sdk/aRedisClient.cpp	/^int aRedisClient::lindex(const AStr& key, const int index, AStr& value)$/;"	f	class:aRedisClient
linsert	sdk/aRedisClient.cpp	/^int aRedisClient::linsert(const AStr& key, InsertDirection direction, const int pivot, const AStr& value)$/;"	f	class:aRedisClient
listAll	sdk/aSerialization.h	/^		void listAll(){$/;"	f	class:DataSerialization
listeningRecv	sdk/aMiniTCPClient.cpp	/^bool aMiniTCPClient::listeningRecv()$/;"	f	class:aMiniTCPClient
listeningRecv	sdk/aTCPTask.cpp	/^bool aUDPTask::listeningRecv(bool needRecv)$/;"	f	class:aUDPTask
listeningRecv	sdk/aUDPTask.cpp	/^bool aTCPTask::listeningRecv(bool needRecv)$/;"	f	class:aTCPTask
listeningSend	sdk/aMiniTCPClient.cpp	/^bool aMiniTCPClient::listeningSend()$/;"	f	class:aMiniTCPClient
listeningSend	sdk/aTCPTask.cpp	/^bool aUDPTask::listeningSend()$/;"	f	class:aUDPTask
listeningSend	sdk/aUDPTask.cpp	/^bool aTCPTask::listeningSend()$/;"	f	class:aTCPTask
listernRecv	sdk/aTCPClient.cpp	/^bool aTCPClient::listernRecv(bool needRecv)$/;"	f	class:aTCPClient
listernSend	sdk/aTCPClient.cpp	/^bool aTCPClient::listernSend()$/;"	f	class:aTCPClient
llen	sdk/aRedisClient.cpp	/^int aRedisClient::llen(const AStr& key)$/;"	f	class:aRedisClient
loadConfig	sdk/aDBConnectPool.cpp	/^bool aDBConnectPool::loadConfig(const char * urlStr)$/;"	f	class:aDBConnectPool
loadConfig	sdk/aRedisConnectPool.cpp	/^bool aRedisConnectPool::loadConfig(const char * urlStr)$/;"	f	class:aRedisConnectPool
localaddr	sdk/aSocket.h	/^		struct sockaddr_in localaddr;$/;"	m	class:aSocket	typeref:struct:aSocket::sockaddr_in
lock	sdk/aMutex.h	/^	inline void lock()$/;"	f	class:aMutex
lock	sdk/aUser.h	/^	void lock()$/;"	f	struct:aUser
log	sdk/aLogger.cpp	/^bool aLogger::log( const aLevel * aLevelPtr,const char * pattern, ... )$/;"	f	class:aLogger
logger	sdk/Age.cpp	/^	aLogger * logger = NULL;$/;"	m	namespace:Age	file:
logger	sdk/aLogger.h	/^		log4cxx::LoggerPtr logger;$/;"	m	class:aLogger
lpEntries	sdk/aMsgCallBack.h	/^	const AGE_MSGMAP_ENTRY* lpEntries;$/;"	m	struct:stAgeMsgMap
lpop	sdk/aRedisClient.cpp	/^int aRedisClient::lpop(const AStr& key, AStr& value)$/;"	f	class:aRedisClient
lpush	sdk/aRedisClient.cpp	/^int aRedisClient::lpush(const AStr& key, const AVec<AStr>& values)$/;"	f	class:aRedisClient
lpushx	sdk/aRedisClient.cpp	/^int aRedisClient::lpushx(const AStr& key, const AStr& value)$/;"	f	class:aRedisClient
lrange	sdk/aRedisClient.cpp	/^int aRedisClient::lrange(const AStr& key, const int start, const int stop, AVec<AStr>& values)$/;"	f	class:aRedisClient
lrem	sdk/aRedisClient.cpp	/^int aRedisClient::lrem(const AStr& key, const int count, const AStr& value)$/;"	f	class:aRedisClient
lset	sdk/aRedisClient.cpp	/^bool aRedisClient::lset(const AStr& key, const int count, const AStr& value)$/;"	f	class:aRedisClient
lt_s64	sdk/aLuaBase.cpp	/^static int lt_s64(lua_State *L)$/;"	f	file:
lt_u64	sdk/aLuaBase.cpp	/^static int lt_u64(lua_State *L)$/;"	f	file:
ltrim	sdk/aRedisClient.cpp	/^bool aRedisClient::ltrim(const AStr& key, const int start, const int stop)$/;"	f	class:aRedisClient
lua2enum	sdk/aLuaBase.h	/^		struct lua2enum { static T invoke(lua_State *L, int index) { return (T)(int)lua_tonumber(L, index); } };$/;"	s	namespace:aLuaBase
lua2object	sdk/aLuaBase.h	/^		struct lua2object$/;"	s	namespace:aLuaBase
lua2type	sdk/aLuaBase.h	/^		T lua2type(lua_State *L, int index)$/;"	f	namespace:aLuaBase
lua_open	sdk/aLuaBase.h	23;"	d
lua_value	sdk/aLuaBase.h	/^	struct lua_value$/;"	s	namespace:aLuaBase
m_L	sdk/aLuaBase.h	/^		lua_State*		m_L;$/;"	m	struct:aLuaBase::table_obj
m_index	sdk/aLuaBase.h	/^		int				m_index;$/;"	m	struct:aLuaBase::table_obj
m_name	sdk/aLuaBase.h	/^			static const char* m_name;$/;"	m	struct:aLuaBase::className
m_name	sdk/aLuaBase.h	/^		const char* className<T>::m_name = "";$/;"	m	class:aLuaBase::className
m_obj	sdk/aLuaBase.h	/^		table_obj*		m_obj;$/;"	m	struct:aLuaBase::table
m_p	sdk/aLuaBase.h	/^		void* m_p;$/;"	m	struct:aLuaBase::user
m_pointer	sdk/aLuaBase.h	/^		const void*		m_pointer;$/;"	m	struct:aLuaBase::table_obj
m_ref	sdk/aLuaBase.h	/^		int				m_ref;$/;"	m	struct:aLuaBase::table_obj
magnitude	sdk/aVec3.cpp	/^inline float magnitude(aVector3 const &vector){$/;"	f
main	sdk/aService.cpp	/^void aService::main()$/;"	f	class:aService
mainServer	sdk/aGlobalClient.h	/^		aNetService * mainServer;$/;"	m	class:GlobalClient
mainloop	sdk/aTCPClient.h	/^		volatile bool mainloop;$/;"	m	class:aTCPClient
maxHttpThreads	sdk/aHttpTaskPool.h	/^		static const int maxHttpThreads = 8;					\/**< 最大验证线程数量 *\/$/;"	m	class:aHttpTaskPool
maxSize	sdk/aMemStream.h	/^		inline unsigned int maxSize()const$/;"	f	class:aMemStream
maxThreadCount	sdk/aTCPTaskPool.h	/^		int maxThreadCount;										\/**< 线程池中同时存在主处理线程的最大个数*\/$/;"	m	class:aTCPTaskPool
maxVerifyThreads	sdk/aTCPTaskPool.h	/^		static const int maxVerifyThreads = 4;					\/**< 最大验证线程数量> *\/$/;"	m	class:aTCPTaskPool
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<RVal,T,T1, T2>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<RVal,T,T1,T2,T3,T4>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<RVal,T,T1,T2,T3>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<RVal,T,T1>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<RVal,T>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<void,T,T1,T2,T3,T4,T5>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<void,T,T1,T2,T3,T4>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<void,T,T1,T2,T3>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<void,T,T1,T2>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<void,T,T1>$/;"	s	namespace:aLuaBase
mem_functor	sdk/aLuaBase.h	/^		struct mem_functor<void,T>$/;"	s	namespace:aLuaBase
mem_var	sdk/aLuaBase.h	/^		mem_var(V T::*val) : _var(val) {}$/;"	f	struct:aLuaBase::mem_var
mem_var	sdk/aLuaBase.h	/^		struct mem_var : var_base$/;"	s	namespace:aLuaBase
message	sdk/aLogger.h	/^		char message[_MSGBUF_MAX];$/;"	m	class:aLogger
mget	sdk/aRedisClient.cpp	/^int aRedisClient::mget(const AVec<AStr>& keys, AMap<AStr,AStr> & kv_map)$/;"	f	class:aRedisClient
minThreadCount	sdk/aTCPTaskPool.h	/^		static const int minThreadCount = 1;					\/**< 线程池中同时存在主处理线程的最少个数*\/$/;"	m	class:aTCPTaskPool
mlock	sdk/aTCPClientPool.cpp	/^		aMutex mlock;$/;"	m	class:aTCPClientTaskQueue	file:
mlock	sdk/aTCPClientPool.h	/^		aMutex mlock;$/;"	m	class:aTCPClientPool
mlock	sdk/aTCPTaskPool.cpp	/^		aMutex mlock;	\/**<线程互斥量*\/$/;"	m	class:aTCPTaskQueue	file:
msec	sdk/aTime.h	/^		unsigned long msec() const$/;"	f	class:aRealTime
mset	sdk/aRedisClient.cpp	/^bool aRedisClient::mset(const AMap<AStr,AStr>& kv_map)$/;"	f	class:aRedisClient
msetnx	sdk/aRedisClient.cpp	/^int aRedisClient::msetnx(const AMap<AStr,AStr>& kv_map)$/;"	f	class:aRedisClient
msgParse	sdk/aGlobalClient.cpp	/^bool GlobalClient::msgParse(const char * msg,const int iLen)$/;"	f	class:GlobalClient
msgParse	sdk/aMiniTCPClient.h	/^                virtual bool msgParse(const char * msg ,const int iLen ){ return false;};$/;"	f	class:aMiniTCPClient
msgParse	sdk/aTCPClient.h	/^		virtual bool msgParse(const char * msg ,const int iLen ){ return false;};$/;"	f	class:aTCPClient
msgParse	sdk/aTCPTask.h	/^                virtual bool msgParse(const char * msg ,const int iLen ){ return false;};$/;"	f	class:aUDPTask
msgParse	sdk/aUDPTask.h	/^                virtual bool msgParse(const char * msg ,const int iLen ){ return false;};$/;"	f	class:aTCPTask
msgParseGlobal	sdk/aNetService.h	/^		virtual bool msgParseGlobal(const char *msg , const int iLen) $/;"	f	class:aNetService
msgParseGlobal	sdk/aUDPNetServer.h	/^		virtual bool msgParseGlobal(const char *msg , const int iLen) $/;"	f	class:aUDPNetService
msgQueueParse	sdk/aMiniTCPClient.h	/^                virtual bool msgQueueParse(const char * msg,const int iLen){ return false;};	$/;"	f	class:aMiniTCPClient
msgQueueParse	sdk/aTCPClient.h	/^		virtual bool msgQueueParse(const char * msg,const int iLen){ return false;};	$/;"	f	class:aTCPClient
msgQueueParse	sdk/aTCPTask.h	/^                virtual bool msgQueueParse(const char * msg,const int iLen){ return false;};	$/;"	f	class:aUDPTask
msgQueueParse	sdk/aUDPTask.h	/^                virtual bool msgQueueParse(const char * msg,const int iLen){ return false;};	$/;"	f	class:aTCPTask
msleep	sdk/aThread.h	/^		static void msleep(const long msec)$/;"	f	class:aThread
mutex	sdk/aDBConnectPool.h	/^		aMutex mutex;$/;"	m	class:aDBConnectPool
mutex	sdk/aHttpTaskPool.cpp	/^		aMutex mutex;				\/**< 互斥变量 *\/$/;"	m	class:aHttpThread	file:
mutex	sdk/aMutex.h	/^		aMutex mutex;$/;"	m	class:aMutexAutoScop
mutex	sdk/aMutex.h	/^	pthread_mutex_t mutex;$/;"	m	class:aMutex
mutex	sdk/aRedisConnectPool.h	/^		aMutex mutex;$/;"	m	class:aRedisConnectPool
mutex	sdk/aSocket.h	/^		aMutex mutex;$/;"	m	class:aSocket
mutex	sdk/aTableDef.h	/^		aMutex mutex;$/;"	m	class:aTableDef
my_key_queal	sdk/aEntryM.h	/^struct my_key_queal : public std::binary_function<keyT,keyT,bool>$/;"	s
mysql	sdk/aDBConnectPool.h	/^	aMysqlDB * mysql; \/**<mysql对象封装*\/$/;"	m	struct:stMysql
name	sdk/aEntryBase.h	/^	char name[MAX_NAMESIZE+1];$/;"	m	struct:aEntryBase
name	sdk/aIni.h	/^		string name;$/;"	m	class:iniNode
name	sdk/aLuaBase.h	/^			static inline const char* name( void )$/;"	f	struct:aLuaBase::className
name	sdk/aLuaBase.h	/^			static inline void name( const char* name )$/;"	f	struct:aLuaBase::className
name	sdk/aMTCPService.h	/^		std::string name;$/;"	m	class:aMTCPService
name	sdk/aService.h	/^		const char *  name;$/;"	m	class:aService
name	sdk/aTCPServic.h	/^		std::string name;$/;"	m	class:aTCPServic
name	sdk/aTableDef.h	/^	char  name[MAX_COLNAME+1];\/**<col name*\/$/;"	m	struct:dbCol
name	sdk/aUDPServer.h	/^		std::string name;$/;"	m	class:aUDPServic
needenc	sdk/aSocket.h	/^		inline bool  needenc() const {return CEnctypt::ENCODE_NONE != enc.getEncMethod(); }$/;"	f	class:aSocket
negate	sdk/aVec3.cpp	/^inline aVector3 negate(aVector3 const &vec1){$/;"	f
newChildNode	sdk/aXMLReader.cpp	/^xmlNodePtr aXMLReader::newChildNode(const xmlNodePtr parent,const char * childName,const char * content)$/;"	f	class:aXMLReader
newNodeProp	sdk/aXMLReader.cpp	/^bool aXMLReader::newNodeProp(const xmlNodePtr node,const char * propName,const char * prop)$/;"	f	class:aXMLReader
newRootNode	sdk/aXMLReader.cpp	/^xmlNodePtr aXMLReader::newRootNode(const char * nodeName)$/;"	f	class:aXMLReader
newTCPTask	sdk/aDebugService.cpp	/^void aDebugService::newTCPTask(const int sock,const struct sockaddr_in * addr)$/;"	f	class:aDebugService
newTCPTask	sdk/aNetService.h	/^		virtual void newTCPTask(const int sock,const struct sockaddr_in * addr){};$/;"	f	class:aNetService
newThread	sdk/aTCPClientPool.cpp	/^aTCPClientThread * aTCPClientPool::newThread()$/;"	f	class:aTCPClientPool
newUDPTask	sdk/aUDPNetServer.h	/^		virtual void newUDPTask(const int sock,const struct sockaddr_in * addr){};$/;"	f	class:aUDPNetService
next	sdk/aTime.h	/^		void next(const aRealTime &cur)$/;"	f	class:aTimer
nlerp	sdk/aVec3.cpp	/^inline aVector3 nlerp(aVector3 const& vec1, aVector3 const&vec2, float const& num)$/;"	f
no	sdk/aLuaBase.h	/^	enum { no = 1, yes = 2 }; $/;"	e	enum:aLuaBase::__anon4
noType	sdk/aLuaBase.h	/^	typedef char (& noType )[no]; $/;"	t	namespace:aLuaBase
nodes	sdk/aIni.h	/^		map<string, iniNode*> nodes;$/;"	m	class:aIni
normalize	sdk/aVec3.cpp	/^inline aVector3 normalize(aVector3 const &vector){$/;"	f
notuse	sdk/aTCPTask.h	/^			notuse = 0,$/;"	e	enum:aUDPTask::aUDPTask_State
notuse	sdk/aUDPTask.h	/^			notuse = 0,$/;"	e	enum:aTCPTask::aTCPTask_State
now	sdk/aTime.h	/^		void now()$/;"	f	class:aRealTime
now	sdk/aTime.h	/^		void now()$/;"	f	class:atmTime
nowByDelay	sdk/aTime.h	/^		void nowByDelay( int delay )$/;"	f	class:aRealTime
object2lua	sdk/aLuaBase.h	/^		struct object2lua $/;"	s	namespace:aLuaBase
odds_t	sdk/aFunc.h	/^			struct odds_t$/;"	s	class:Age::aMisc
offPtr	sdk/aMemStream.h	/^		inline unsigned int offPtr()const$/;"	f	class:aMemStream
okay	sdk/aTCPClient.h	/^			okay = 2,$/;"	e	enum:aTCPClient::ConnectState
okay	sdk/aTCPTask.h	/^			okay = 3,$/;"	e	enum:aUDPTask::aUDPTask_State
okay	sdk/aUDPTask.h	/^			okay = 3,$/;"	e	enum:aTCPTask::aTCPTask_State
okayThreads	sdk/aTCPTaskPool.h	/^		aThreadGroup okayThreads;								\/**< 处理主线程，多个*\/$/;"	m	class:aTCPTaskPool
on_error	sdk/aLuaBase.cpp	/^int aLuaBase::on_error(lua_State *L)$/;"	f	class:aLuaBase
open	sdk/aLuaBase.h	/^	inline lua_State *open( void )$/;"	f	namespace:aLuaBase
openCoroutine	sdk/aLuaBase.h	/^	inline void openCoroutine( lua_State *L )$/;"	f	namespace:aLuaBase
openIO	sdk/aLuaBase.h	/^	inline void openIO( lua_State *L )$/;"	f	namespace:aLuaBase
openMath	sdk/aLuaBase.h	/^	inline void openMath( lua_State *L )$/;"	f	namespace:aLuaBase
openOS	sdk/aLuaBase.h	/^	inline void openOS( lua_State *L )$/;"	f	namespace:aLuaBase
openString	sdk/aLuaBase.h	/^	inline void openString( lua_State *L )$/;"	f	namespace:aLuaBase
openTable	sdk/aLuaBase.h	/^	inline void openTable( lua_State *L )$/;"	f	namespace:aLuaBase
operator !=	sdk/aThread.h	/^		bool operator != (const aThread & othrer) const$/;"	f	class:aThread
operator !=	sdk/aVec3.cpp	/^inline bool aVector3::operator!=(const aVector3& vector) const$/;"	f	class:aVector3
operator ()	sdk/aEntryM.h	/^inline bool my_key_queal<DWORD>::operator ()(const DWORD  s1,const DWORD s2)const$/;"	f	class:my_key_queal
operator ()	sdk/aEntryM.h	/^inline bool my_key_queal<QWORD>::operator ()(const QWORD  s1,const QWORD s2)const$/;"	f	class:my_key_queal
operator ()	sdk/aEntryM.h	/^inline bool my_key_queal<const char *>::operator ()(const char *  s1,const char * s2)const$/;"	f	class:my_key_queal
operator ()	sdk/aFunc.h	/^				R operator()(Args... args) {$/;"	f	class:Age::aFuncion
operator ()	sdk/aFunc.h	/^		bool operator()(const std::string & s1,const std::string &s2)const$/;"	f	struct:Age::key_equal
operator ()	sdk/aFunc.h	/^		char operator()(char c)const$/;"	f	struct:Age::ToLower
operator ()	sdk/aFunc.h	/^		char operator()(char c)const$/;"	f	struct:Age::ToUpper
operator ()	sdk/aFunc.h	/^		size_t operator()(const std::string & x)const$/;"	f	struct:Age::key_hash
operator ()	sdk/aGlobal.h	/^			bool operator()(const std::string &s1,const std::string &s2)const$/;"	f	struct:aGlobal::key_equal
operator ()	sdk/aGlobal.h	/^			size_t operator()(const std::string &x)const$/;"	f	struct:aGlobal::key_hash
operator ()	sdk/aTime.h	/^		bool operator () (const aRealTime &cur)$/;"	f	class:aTimer
operator *	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator*(const aVector3& vector) const$/;"	f	class:aVector3
operator *	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator*(float const&num) const$/;"	f	class:aVector3
operator *=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator*=(const aVector3& vector)$/;"	f	class:aVector3
operator *=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator*=(const float& num)$/;"	f	class:aVector3
operator +	sdk/aTime.h	/^		const aRealTime & operator + (const aRealTime & rt)$/;"	f	class:aRealTime
operator +	sdk/aTime.h	/^		const atmTime & operator + (const atmTime &rt)$/;"	f	class:atmTime
operator +	sdk/aVars.h	/^			inline void operator+(VARTYPE var)$/;"	f	class:Vars
operator +	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator+(const aVector3& vector) const$/;"	f	class:aVector3
operator +	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator+(float const&num) const$/;"	f	class:aVector3
operator +=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator+=(const aVector3& vector)$/;"	f	class:aVector3
operator +=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator+=(const float& num)$/;"	f	class:aVector3
operator -	sdk/aTime.h	/^		const aRealTime & operator - (const aRealTime & rt)$/;"	f	class:aRealTime
operator -	sdk/aTime.h	/^		const atmTime & operator - (const atmTime &rt)$/;"	f	class:atmTime
operator -	sdk/aVars.h	/^			inline void operator-(VARTYPE var)$/;"	f	class:Vars
operator -	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator-() const$/;"	f	class:aVector3
operator -	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator-(const aVector3& vector) const$/;"	f	class:aVector3
operator -	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator-(float const&num) const$/;"	f	class:aVector3
operator -=	sdk/aTime.h	/^		const atmTime & operator -= (const time_t s)$/;"	f	class:atmTime
operator -=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator-=(const aVector3& vector)$/;"	f	class:aVector3
operator -=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator-=(const float& num)$/;"	f	class:aVector3
operator /	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator\/(const aVector3& vector) const$/;"	f	class:aVector3
operator /	sdk/aVec3.cpp	/^inline aVector3 aVector3::operator\/(float const&num) const$/;"	f	class:aVector3
operator /=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator\/=(const aVector3& vector)$/;"	f	class:aVector3
operator /=	sdk/aVec3.cpp	/^inline aVector3& aVector3::operator\/=(const float& num)$/;"	f	class:aVector3
operator <	sdk/aTime.h	/^		bool operator < (const aRealTime & rt) const$/;"	f	class:aRealTime
operator <	sdk/aTime.h	/^		bool operator < (const atmTime & rt) const$/;"	f	class:atmTime
operator <<	sdk/aIni.cpp	/^ostream& operator << (ostream& out, aIni &c) {$/;"	f
operator <<	sdk/aIni.cpp	/^ostream& operator << (ostream& out, iniNode &c) {$/;"	f
operator <<	sdk/aIni.cpp	/^ostream& operator << (ostream& out, iniNode *c) {$/;"	f
operator <<	sdk/aRedisCommand.h	/^			inline aRedisCmdMaker& operator << (const T& data)$/;"	f	class:aRedisCmdMaker
operator <<	sdk/aRedisCommand.h	/^		aRedisCmdMaker& operator << (const AMap<AStr,AStr>& m)$/;"	f	class:aRedisCmdMaker
operator <<	sdk/aRedisCommand.h	/^		aRedisCmdMaker& operator << (const AVec<AStr> &strs)$/;"	f	class:aRedisCmdMaker
operator <<	sdk/aRedisCommand.h	/^		aRedisCmdMaker& operator << (const REDIS_HASH_MAP & h)$/;"	f	class:aRedisCmdMaker
operator <<	sdk/aRedisCommand.h	/^		inline aRedisCmdMaker& operator << (const AStr& data)$/;"	f	class:aRedisCmdMaker
operator <<	sdk/aVars.h	/^			inline void operator<<(VARTYPE var)$/;"	f	class:Vars
operator <<	sdk/aVec3.cpp	/^inline std::ostream& operator<< (std::ostream& os, const aVector3& vector)$/;"	f
operator <=	sdk/aTime.h	/^		bool operator <= (const aRealTime & rt) const$/;"	f	class:aRealTime
operator <=	sdk/aTime.h	/^		bool operator <= (const atmTime & rt) const$/;"	f	class:atmTime
operator =	sdk/aDef.h	/^	stZONE & operator = (const stZONE & zone)$/;"	f	struct:stZONE
operator =	sdk/aIni.cpp	/^iniNode& iniNode::operator = (double i) {$/;"	f	class:iniNode
operator =	sdk/aIni.cpp	/^iniNode& iniNode::operator = (float i) {$/;"	f	class:iniNode
operator =	sdk/aIni.cpp	/^iniNode& iniNode::operator = (int i) {$/;"	f	class:iniNode
operator =	sdk/aIni.cpp	/^iniNode& iniNode::operator = (long int i) {$/;"	f	class:iniNode
operator =	sdk/aIni.cpp	/^iniNode& iniNode::operator = (string s) {$/;"	f	class:iniNode
operator =	sdk/aIni.cpp	/^iniNode& iniNode::operator = (unsigned int i) {$/;"	f	class:iniNode
operator =	sdk/aLuaBase.cpp	/^aLuaBase::table& aLuaBase::table::operator=( const table& rhs )$/;"	f	class:aLuaBase::table
operator =	sdk/aTable.h	/^		const DBVARTYPE & operator = (const DBVARTYPE & bdata)$/;"	f	class:DBVARTYPE
operator =	sdk/aTable.h	/^		const DBVARTYPE & operator = (const X & bdata)$/;"	f	class:DBVARTYPE
operator =	sdk/aTime.h	/^		aRealTime & operator = (const aRealTime & rt)$/;"	f	class:aRealTime
operator =	sdk/aTime.h	/^		atmTime operator = (const atmTime & rt)$/;"	f	class:atmTime
operator ==	sdk/aDef.h	/^	bool operator== (const stZONE & zone)const$/;"	f	struct:stZONE
operator ==	sdk/aThread.h	/^		bool operator == (const aThread & other) const$/;"	f	class:aThread
operator ==	sdk/aTime.h	/^		bool operator == (const aRealTime & rt) const$/;"	f	class:aRealTime
operator ==	sdk/aTime.h	/^		bool operator == (const atmTime & rt) const$/;"	f	class:atmTime
operator ==	sdk/aVec3.cpp	/^inline bool aVector3::operator==(const aVector3& vector) const$/;"	f	class:aVector3
operator >	sdk/aTime.h	/^		bool operator > (const aRealTime & rt) const$/;"	f	class:aRealTime
operator >	sdk/aTime.h	/^		bool operator > (const atmTime & rt) const$/;"	f	class:atmTime
operator >=	sdk/aTime.h	/^		bool operator >= (const aRealTime & rt) const$/;"	f	class:aRealTime
operator >=	sdk/aTime.h	/^		bool operator >= (const atmTime & rt) const$/;"	f	class:atmTime
operator >>	sdk/aIni.cpp	/^istream& operator >> (istream& in, iniNode &c) {$/;"	f
operator >>	sdk/aIni.cpp	/^istream& operator >> (istream& in, iniNode *c) {$/;"	f
operator >>	sdk/aVars.h	/^			inline void operator>>(VARTYPE &var)$/;"	f	class:Vars
operator []	sdk/aGlobal.cpp	/^std::string & aGlobal::operator[](const std::string &key)$/;"	f	class:aGlobal
operator []	sdk/aIni.cpp	/^iniNode& aIni::operator [](int index) {$/;"	f	class:aIni
operator []	sdk/aIni.cpp	/^iniNode& aIni::operator [](string s) {$/;"	f	class:aIni
operator []	sdk/aIni.cpp	/^iniNode& iniNode::operator [](int index) {$/;"	f	class:iniNode
operator []	sdk/aIni.cpp	/^iniNode& iniNode::operator [](string s) {$/;"	f	class:iniNode
operator []	sdk/aTable.h	/^		inline DBVARTYPE & operator [](const std::string &name)$/;"	f	class:aRecord
operator []	sdk/aTable.h	/^		inline DBVARTYPE &operator[](const unsigned int index)$/;"	f	class:aRecord
operator []	sdk/aTable.h	/^		inline aRecord * operator [](const unsigned int index)$/;"	f	class:aRecordSet
operator []	sdk/aThread.cpp	/^aThread * aThreadGroup::operator [](const Container::size_type index)$/;"	f	class:aThreadGroup
operator []	sdk/aUrl.h	/^		const std::string &operator[](const char * name)const$/;"	f	class:aUrl
operator char	sdk/aTable.h	/^		inline	operator char ()const$/;"	f	class:DBVARTYPE
operator const aRedisCmd&	sdk/aRedisCommand.h	/^		operator const aRedisCmd& ()$/;"	f	class:aRedisCmdMaker
operator const char *	sdk/aTable.h	/^		inline	operator const char *()const$/;"	f	class:DBVARTYPE
operator const void *	sdk/aTable.h	/^		inline	operator const void *()const$/;"	f	class:DBVARTYPE
operator double	sdk/aTable.h	/^		inline	operator double()const$/;"	f	class:DBVARTYPE
operator float	sdk/aTable.h	/^		inline	operator float()const$/;"	f	class:DBVARTYPE
operator int	sdk/aTable.h	/^		inline	operator int () const$/;"	f	class:DBVARTYPE
operator long	sdk/aTable.h	/^		inline	operator long()const$/;"	f	class:DBVARTYPE
operator long long	sdk/aTable.h	/^		inline	operator long long()const$/;"	f	class:DBVARTYPE
operator lua_State *	sdk/aLuaBase.h	/^		operator lua_State *( void )$/;"	f	struct:aLuaBase::aLuaContext
operator short	sdk/aTable.h	/^		inline  operator short()const$/;"	f	class:DBVARTYPE
operator string	sdk/aIni.cpp	/^aIni::operator string() {$/;"	f	class:aIni
operator string	sdk/aIni.cpp	/^iniNode::operator string() {$/;"	f	class:iniNode
operator unsigned char	sdk/aTable.h	/^		inline	operator unsigned char ()const$/;"	f	class:DBVARTYPE
operator unsigned int	sdk/aTable.h	/^		inline	operator unsigned int () const$/;"	f	class:DBVARTYPE
operator unsigned long	sdk/aTable.h	/^		inline	operator unsigned long()const$/;"	f	class:DBVARTYPE
operator unsigned long long	sdk/aTable.h	/^		inline	operator unsigned long long ()const$/;"	f	class:DBVARTYPE
operator unsigned short	sdk/aTable.h	/^		inline	operator unsigned short()const$/;"	f	class:DBVARTYPE
pSocket	sdk/aHttpTask.h	/^		aSocket *pSocket;								\/**< 底层套接口 *\/$/;"	m	class:aHttpTask
packetAppend	sdk/aSocket.h	/^inline unsigned int aSocket::packetAppend(const void * pData,const unsigned int iLen, bufferType & cmdQueue)$/;"	f	class:aSocket
packetAppendNoEnc	sdk/aSocket.h	/^inline unsigned int aSocket::packetAppendNoEnc(const void * pData,const unsigned int iLen, bufferType & cmdQueue)$/;"	f	class:aSocket
packetMinSize	sdk/aSocket.h	/^		inline unsigned int packetMinSize() const{ return PH_LEN ;}$/;"	f	class:aSocket
packetPackEnc	sdk/aSocket.h	/^inline unsigned int aSocket::packetPackEnc(bufferType & cmdQueue,const unsigned int currendCmd,const unsigned int offset \/* = 0 *\/)$/;"	f	class:aSocket
packetPackZip	sdk/aSocket.h	/^inline unsigned int aSocket::packetPackZip(const void * pData,const unsigned int iLen, bufferType & cmdQueue,const bool _compresss \/* = true *\/)$/;"	f	class:aSocket
packetSize	sdk/aSocket.h	/^		inline unsigned int packetSize(const unsigned char * in) const { $/;"	f	class:aSocket
packetUnPack	sdk/aSocket.cpp	/^unsigned int aSocket::packetUnPack(unsigned char * in, const unsigned int iPacketLen,unsigned char * out)$/;"	f	class:aSocket
para	sdk/aEvent.h	/^		BYTE para;$/;"	m	struct:EVENT::stEVENT
parent	sdk/aIni.h	/^		iniNode* parent;$/;"	m	class:iniNode
parent	sdk/aIni.h	/^		string parent;$/;"	m	class:aIni
parse	sdk/aArg.cpp	/^bool aArg::parse(int argc, char* argv[])$/;"	f	class:aArg
parse	sdk/aConfig.cpp	/^bool aConfig::parse(const char * name)$/;"	f	class:aConfig
parse	sdk/aUrl.h	/^		void parse()$/;"	f	class:aUrl
parseCmdLine	sdk/aGlobal.cpp	/^unsigned int aGlobal::parseCmdLine(const char * cmdLine)$/;"	f	class:aGlobal
parseCmdLine	sdk/aGlobal.cpp	/^unsigned int aGlobal::parseCmdLine(const std::string & cmdLine)$/;"	f	class:aGlobal
parseGlobal	sdk/aConfig.cpp	/^bool aConfig::parseGlobal(const xmlNodePtr node)$/;"	f	class:aConfig
parseManager	sdk/aConfig.cpp	/^bool aConfig::parseManager(const xmlNodePtr node)$/;"	f	class:aConfig
parseNormal	sdk/aConfig.cpp	/^bool aConfig::parseNormal(const xmlNodePtr node)$/;"	f	class:aConfig
parser	sdk/aConfig.h	/^	aXMLReader parser;$/;"	m	class:aConfig
path	sdk/aIni.cpp	/^string iniNode::path() {$/;"	f	class:iniNode
perpendicular	sdk/aVec3.cpp	/^inline const aVector3 perpendicular(aVector3 const &vector){$/;"	f
persist	sdk/aRedisClient.cpp	/^int aRedisClient::persist(const AStr& key)$/;"	f	class:aRedisClient
pexpire	sdk/aRedisClient.cpp	/^int aRedisClient::pexpire(const AStr& key, const unsigned int milliseconds)$/;"	f	class:aRedisClient
pexpireat	sdk/aRedisClient.cpp	/^int aRedisClient::pexpireat(const AStr& key, const unsigned int milliseconds_timestamp)$/;"	f	class:aRedisClient
pfnGetBaseMap	sdk/aMsgCallBack.h	/^	const stAgeMsgMap* (* pfnGetBaseMap)(); $/;"	m	struct:stAgeMsgMap
ping	sdk/aRedisClient.cpp	/^bool aRedisClient::ping()$/;"	f	class:aRedisClient
pool	sdk/aHttpTaskPool.cpp	/^		aHttpTaskPool *pool;		\/**< 所属的池 *\/$/;"	m	class:aHttpThread	file:
pool	sdk/aTCPClientPool.cpp	/^		aTCPClientPool * pool;$/;"	m	class:aCheckConnThread	file:
pool	sdk/aTCPClientPool.cpp	/^		aTCPClientPool *pool;$/;"	m	class:aCkeckWaitThread	file:
pool	sdk/aTCPClientPool.cpp	/^		aTCPClientPool *pool;$/;"	m	class:aTCPClientThread	file:
pool	sdk/aTCPTaskPool.cpp	/^		aTCPTaskPool *pool;$/;"	m	class:aOkayThread	file:
pool	sdk/aTCPTaskPool.cpp	/^		aTCPTaskPool *pool;$/;"	m	class:aRecycleThread	file:
pool	sdk/aTCPTaskPool.cpp	/^		aTCPTaskPool *pool;$/;"	m	class:aSyncThread	file:
pool	sdk/aTCPTaskPool.cpp	/^		aTCPTaskPool *pool;$/;"	m	class:aVerifyThread	file:
pop	sdk/aLuaBase.cpp	/^aLuaBase::table aLuaBase::pop(lua_State *L)$/;"	f	class:aLuaBase
pop	sdk/aLuaBase.cpp	/^void aLuaBase::pop(lua_State *L)$/;"	f	class:aLuaBase
pop	sdk/aLuaBase.h	/^		T pop(lua_State *L) { T t = read<T>(L, -1); lua_pop(L, 1); return t; }$/;"	f	namespace:aLuaBase
port	sdk/aGlobalClient.h	/^		WORD port;$/;"	m	class:GlobalClient
port	sdk/aMTCPService.h	/^	unsigned short port;$/;"	m	struct:stAcceptInfo
port	sdk/aTCPClient.h	/^		const DWORD port;$/;"	m	class:aTCPClient
prepareString	sdk/aIni.cpp	/^void iniNode::prepareString(string &s) {$/;"	f	class:iniNode
printError	sdk/aLuaBase.cpp	/^void aLuaBase::printError(lua_State *L, const char* fmt, ...)$/;"	f	class:aLuaBase
psetex	sdk/aRedisClient.cpp	/^bool aRedisClient::psetex(const AStr& key, const AStr& value, const int milliseconds)$/;"	f	class:aRedisClient
pstrIP	sdk/aGlobalClient.h	/^		char pstrIP[MAX_IPLENGTH];$/;"	m	class:GlobalClient
ptr2lua	sdk/aLuaBase.h	/^		struct ptr2lua { static void invoke(lua_State *L, T* input){ if(input) new(lua_newuserdata(L, sizeof(ptr2user<T>))) ptr2user<T>(input); else lua_pushnil(L); } };$/;"	s	namespace:aLuaBase
ptr2user	sdk/aLuaBase.h	/^		ptr2user(T* t) : user((void*)t) {}$/;"	f	struct:aLuaBase::ptr2user
ptr2user	sdk/aLuaBase.h	/^		struct ptr2user : user$/;"	s	namespace:aLuaBase
pttl	sdk/aRedisClient.cpp	/^int aRedisClient::pttl(const AStr& key)$/;"	f	class:aRedisClient
publish	sdk/aRedisClient.cpp	/^int aRedisClient::publish(const AStr& channel, const AStr& message)$/;"	f	class:aRedisClient
push	sdk/aEntryM.h	/^		inline bool push(aEntry * e)$/;"	f	class:aEntryTempID
push	sdk/aEntryM.h	/^		inline bool push(aEntry *& e)$/;"	f	class:aEntryID
push	sdk/aEntryM.h	/^		inline bool push(aEntry *&e)$/;"	f	class:aEntryName
push	sdk/aEntryM.h	/^		inline bool push(aEntry *e)$/;"	f	class:aMultiEntryName
push	sdk/aEntryM.h	/^	inline bool push(aEntry * & e) {return true;}$/;"	f	class:aEntryNone
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, aLuaBase::table ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, bool ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, char ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, char* ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, const char* ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, const std::string& ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, double ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, float ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, int ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, long long ret)			$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, long ret)			$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, long ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, lua_value* ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, short ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, std::string ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, unsigned char ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, unsigned int ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, unsigned long long ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, unsigned long ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.cpp	/^void aLuaBase::push(lua_State *L, unsigned short ret)$/;"	f	class:aLuaBase
push	sdk/aLuaBase.h	/^		void push(lua_State *L, T ret)					{ type2lua<T>(L, ret); }$/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (*func)())$/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (*func)(T1))$/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (*func)(T1,T2))$/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (*func)(T1,T2,T3))$/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (*func)(T1,T2,T3,T4))$/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (*func)(T1,T2,T3,T4,T5))$/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)() const) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)()) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1) const) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1)) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2) const) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2)) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3) const) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3)) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4) const) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4)) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4,T5) const) $/;"	f	namespace:aLuaBase
push_functor	sdk/aLuaBase.h	/^		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4,T5)) $/;"	f	namespace:aLuaBase
push_meta	sdk/aLuaBase.cpp	/^void aLuaBase::push_meta(lua_State *L, const char* name)$/;"	f	class:aLuaBase
put	sdk/aMemStream.h	/^		inline void put(const unsigned char * buf, const unsigned int size)$/;"	f	class:aMemStream
put	sdk/aTCPClientPool.cpp	/^bool aTCPClientPool::put(aTCPClient * task)$/;"	f	class:aTCPClientPool
put	sdk/aTable.h	/^			void put( const X & bdata)$/;"	f	class:DBVARTYPE
put	sdk/aTable.h	/^		inline void put(aRecord * rec)$/;"	f	class:aRecordSet
put	sdk/aTable.h	/^		inline void put(std::string colName,const  char & value)$/;"	f	class:aRecord
put	sdk/aTable.h	/^		inline void put(std::string colName,const  void  *value,const unsigned int  size)$/;"	f	class:aRecord
put	sdk/aTable.h	/^		inline void put(std::string colName,const T& value)$/;"	f	class:aRecord
put	sdk/aTable.h	/^		inline void put(std::string colName,const unsigned char & value)$/;"	f	class:aRecord
put	sdk/aTable.h	/^		void put( const void *  data, const unsigned int len)$/;"	f	class:DBVARTYPE
put	sdk/aUniqueID.h	/^	void put( T id)$/;"	f	class:aUniqueID
putHandle	sdk/aDBConnectPool.cpp	/^bool aDBConnectPool::putHandle(DBHANDLE handle)$/;"	f	class:aDBConnectPool
putHandle	sdk/aRedisConnectPool.cpp	/^bool aRedisConnectPool::putHandle(REDIS_HANDLE handle)$/;"	f	class:aRedisConnectPool
quit	sdk/aRedisClient.cpp	/^bool aRedisClient::quit()$/;"	f	class:aRedisClient
randBetween	sdk/aFunc.h	/^			static int randBetween(int min,int max)$/;"	f	class:Age::aMisc
rdBuf	sdk/aMemStream.h	/^		inline unsigned char  * rdBuf()$/;"	f	class:aMemStream
rdFlip	sdk/aMemStream.h	/^		inline void rdFlip( unsigned int size)$/;"	f	class:aMemStream
rdReady	sdk/aMemStream.h	/^		inline bool rdReady() const$/;"	f	class:aMemStream
rdSize	sdk/aMemStream.h	/^		inline unsigned int rdSize() const$/;"	f	class:aMemStream
rd_count	sdk/aRWLock.h	/^		unsigned int rd_count;$/;"	m	class:aRWLock
rd_msec	sdk/aSocket.h	/^		int rd_msec;$/;"	m	class:aSocket
rdlock	sdk/aRWLock.h	/^		inline void rdlock()$/;"	f	class:aRWLock
read	sdk/aLuaBase.cpp	/^aLuaBase::table aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^bool aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^char aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^char* aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^const char* aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^double aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^float aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^int aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^long aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^long long aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^short aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^std::string aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^unsigned char aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^unsigned int aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^unsigned long aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^unsigned long long aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^unsigned short aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.cpp	/^void aLuaBase::read(lua_State *L, int index)$/;"	f	class:aLuaBase
read	sdk/aLuaBase.h	/^		T read(lua_State *L, int index)				{ return lua2type<T>(L, index); }$/;"	f	namespace:aLuaBase
readAll	sdk/aSerialization.h	/^		bool readAll(const char * fileName )$/;"	f	class:DataSerialization
reconn	sdk/aTCPClient.cpp	/^void aTCPClient::reconn()$/;"	f	class:aTCPClient
reconnect	sdk/aRedisClient.cpp	/^bool aRedisClient::reconnect()$/;"	f	class:aRedisClient
recvToBuf	sdk/aSocket.cpp	/^int aSocket::recvToBuf()$/;"	f	class:aSocket
recvToBufNoPoll	sdk/aSocket.cpp	/^int aSocket::recvToBufNoPoll()$/;"	f	class:aSocket
recvToCmd	sdk/aSocket.cpp	/^int aSocket::recvToCmd(void * pstrCmd, const int iCmd,const bool wait)$/;"	f	class:aSocket
recvToCmdNoPoll	sdk/aSocket.cpp	/^int aSocket::recvToCmdNoPoll(void * pstrCmd,const int iCmdLen)$/;"	f	class:aSocket
recvToNoPackNoPoll	sdk/aSocket.cpp	/^int aSocket::recvToNoPackNoPoll(void * pstrCmd ,const unsigned int iCmdLen)$/;"	f	class:aSocket
recycleConn	sdk/aTCPClient.h	/^		virtual void recycleConn(){};$/;"	f	class:aTCPClient
recycleConn	sdk/aTCPTask.h	/^		virtual int recycleConn()$/;"	f	class:aUDPTask
recycleConn	sdk/aUDPTask.h	/^		virtual int recycleConn()$/;"	f	class:aTCPTask
recycleThread	sdk/aTCPTaskPool.h	/^		aRecycleThread *recycleThread;							\/**< 连接回收线程> *\/$/;"	m	class:aTCPTaskPool
recyle	sdk/aTCPClient.h	/^			recyle = 3$/;"	e	enum:aTCPClient::ConnectState
recyle	sdk/aTCPTask.h	/^			recyle = 4$/;"	e	enum:aUDPTask::aUDPTask_State
recyle	sdk/aUDPTask.h	/^			recyle = 4$/;"	e	enum:aTCPTask::aTCPTask_State
redis	sdk/aRedisConnectPool.h	/^        aRedisClient * redis; \/**<mysql对象封装*\/$/;"	m	struct:stRedis
ref2lua	sdk/aLuaBase.h	/^		struct ref2lua { static void invoke(lua_State *L, T& input){ new(lua_newuserdata(L, sizeof(ref2user<T>))) ref2user<T>(input); } };$/;"	s	namespace:aLuaBase
ref2user	sdk/aLuaBase.h	/^		ref2user(T& t) : user(&t) {}$/;"	f	struct:aLuaBase::ref2user
ref2user	sdk/aLuaBase.h	/^		struct ref2user : user$/;"	s	namespace:aLuaBase
reflect	sdk/aVec3.cpp	/^inline aVector3 reflect(aVector3 const& vec1, const aVector3& vec2 )$/;"	f
refresh	sdk/aIni.cpp	/^void aIni::refresh() {$/;"	f	class:aIni
refresh	sdk/aNineScreenIndex.cpp	/^bool aNineScreenIndex<MAX_X,MAX_Y>::refresh(aSceneEntry * entry,const DWORD newIndex)$/;"	f	class:aNineScreenIndex
refresh	sdk/aNineScreenIndex.cpp	/^bool aNineScreenIndex<MAX_X,MAX_Y>::refresh(aSceneEntry * entry,const aPos & newPos)$/;"	f	class:aNineScreenIndex
regTable	sdk/aTableDef.cpp	/^bool aTableDef::regTable(const char * tableName,dbCol *db,int size)$/;"	f	class:aTableDef
reg_datafunc	sdk/aShareMem.cpp	/^void aShareMem::reg_datafunc(unsigned short data_id,LPRESUMECALLBACK call)$/;"	f	class:aShareMem
releaseInstance	sdk/aSingleton.h	/^	static void releaseInstance()$/;"	f	class:aSingleton
reloadConfig	sdk/aService.h	/^		virtual void reloadConfig(){};$/;"	f	class:aService
remove	sdk/aEntryBase.h	/^void aComponentEntity::remove()$/;"	f	class:aComponentEntity
remove	sdk/aEntryM.h	/^		inline void remove(aEntry * e)$/;"	f	class:aEntryID
remove	sdk/aEntryM.h	/^		inline void remove(aEntry * e)$/;"	f	class:aEntryName
remove	sdk/aEntryM.h	/^		inline void remove(aEntry * e)$/;"	f	class:aEntryTempID
remove	sdk/aEntryM.h	/^		inline void remove(aEntry * e)$/;"	f	class:aMultiEntryName
remove	sdk/aEntryM.h	/^		inline void remove(const keyT &key)$/;"	f	class:LimitHash
remove	sdk/aEntryM.h	/^		inline void remove(const keyT &key)$/;"	f	class:MultiHash
remove	sdk/aEntryM.h	/^	inline void remove(aEntry *&e){}$/;"	f	class:aEntryNone
remove	sdk/aHttpTaskPool.cpp	/^		void remove(aHttpTaskContainer::iterator &it)$/;"	f	class:aHttpThread
remove	sdk/aHttpTaskPool.cpp	/^		void remove(aHttpTaskP &task)$/;"	f	class:aHttpThread
remove	sdk/aTCPClientPool.cpp	/^		void remove(aTCPClient *task)$/;"	f	class:aCkeckWaitThread	file:
remove	sdk/aTCPClientPool.cpp	/^		void remove(aTCPClient_IT &it)$/;"	f	class:aCkeckWaitThread	file:
remove	sdk/aTCPClientPool.cpp	/^		void remove(aTCPClient_IT &it)$/;"	f	class:aTCPClientThread	file:
remove	sdk/aTCPTaskPool.cpp	/^		void remove(aTCPTask *task)$/;"	f	class:aVerifyThread	file:
remove	sdk/aTCPTaskPool.cpp	/^		void remove(aTCPTask_IT &it)$/;"	f	class:aOkayThread	file:
remove	sdk/aTCPTaskPool.cpp	/^		void remove(aTCPTask_IT &it)$/;"	f	class:aVerifyThread	file:
removeArg	sdk/aArg.cpp	/^void aArg::removeArg()$/;"	f	class:aArg
removeConsoleLog	sdk/aLogger.cpp	/^void aLogger::removeConsoleLog()$/;"	f	class:aLogger
removeConst	sdk/aLuaBase.h	/^		struct removeConst { typedef A type; };$/;"	s	namespace:aLuaBase
removeConst	sdk/aLuaBase.h	/^		struct removeConst<const A> { typedef A type; };$/;"	s	namespace:aLuaBase
removeEntry	sdk/aEntryM.h	/^		inline void removeEntry(aEntry * e)$/;"	f	class:aEntryM
removeEntry	sdk/aNineScreenIndex.cpp	/^void  aNineScreenIndex<MAX_X,MAX_Y>::removeEntry(aSceneEntry * entry)$/;"	f	class:aNineScreenIndex
removeEntryByID	sdk/aSerialization.h	/^		void removeEntryByID(DWORD id)$/;"	f	class:DataSerialization
removeEntryByName	sdk/aSerialization.h	/^		void removeEntryByName(const char * name){$/;"	f	class:DataSerialization
removeEntry_Pred	sdk/aEntryM.h	/^struct removeEntry_Pred$/;"	s
removeEntry_if	sdk/aEntryM.h	/^			inline void removeEntry_if(removeEntry_Pred<YourEntry> & pred)$/;"	f	class:aEntryM
removeFromContainer	sdk/aTCPClient.h	/^		virtual void removeFromContainer(){};$/;"	f	class:aTCPClient
removeFromContainer	sdk/aTCPTask.h	/^		virtual void removeFromContainer(){}$/;"	f	class:aUDPTask
removeFromContainer	sdk/aUDPTask.h	/^		virtual void removeFromContainer(){}$/;"	f	class:aTCPTask
removeLocalFileLog	sdk/aLogger.cpp	/^void aLogger::removeLocalFileLog(const std::string & file)$/;"	f	class:aLogger
removeUser	sdk/aUserM.cpp	/^void aUserM::removeUser(aUser *user)$/;"	f	class:aUserM
removeUser_if	sdk/aUserM.h	/^	void removeUser_if(removeEntry_Pred<YOURUSERENTRY> &pred)$/;"	f	class:aUserM
removed	sdk/aEntryM.h	/^	std::vector<YourEntry *> removed;$/;"	m	struct:removeEntry_Pred
reset	sdk/aMemStream.h	/^		inline void reset()$/;"	f	class:aMemStream
reset	sdk/aTime.h	/^		void reset(const unsigned long how_long,const aRealTime & cur)$/;"	f	class:aTimer
reset	sdk/aTimeWarp.h	/^		void reset(const bool force_print,aRealTime * cur = NULL)$/;"	f	class:FunctionTime
resetAll	sdk/aTCPClientPool.cpp	/^void aTCPClientPool::resetAll()$/;"	f	class:aTCPClientPool
resetState	sdk/aTCPClient.cpp	/^void aTCPClient::resetState()$/;"	f	class:aTCPClient
resetState	sdk/aTCPTask.cpp	/^void aUDPTask::resetState()$/;"	f	class:aUDPTask
resetState	sdk/aUDPTask.cpp	/^void aTCPTask::resetState()$/;"	f	class:aTCPTask
restoreTimeZone	sdk/aTime.cpp	/^void aRealTime::restoreTimeZone(const std::string & strtz)$/;"	f	class:aRealTime
resultException	sdk/aRedisResult.cpp	/^void aRedisResult::resultException(redisReply* reply,const char * function)$/;"	f	class:aRedisResult
resumeSHM	sdk/aShareMem.cpp	/^int aShareMem::resumeSHM( int key )$/;"	f	class:aShareMem
rpop	sdk/aRedisClient.cpp	/^int aRedisClient::rpop(const AStr& key, AStr& value)$/;"	f	class:aRedisClient
rpoplpush	sdk/aRedisClient.cpp	/^int aRedisClient::rpoplpush(const AStr& source, const AStr& destination, AVec<AStr>& values)$/;"	f	class:aRedisClient
rpush	sdk/aRedisClient.cpp	/^int aRedisClient::rpush(const AStr& key, const AVec<AStr>& values)$/;"	f	class:aRedisClient
rpushx	sdk/aRedisClient.cpp	/^int aRedisClient::rpushx(const AStr& key, const AStr& value)$/;"	f	class:aRedisClient
run	sdk/aDebugService.cpp	/^void aDebugService::run()$/;"	f	class:aDebugService
run	sdk/aGlobalClient.cpp	/^void GlobalClient::run()$/;"	f	class:GlobalClient
run	sdk/aHttpTaskPool.cpp	/^void aHttpThread::run()$/;"	f	class:aHttpThread
run	sdk/aMiniTCPClient.cpp	/^void aMiniTCPClient::run()$/;"	f	class:aMiniTCPClient
run	sdk/aPython.h	/^		PyObject * run(PyObject * pModule, const char * fun,PyObject * args)$/;"	f	class:aPython
run	sdk/aTCPClientPool.cpp	/^		virtual void run()$/;"	f	class:aCheckConnThread
run	sdk/aTCPClientPool.cpp	/^void aCkeckWaitThread::run()$/;"	f	class:aCkeckWaitThread
run	sdk/aTCPClientPool.cpp	/^void aTCPClientThread::run()$/;"	f	class:aTCPClientThread
run	sdk/aTCPTaskPool.cpp	/^void aOkayThread::run()$/;"	f	class:aOkayThread
run	sdk/aTCPTaskPool.cpp	/^void aRecycleThread::run()$/;"	f	class:aRecycleThread
run	sdk/aTCPTaskPool.cpp	/^void aSyncThread::run()$/;"	f	class:aSyncThread
run	sdk/aTCPTaskPool.cpp	/^void aVerifyThread::run()$/;"	f	class:aVerifyThread
rwlock	sdk/aRWLock.h	/^		aRWLock & rwlock;$/;"	m	class:aRWLockAutoScopeRW
rwlock	sdk/aRWLock.h	/^		aRWLock &rwlock;$/;"	m	class:aRWLockAutoScopeRD
rwlock	sdk/aRWLock.h	/^		pthread_rwlock_t rwlock;$/;"	m	class:aRWLock
rwlock	sdk/aSerialization.h	/^		aRWLock rwlock;$/;"	m	class:DataSerialization
rwlock	sdk/aThread.h	/^		aRWLock rwlock;\/**<读写锁*\/$/;"	m	class:aThreadGroup
s_bFirst	sdk/aLogger.cpp	/^static bool s_bFirst = true;$/;"	v	file:
sadd	sdk/aRedisClient.cpp	/^int aRedisClient::sadd(const AStr& key, const AVec<AStr>& members)$/;"	f	class:aRedisClient
saveTimeZone	sdk/aTime.cpp	/^void aRealTime::saveTimeZone(std::string & strtz)$/;"	f	class:aRealTime
scard	sdk/aRedisClient.cpp	/^int aRedisClient::scard(const AStr& key)$/;"	f	class:aRedisClient
sdiff	sdk/aRedisClient.cpp	/^int aRedisClient::sdiff(const AVec<AStr>& keys, ASet<AStr>& s)$/;"	f	class:aRedisClient
sdiffstore	sdk/aRedisClient.cpp	/^int aRedisClient::sdiffstore(const AStr& destination, const AVec<AStr>& keys)$/;"	f	class:aRedisClient
sec	sdk/aTime.h	/^		time_t sec () const{$/;"	f	class:atmTime
sec	sdk/aTime.h	/^		unsigned long sec() const$/;"	f	class:aRealTime
secs	sdk/aTime.h	/^		time_t secs;$/;"	m	class:atmTime
seedp	sdk/Age.cpp	/^	__thread unsigned int seedp = 0;$/;"	m	namespace:Age	file:
select	sdk/aRedisClient.cpp	/^bool aRedisClient::select()$/;"	f	class:aRedisClient
selectByLakh	sdk/aFunc.h	/^			static bool selectByLakh(const DWORD lakh)$/;"	f	class:Age::aMisc
selectByOdds	sdk/aFunc.h	/^			static bool selectByOdds(const DWORD upNum,const DWORD downNum)$/;"	f	class:Age::aMisc
selectByOneHM	sdk/aFunc.h	/^			static bool selectByOneHM(const DWORD lakh)$/;"	f	class:Age::aMisc
selectByPercent	sdk/aFunc.h	/^			static bool selectByPercent(const DWORD percent)$/;"	f	class:Age::aMisc
selectByTenTh	sdk/aFunc.h	/^			static bool selectByTenTh(const DWORD tenth)$/;"	f	class:Age::aMisc
selectByt_Odds	sdk/aFunc.h	/^			static bool selectByt_Odds(const odds_t &odds)$/;"	f	class:Age::aMisc
sendCmd	sdk/aHttpTask.cpp	/^bool aHttpTask::sendCmd(const void *pstrCmd, int nCmdLen)$/;"	f	class:aHttpTask
sendCmd	sdk/aMiniTCPClient.cpp	/^bool aMiniTCPClient::sendCmd(std::string & msg)$/;"	f	class:aMiniTCPClient
sendCmd	sdk/aRedisClient.cpp	/^redisReply * aRedisClient::sendCmd( const aRedisCmd & cmd)$/;"	f	class:aRedisClient
sendCmd	sdk/aSocket.cpp	/^bool aSocket::sendCmd(const std::string & send,const bool buffer )$/;"	f	class:aSocket
sendCmd	sdk/aSocket.cpp	/^bool aSocket::sendCmd(const void * pstrCmd, const int iCmd,const bool buffer \/* =false *\/)$/;"	f	class:aSocket
sendCmd	sdk/aTCPClient.cpp	/^bool aTCPClient::sendCmd(std::string &msg,const bool _ifBuffer \/* = false *\/)$/;"	f	class:aTCPClient
sendCmd	sdk/aTCPTask.cpp	/^bool aUDPTask::sendCmd(std::string & msg)$/;"	f	class:aUDPTask
sendCmd	sdk/aUDPTask.cpp	/^bool aTCPTask::sendCmd(std::string & msg)$/;"	f	class:aTCPTask
sendCmdNoPack	sdk/aSocket.cpp	/^bool aSocket::sendCmdNoPack(const void * pstrCmd, const int iCmd,const bool buffer \/* =false *\/)$/;"	f	class:aSocket
sendCmdNoPack	sdk/aSocket.cpp	/^bool aSocket::sendCmdNoPack(std::string &out,const bool buffer)$/;"	f	class:aSocket
sendCmdNoPack	sdk/aTCPTask.cpp	/^bool aUDPTask::sendCmdNoPack(std::string & msg)$/;"	f	class:aUDPTask
sendCmdNoPack	sdk/aUDPTask.cpp	/^bool aTCPTask::sendCmdNoPack(std::string & msg)$/;"	f	class:aTCPTask
sendRawData	sdk/aSocket.cpp	/^int aSocket::sendRawData(const void * pBuffer,const int iSize)$/;"	f	class:aSocket
sendRawDataIM	sdk/aSocket.cpp	/^bool aSocket::sendRawDataIM(const void * pBuffer,const int iSize)$/;"	f	class:aSocket
sendRawDataNoPoll	sdk/aSocket.cpp	/^int aSocket::sendRawDataNoPoll(const void * pBuffer,const int iSize)$/;"	f	class:aSocket
serviceCallback	sdk/aMNetService.cpp	/^bool aMNetService::serviceCallback()$/;"	f	class:aMNetService
serviceCallback	sdk/aNetService.cpp	/^bool aNetService::serviceCallback()$/;"	f	class:aNetService
serviceCallback	sdk/aUDPNetServer.cpp	/^bool aUDPNetService::serviceCallback()$/;"	f	class:aUDPNetService
serviceName	sdk/aMNetService.h	/^		std::string serviceName;$/;"	m	class:aMNetService
serviceName	sdk/aNetService.h	/^		std::string serviceName;$/;"	m	class:aNetService
serviceName	sdk/aUDPNetServer.h	/^		std::string serviceName;$/;"	m	class:aUDPNetService
set	sdk/aBits.h	/^		bool set(DWORD bit)$/;"	f	class:aBits
set	sdk/aLuaBase.h	/^			void set(const char* name, T object)$/;"	f	struct:aLuaBase::table
set	sdk/aLuaBase.h	/^			void set(const char* name, T object)$/;"	f	struct:aLuaBase::table_obj
set	sdk/aLuaBase.h	/^			void set(int index, T object)$/;"	f	struct:aLuaBase::table
set	sdk/aLuaBase.h	/^			void set(int index, T object)$/;"	f	struct:aLuaBase::table_obj
set	sdk/aLuaBase.h	/^		void set(lua_State *L)	{ read<T*>(L,1)->*(_var) = read<V>(L, 3);	}$/;"	f	struct:aLuaBase::mem_var
set	sdk/aLuaBase.h	/^		void set(lua_State* L, const char* name, T object)$/;"	f	namespace:aLuaBase
set	sdk/aRedisClient.cpp	/^bool aRedisClient::set(const AStr& key, const AStr& value)$/;"	f	class:aRedisClient
setAutoCommit	sdk/aDBConnectPool.cpp	/^bool aMysqlDB::setAutoCommit()$/;"	f	class:aMysqlDB
setDecMask	sdk/aSocket.h	/^		inline void setDecMask(const unsigned int m){enc.setDecMask(m);}$/;"	f	class:aSocket
setEncMask	sdk/aSocket.h	/^		inline void setEncMask(const unsigned int m){enc.setEncMask(m);}$/;"	f	class:aSocket
setEncMethod	sdk/aSocket.h	/^		inline void setEncMethod( CEnctypt::encMethod m ){enc.setEncMask(m);}$/;"	f	class:aSocket
setExist	sdk/aIni.cpp	/^void iniNode::setExist(bool f) {$/;"	f	class:iniNode
setExtIP	sdk/aNetService.cpp	/^void  aNetService::setExtIP(const char *ip){$/;"	f	class:aNetService
setExtIP	sdk/aUDPNetServer.cpp	/^void  aUDPNetService::setExtIP(const char *ip){$/;"	f	class:aUDPNetService
setExtPort	sdk/aNetService.cpp	/^void  aNetService::setExtPort(DWORD port){$/;"	f	class:aNetService
setExtPort	sdk/aUDPNetServer.cpp	/^void  aUDPNetService::setExtPort(DWORD port){$/;"	f	class:aUDPNetService
setFlag	sdk/aSocket.h	/^		inline void setFlag(unsigned int _f) { bitmask |= _f; }$/;"	f	class:aSocket
setIP	sdk/aMiniTCPClient.cpp	/^void aMiniTCPClient::setIP(const char *ip)$/;"	f	class:aMiniTCPClient
setIP	sdk/aNetService.cpp	/^void  aNetService::setIP(const char * ip){$/;"	f	class:aNetService
setIP	sdk/aUDPNetServer.cpp	/^void  aUDPNetService::setIP(const char * ip){$/;"	f	class:aUDPNetService
setLengthSquared	sdk/aVec3.cpp	/^inline void setLengthSquared(aVector3& vector, float const&num)$/;"	f
setLevel	sdk/aLogger.cpp	/^void aLogger::setLevel(const aLevel * aLevelPtr)$/;"	f	class:aLogger
setLevel	sdk/aLogger.cpp	/^void aLogger::setLevel(const std::string & level)$/;"	f	class:aLogger
setMagnitude	sdk/aVec3.cpp	/^inline void setMagnitude(aVector3& vec2, float const&num)$/;"	f
setMeta	sdk/aLuaBase.cpp	/^int aLuaBase::setMeta(lua_State *L)$/;"	f	class:aLuaBase
setName	sdk/aLogger.cpp	/^void aLogger::setName(const std::string & setName)$/;"	f	class:aLogger
setNetType	sdk/aNetService.cpp	/^void aNetService::setNetType(DWORD netType)$/;"	f	class:aNetService
setNetType	sdk/aUDPNetServer.cpp	/^void aUDPNetService::setNetType(DWORD netType)$/;"	f	class:aUDPNetService
setNonblock	sdk/aSocket.cpp	/^bool aSocket::setNonblock()$/;"	f	class:aSocket
setPort	sdk/aMiniTCPClient.cpp	/^void aMiniTCPClient::setPort(unsigned short port)$/;"	f	class:aMiniTCPClient
setPort	sdk/aNetService.cpp	/^void  aNetService::setPort(DWORD port){$/;"	f	class:aNetService
setPort	sdk/aUDPNetServer.cpp	/^void  aUDPNetService::setPort(DWORD port){$/;"	f	class:aUDPNetService
setPos	sdk/aSceneEntry.h	/^		bool setPos(const aPos & screenWH,const aPos & newPos)$/;"	f	class:aSceneEntry
setProperty	sdk/aGlobal.cpp	/^void aGlobal::setProperty(const std::string &key,const std::string &value)$/;"	f	class:aGlobal
setReadTimeOut	sdk/aSocket.h	/^		inline void setReadTimeOut(const int msec) { rd_msec = msec ;}$/;"	f	class:aSocket
setRotation	sdk/aSceneEntry.h	/^		inline void setRotation(const aVector3 & rotation)$/;"	f	class:aSceneEntry
setScreenIndex	sdk/aSceneEntry.h	/^		inline void setScreenIndex(const DWORD index)$/;"	f	class:aSceneEntry
setServerID	sdk/aNetService.cpp	/^void  aNetService::setServerID(DWORD id){$/;"	f	class:aNetService
setServerID	sdk/aUDPNetServer.cpp	/^void  aUDPNetService::setServerID(DWORD id){$/;"	f	class:aUDPNetService
setState	sdk/aSceneEntry.h	/^		inline void setState(const SceneEntryState & state)$/;"	f	class:aSceneEntry
setState	sdk/aTCPClient.cpp	/^void aTCPClient::setState(const ConnectState state)$/;"	f	class:aTCPClient
setState	sdk/aTCPTask.cpp	/^void aUDPTask::setState(const aUDPTask_State state)$/;"	f	class:aUDPTask
setState	sdk/aTCPTaskPool.h	/^		void setState(const int state)$/;"	f	class:aTCPTaskPool
setState	sdk/aUDPTask.cpp	/^void aTCPTask::setState(const aTCPTask_State state)$/;"	f	class:aTCPTask
setTick	sdk/aTCPClient.cpp	/^void aTCPClient::setTick()$/;"	f	class:aTCPClient
setTick	sdk/aTCPTask.cpp	/^void aUDPTask::setTick()$/;"	f	class:aUDPTask
setTick	sdk/aUDPTask.cpp	/^void aTCPTask::setTick()$/;"	f	class:aTCPTask
setType	sdk/aNetService.cpp	/^void  aNetService::setType(DWORD type){$/;"	f	class:aNetService
setType	sdk/aUDPNetServer.cpp	/^void  aUDPNetService::setType(DWORD type){$/;"	f	class:aUDPNetService
setUnique	sdk/aTCPTask.cpp	/^void aUDPTask::setUnique()$/;"	f	class:aUDPTask
setUnique	sdk/aUDPTask.cpp	/^void aTCPTask::setUnique()$/;"	f	class:aTCPTask
setUsleepTime	sdk/aMiniTCPClient.cpp	/^void aMiniTCPClient::setUsleepTime(const unsigned long utime)$/;"	f	class:aMiniTCPClient
setUsleepTime	sdk/aTCPClientPool.h	/^		void setUsleepTime(unsigned long time)$/;"	f	class:aTCPClientPool
setUsleepTime	sdk/aTCPTaskPool.h	/^		static void  setUsleepTime(const unsigned long time)$/;"	f	class:aTCPTaskPool
setValue	sdk/aIni.cpp	/^void iniNode::setValue(string s) {$/;"	f	class:iniNode
setVerified	sdk/aGlobalClient.h	/^		void setVerified(bool verified)$/;"	f	class:GlobalClient
setWriteTimeOit	sdk/aSocket.h	/^		inline void setWriteTimeOit(const int mesc) { wr_msec = mesc;}$/;"	f	class:aSocket
set_key_des	sdk/aSocket.h	/^		inline void set_key_des(const_DES_cblock * key){enc.set_key_des(key);}$/;"	f	class:aSocket
set_key_rc5	sdk/aSocket.h	/^		inline void set_key_rc5(const unsigned char * data,int iLen,int rounds = RC5_8_ROUNDS) {enc.set_key_rc5(data,iLen,rounds);}$/;"	f	class:aSocket
setbit	sdk/aRedisClient.cpp	/^int aRedisClient::setbit(const AStr& key, const int offset, const int value)$/;"	f	class:aRedisClient
setex	sdk/aRedisClient.cpp	/^bool aRedisClient::setex(const AStr& key, const AStr& value, const int seconds)$/;"	f	class:aRedisClient
setinserted	sdk/aSceneEntry.h	/^		inline void setinserted(bool inscence = true)$/;"	f	class:aSceneEntry
setmsecs	sdk/aTime.h	/^		void setmsecs( unsigned long long data)$/;"	f	class:aRealTime
setnx	sdk/aRedisClient.cpp	/^int aRedisClient::setnx(const AStr& key, const AStr& value)$/;"	f	class:aRedisClient
setrange	sdk/aRedisClient.cpp	/^int aRedisClient::setrange(const AStr& key, const int offset, const AStr& value)$/;"	f	class:aRedisClient
setsec	sdk/aTime.h	/^		void setsec(const time_t &value)$/;"	f	class:atmTime
shallow_assign	sdk/aRedisCommand.h	/^	void shallow_assign(const AVec<AStr>& args)$/;"	f	struct:aRedisCmd
sign	sdk/aVec3.cpp	/^inline const int sign(const aVector3& vec1,const aVector3& vec2){$/;"	f
signal	sdk/aCond.cpp	/^void aCond::signal()$/;"	f	class:aCond
sinter	sdk/aRedisClient.cpp	/^int aRedisClient::sinter(const AVec<AStr>& keys, ASet<AStr>& s)$/;"	f	class:aRedisClient
sinterstore	sdk/aRedisClient.cpp	/^int aRedisClient::sinterstore(const AStr& destination, const AVec<AStr>& keys)$/;"	f	class:aRedisClient
sismember	sdk/aRedisClient.cpp	/^int aRedisClient::sismember(const AStr& key, const AStr& member)$/;"	f	class:aRedisClient
size	sdk/aDBConnectPool.cpp	/^unsigned int aDBConnectPool::size()$/;"	f	class:aDBConnectPool
size	sdk/aEntryM.h	/^		inline unsigned int size()$/;"	f	class:LimitHash
size	sdk/aEntryM.h	/^		inline unsigned int size()$/;"	f	class:MultiHash
size	sdk/aEntryM.h	/^		inline unsigned int size()$/;"	f	class:aEntryM
size	sdk/aRedisConnectPool.cpp	/^unsigned int aRedisConnectPool::size()$/;"	f	class:aRedisConnectPool
size	sdk/aTCPClientPool.cpp	/^		const aTCPClientConntainer::size_type size() const$/;"	f	class:aTCPClientThread
size	sdk/aTCPTaskPool.cpp	/^		const aTCPTaskContainer::size_type size() const$/;"	f	class:aOkayThread
size	sdk/aTable.h	/^		inline unsigned int size()$/;"	f	class:aRecordSet
size	sdk/aTable.h	/^		inline unsigned int size()const$/;"	f	class:DBVARTYPE
size	sdk/aTableDef.h	/^	unsigned int size;\/**<data size*\/$/;"	m	struct:dbCol
size	sdk/aThread.h	/^		const Container::size_type size()$/;"	f	class:aThreadGroup
size	sdk/aTimeWarp.h	/^		int size()$/;"	f	class:FunctionTime
sleep	sdk/aThread.h	/^		static void sleep( unsigned long sec)$/;"	f	class:aThread
slerp	sdk/aVec3.cpp	/^inline aVector3 slerp(aVector3 const& vec1, aVector3 const&vec2, float const& num)$/;"	f
smembers	sdk/aRedisClient.cpp	/^int aRedisClient::smembers(const AStr& key, ASet<AStr>& members)$/;"	f	class:aRedisClient
smove	sdk/aRedisClient.cpp	/^int aRedisClient::smove(const AStr& source, const AStr& destination, const AStr& member)$/;"	f	class:aRedisClient
snd_queue_size	sdk/aSocket.h	/^		inline unsigned int snd_queue_size(){return _snd_queue.rdSize() + _enc_queue.rdSize();}$/;"	f	class:aSocket
sock	sdk/aSocket.h	/^		int sock;$/;"	m	class:aSocket
sock	sdk/aTCPServic.h	/^		int sock;$/;"	m	class:aTCPServic
sock	sdk/aUDPServer.h	/^		int sock;$/;"	m	class:aUDPServic
source	sdk/aEvent.h	/^		aEntry * source;$/;"	m	struct:EVENT::stEVENT
spop	sdk/aRedisClient.cpp	/^int aRedisClient::spop(const AStr& key, AStr& member)$/;"	f	class:aRedisClient
srandmember	sdk/aRedisClient.cpp	/^int aRedisClient::srandmember(const AStr& key, const int count, AVec<AStr>& members)$/;"	f	class:aRedisClient
srem	sdk/aRedisClient.cpp	/^int aRedisClient::srem(const AStr& key, const AStr& member)$/;"	f	class:aRedisClient
stAcceptInfo	sdk/aMTCPService.h	/^struct stAcceptInfo$/;"	s
stAgeMsgMap	sdk/aMsgCallBack.h	/^typedef struct stAgeMsgMap$/;"	s
stBufferCmdQueue	sdk/aMemStream.h	/^typedef  aMemStream<std::vector<unsigned char> > stBufferCmdQueue;$/;"	t
stEVENT	sdk/aEvent.h	/^	struct stEVENT$/;"	s	namespace:EVENT
stFunctionTime	sdk/aTimeWarp.h	/^			stFunctionTime():_times(0),_total_time(0){}$/;"	f	struct:FunctionTime::stFunctionTime
stFunctionTime	sdk/aTimeWarp.h	/^		struct stFunctionTime$/;"	s	class:FunctionTime
stMysql	sdk/aDBConnectPool.h	/^struct stMysql $/;"	s
stRedis	sdk/aRedisConnectPool.h	/^struct stRedis$/;"	s
stStackCmdQueue	sdk/aMemStream.h	/^typedef aMemStream<unsigned char [PACKET_ZIP_BUFFER]> stStackCmdQueue;$/;"	t
stVarServerInfo	sdk/aGlobalClient.h	/^	stVarServerInfo()$/;"	f	struct:stVarServerInfo
stVarServerInfo	sdk/aGlobalClient.h	/^typedef struct stVarServerInfo$/;"	s
stVars	sdk/aVarsM .h	/^		struct stVars$/;"	s	class:VarsM
stZONE	sdk/aDef.h	/^	stZONE()$/;"	f	struct:stZONE
stZONE	sdk/aDef.h	/^	stZONE(const stZONE & zone)$/;"	f	struct:stZONE
stZONE	sdk/aDef.h	/^struct stZONE$/;"	s
stargp	sdk/aArg.h	/^	struct argp stargp;$/;"	m	class:aArg	typeref:struct:aArg::argp
start	sdk/aThread.cpp	/^bool aThread::start()$/;"	f	class:aThread
state	sdk/aDBConnectPool.h	/^	DBSTATE state; \/**<数据库状态*\/$/;"	m	struct:stMysql
state	sdk/aRedisConnectPool.h	/^        REDIS_STATE state; \/**<数据库状态*\/$/;"	m	struct:stRedis
state	sdk/aTCPClient.h	/^		volatile ConnectState state;$/;"	m	class:aTCPClient
state	sdk/aTCPTask.h	/^		aUDPTask_State state;\/**<连接状态*\/$/;"	m	class:aUDPTask
state	sdk/aTCPTaskPool.h	/^		int state;												\/**< 连接池状态*\/$/;"	m	class:aTCPTaskPool
state	sdk/aUDPTask.h	/^		aTCPTask_State state;\/**<连接状态*\/$/;"	m	class:aTCPTask
state_maintain	sdk/aTCPTaskPool.h	/^	state_maintain = 1 << 0, \/\/$/;"	e	enum:POOLSTATE
state_none	sdk/aTCPTaskPool.h	/^	state_none = 0,$/;"	e	enum:POOLSTATE
strExtIP	sdk/aGlobalClient.h	/^	AStr strExtIP;$/;"	m	struct:stVarServerInfo
strFormat	sdk/aFunc.h	/^	inline std::string strFormat(const char * pattern,...)$/;"	f	namespace:Age
strHash	sdk/aFunc.h	/^	inline unsigned int strHash(const char *str)$/;"	f	namespace:Age
strIP	sdk/aGlobalClient.h	/^	AStr strIP;$/;"	m	struct:stVarServerInfo
strcmp_request	sdk/aSocket.cpp	458;"	d	file:
string_trim_before	sdk/aUrl.h	/^		size_t  string_trim_before(size_t begin)$/;"	f	class:aUrl
stringbreak	sdk/aFunc.h	/^		inline void stringbreak(Container &container,std::string const &in,const char * const dellimiters = "\\t\\n",const int deep = 0)$/;"	f	namespace:Age
strlen	sdk/aRedisClient.cpp	/^int aRedisClient::strlen(const AStr& key)$/;"	f	class:aRedisClient
success_recv	sdk/aSocket.cpp	447;"	d	file:
success_unpack	sdk/aSocket.cpp	91;"	d	file:
sucess_recv_and_dec	sdk/aSocket.cpp	433;"	d	file:
sunion	sdk/aRedisClient.cpp	/^int aRedisClient::sunion(const AVec<AStr>& keys, ASet<AStr>& s)$/;"	f	class:aRedisClient
sunionstore	sdk/aRedisClient.cpp	/^int aRedisClient::sunionstore(const AStr& destination, const AVec<AStr>& keys)$/;"	f	class:aRedisClient
sync	sdk/aMiniTCPClient.cpp	/^void aMiniTCPClient::sync()$/;"	f	class:aMiniTCPClient
sync	sdk/aSocket.cpp	/^bool aSocket::sync()$/;"	f	class:aSocket
sync	sdk/aTCPClient.h	/^			sync = 1 ,$/;"	e	enum:aTCPClient::ConnectState
sync	sdk/aTCPTask.h	/^			sync = 2,$/;"	e	enum:aUDPTask::aUDPTask_State
sync	sdk/aUDPTask.h	/^			sync = 2,$/;"	e	enum:aTCPTask::aTCPTask_State
syncThread	sdk/aTCPTaskPool.h	/^		aSyncThread *syncThread;								\/**< 等待同步线程 *\/$/;"	m	class:aTCPTaskPool
table	sdk/aLuaBase.cpp	/^aLuaBase::table::table(const table& input)$/;"	f	class:aLuaBase::table
table	sdk/aLuaBase.cpp	/^aLuaBase::table::table(lua_State* L)$/;"	f	class:aLuaBase::table
table	sdk/aLuaBase.cpp	/^aLuaBase::table::table(lua_State* L, const char* name)$/;"	f	class:aLuaBase::table
table	sdk/aLuaBase.cpp	/^aLuaBase::table::table(lua_State* L, int index)$/;"	f	class:aLuaBase::table
table	sdk/aLuaBase.h	/^	struct table$/;"	s	namespace:aLuaBase
table_obj	sdk/aLuaBase.cpp	/^aLuaBase::table_obj::table_obj(lua_State* L, int index)$/;"	f	class:aLuaBase::table_obj
table_obj	sdk/aLuaBase.h	/^	struct table_obj$/;"	s	namespace:aLuaBase
tagResumeCallBack	sdk/aShareMem.h	/^struct tagResumeCallBack$/;"	s
tagShareMemHead	sdk/aShareMem.h	/^struct tagShareMemHead$/;"	s
taskThreads	sdk/aTCPClientPool.h	/^		aThreadGroup taskThreads;$/;"	m	class:aTCPClientPool
task_count	sdk/aTCPClientPool.cpp	/^		aTCPClientConntainer::size_type task_count;			\/**< tasks计数(保证线程安全*\/$/;"	m	class:aCkeckWaitThread	file:
task_count	sdk/aTCPClientPool.cpp	/^		aTCPClientConntainer::size_type task_count;			\/**< tasks计数(保证线程安全*\/$/;"	m	class:aTCPClientThread	file:
task_count	sdk/aTCPTaskPool.cpp	/^		aTCPTaskContainer::size_type task_count;			\/**< tasks计数(保证线程安全*\/$/;"	m	class:aOkayThread	file:
task_count	sdk/aTCPTaskPool.cpp	/^		aTCPTaskContainer::size_type task_count;			\/**< tasks计数(保证线程安全*\/$/;"	m	class:aVerifyThread	file:
tasks	sdk/aHttpTaskPool.cpp	/^		aHttpTaskContainer tasks;	\/**< 任务列表 *\/$/;"	m	class:aHttpThread	file:
tasks	sdk/aTCPClientPool.cpp	/^		aTCPClientConntainer tasks;	\/**< 任务列表 *\/$/;"	m	class:aCkeckWaitThread	file:
tasks	sdk/aTCPClientPool.cpp	/^		aTCPClientConntainer tasks;	\/**< 任务列表 *\/$/;"	m	class:aTCPClientThread	file:
tasks	sdk/aTCPClientPool.h	/^		aTCPClientConntainer tasks;$/;"	m	class:aTCPClientPool
tasks	sdk/aTCPTaskPool.cpp	/^		aTCPTaskContainer tasks;	\/**< 任务列表 *\/$/;"	m	class:aOkayThread	file:
tasks	sdk/aTCPTaskPool.cpp	/^		aTCPTaskContainer tasks;	\/**< 任务列表 *\/$/;"	m	class:aRecycleThread	file:
tasks	sdk/aTCPTaskPool.cpp	/^		aTCPTaskContainer tasks;	\/**< 任务列表 *\/$/;"	m	class:aSyncThread	file:
tasks	sdk/aTCPTaskPool.cpp	/^		aTCPTaskContainer tasks;	\/**< 任务列表 *\/$/;"	m	class:aVerifyThread	file:
tcpService	sdk/aMNetService.h	/^		aMTCPService * tcpService;$/;"	m	class:aMNetService
tcpService	sdk/aNetService.h	/^		aTCPServic * tcpService;$/;"	m	class:aNetService
tcpService	sdk/aUDPNetServer.h	/^		aTCPServic * tcpService;$/;"	m	class:aUDPNetService
tempid	sdk/aEntryBase.h	/^	DWORD tempid;$/;"	m	struct:aEntryBase
terminate	sdk/aTCPClient.h	/^		TerminateMethod terminate;$/;"	m	class:aTCPClient
terminate	sdk/aTCPTask.h	/^		TerminateMethod terminate; \/**<是否结束状态*\/$/;"	m	class:aUDPTask
terminate	sdk/aUDPTask.h	/^		TerminateMethod terminate; \/**<是否结束状态*\/$/;"	m	class:aTCPTask
terminate_active	sdk/aTCPTask.h	/^			terminate_active,\/**<客户端主动断开连接，主要是服务器检测到套接口关闭或者异常*\/$/;"	e	enum:aUDPTask::TerminateMethod
terminate_active	sdk/aUDPTask.h	/^			terminate_active,\/**<客户端主动断开连接，主要是服务器检测到套接口关闭或者异常*\/$/;"	e	enum:aTCPTask::TerminateMethod
terminate_no	sdk/aTCPTask.h	/^			terminate_no,	\/**<没结束任务*\/$/;"	e	enum:aUDPTask::TerminateMethod
terminate_no	sdk/aUDPTask.h	/^			terminate_no,	\/**<没结束任务*\/$/;"	e	enum:aTCPTask::TerminateMethod
terminate_passive	sdk/aTCPTask.h	/^			terminate_passive,\/**<服务器主动断开连接*\/$/;"	e	enum:aUDPTask::TerminateMethod
terminate_passive	sdk/aUDPTask.h	/^			terminate_passive,\/**<服务器主动断开连接*\/$/;"	e	enum:aTCPTask::TerminateMethod
terminate_wait	sdk/aTCPTask.h	/^		bool terminate_wait; \/**<设置等待结束状态*\/$/;"	m	class:aUDPTask
terminate_wait	sdk/aUDPTask.h	/^		bool terminate_wait; \/**<设置等待结束状态*\/$/;"	m	class:aTCPTask
threadFunc	sdk/aThread.cpp	/^void * aThread::threadFunc(void * arg)$/;"	f	class:aThread
tick	sdk/aTCPClient.h	/^		BYTE tick;$/;"	m	class:aTCPClient
tick	sdk/aTCPTask.h	/^		bool tick ; $/;"	m	class:aUDPTask
tick	sdk/aUDPTask.h	/^		bool tick ; $/;"	m	class:aTCPTask
timeAction	sdk/aTCPClientPool.cpp	/^void aTCPClientPool::timeAction(const atmTime &ct)$/;"	f	class:aTCPClientPool
timer	sdk/aTimeWarp.h	/^		aTimer timer;$/;"	m	class:FunctionTime
toArray	sdk/aIni.cpp	/^string* iniNode::toArray() {$/;"	f	class:iniNode
toCartesian	sdk/aVec3.cpp	/^inline void toCartesian(aVector3 &vector,float const&radius, float const&angle, float const&z)$/;"	f
toEuler	sdk/aVec3.cpp	/^inline void toEuler(aVector3 &vector,aVector3 axis, float const& angle)$/;"	f
toLower	sdk/aFunc.h	/^	inline void toLower(std::string &s)$/;"	f	namespace:Age
toNormalized	sdk/aVec3.cpp	/^inline void toNormalized(aVector3 &vector){$/;"	f
toPolar	sdk/aVec3.cpp	/^inline void toPolar(aVector3 &vector,float const&x, float const&y, float const&z)$/;"	f
toString	sdk/aIni.cpp	/^string iniNode::toString(int i, string temp2) {$/;"	f	class:iniNode
toUpper	sdk/aFunc.h	/^	inline void toUpper(std::string &s)$/;"	f	namespace:Age
toZero	sdk/aVec3.cpp	/^inline void toZero(aVector3 &vec2){$/;"	f
tostring_s64	sdk/aLuaBase.cpp	/^static int tostring_s64(lua_State *L)$/;"	f	file:
tostring_u64	sdk/aLuaBase.cpp	/^static int tostring_u64(lua_State *L)$/;"	f	file:
trace	sdk/aLogger.cpp	/^bool aLogger::trace(const char * pattern,... )$/;"	f	class:aLogger
trim	sdk/aIni.cpp	/^void trim(std::string& str, const std::string& trimChars = whiteSpaces) {$/;"	f
trimLeft	sdk/aIni.cpp	/^void trimLeft(std::string& str, const std::string& trimChars = whiteSpaces) {$/;"	f
trimRight	sdk/aIni.cpp	/^void trimRight(std::string& str, const std::string& trimChars = whiteSpaces) {$/;"	f
truncate	sdk/aVec3.cpp	/^inline void truncate(aVector3 &vector,double const& max){$/;"	f
ttl	sdk/aRedisClient.cpp	/^int aRedisClient::ttl(const AStr& key)$/;"	f	class:aRedisClient
tv	sdk/aTime.h	/^		struct tm tv;$/;"	m	class:atmTime	typeref:struct:atmTime::tm
type	sdk/aDef.h	/^			WORD type;\/***<游戏类型号*\/$/;"	m	struct:stZONE::__anon1::__anon2
type	sdk/aEntryBase.h	/^template <typename T> struct identity { typedef T type; };$/;"	t	struct:identity
type	sdk/aLuaBase.h	/^		struct baseType { typedef A type; };$/;"	t	struct:aLuaBase::baseType
type	sdk/aLuaBase.h	/^		struct baseType<A&> { typedef A type; };$/;"	t	struct:aLuaBase::baseType
type	sdk/aLuaBase.h	/^		struct baseType<A*> { typedef A type; };$/;"	t	struct:aLuaBase::baseType
type	sdk/aLuaBase.h	/^		struct baseType<const A&> { typedef A type; };$/;"	t	struct:aLuaBase::baseType
type	sdk/aLuaBase.h	/^		struct baseType<const A*> { typedef A type; };$/;"	t	struct:aLuaBase::baseType
type	sdk/aLuaBase.h	/^		struct classType { typedef typename removeConst<typename baseType<A>::type>::type type; };$/;"	t	struct:aLuaBase::classType
type	sdk/aLuaBase.h	/^		struct removeConst { typedef A type; };$/;"	t	struct:aLuaBase::removeConst
type	sdk/aLuaBase.h	/^		struct removeConst<const A> { typedef A type; };$/;"	t	struct:aLuaBase::removeConst
type	sdk/aLuaBase.h	/^	template <> struct bool_to_yesno<true> { typedef yesType type; }; $/;"	t	struct:aLuaBase::bool_to_yesno
type	sdk/aLuaBase.h	/^	template <bool C> struct bool_to_yesno { typedef noType type; }; $/;"	t	struct:aLuaBase::bool_to_yesno
type	sdk/aLuaBase.h	/^	template<typename A, typename B>		struct if_<false, A, B> { typedef B type; };$/;"	t	struct:aLuaBase::if_
type	sdk/aLuaBase.h	/^	template<typename A, typename B>		struct if_<true, A, B> { typedef A type; };$/;"	t	struct:aLuaBase::if_
type	sdk/aRedisClient.cpp	/^AStr aRedisClient::type(const string& key)$/;"	f	class:aRedisClient
type	sdk/aTableDef.h	/^	int type;\/**<date type*\/$/;"	m	struct:dbCol
type2lua	sdk/aLuaBase.h	/^		void type2lua(lua_State *L, T val)$/;"	f	namespace:aLuaBase
tzLock	sdk/aTime.cpp	/^static aMutex tzLock;$/;"	v	file:
uniqueAdd	sdk/aTCPTask.h	/^		virtual bool uniqueAdd()$/;"	f	class:aUDPTask
uniqueAdd	sdk/aUDPTask.h	/^		virtual bool uniqueAdd()$/;"	f	class:aTCPTask
uniqueRemove	sdk/aTCPTask.h	/^		virtual bool uniqueRemove()$/;"	f	class:aUDPTask
uniqueRemove	sdk/aUDPTask.h	/^		virtual bool uniqueRemove()$/;"	f	class:aTCPTask
uniqueVerified	sdk/aTCPTask.h	/^		bool uniqueVerified;\/**<唯一性验证通过标志*\/$/;"	m	class:aUDPTask
uniqueVerified	sdk/aUDPTask.h	/^		bool uniqueVerified;\/**<唯一性验证通过标志*\/$/;"	m	class:aTCPTask
unlock	sdk/aMutex.h	/^	inline void unlock()$/;"	f	class:aMutex
unlock	sdk/aRWLock.h	/^		inline void unlock()$/;"	f	class:aRWLock
unlock	sdk/aUser.h	/^	void unlock()$/;"	f	struct:aUser
unpack	sdk/aEntryBase.h	/^void aComponentEntity::unpack( aComponent<C> &a)$/;"	f	class:aComponentEntity
unpack	sdk/aEntryBase.h	/^void aComponentEntity::unpack( aComponent<C> &a, aComponent<Args> & ... args)$/;"	f	class:aComponentEntity
unzip_size	sdk/aMemStream.h	235;"	d
upNum	sdk/aFunc.h	/^				DWORD upNum;$/;"	m	struct:Age::aMisc::odds_t
upvalue_	sdk/aLuaBase.h	/^		T upvalue_(lua_State *L)$/;"	f	namespace:aLuaBase
urlDecode	sdk/aUrl.h	/^		std::string urlDecode(const std::string& url)$/;"	f	class:aUrl
urlEncode	sdk/aUrl.h	/^		std::string urlEncode(const std::string& url)$/;"	f	class:aUrl
user	sdk/aLuaBase.h	/^		user(void* p) : m_p(p) {}$/;"	f	struct:aLuaBase::user
user	sdk/aLuaBase.h	/^	struct user$/;"	s	namespace:aLuaBase
user2type	sdk/aLuaBase.h	/^		struct user2type { static T invoke(lua_State *L, int index) { return void2type<T>::invoke(lua_touserdata(L, index)); } };$/;"	s	namespace:aLuaBase
userHandler_1	sdk/aService.cpp	/^static void userHandler_1(int signum)$/;"	f	file:
userHandler_2	sdk/aService.cpp	/^static void userHandler_2(int sinum)$/;"	f	file:
userKill1	sdk/aService.h	/^		virtual void userKill1()$/;"	f	class:aService
userKill2	sdk/aService.h	/^		virtual void userKill2()$/;"	f	class:aService
user_parser	sdk/aArg.h	/^	argsParser user_parser;$/;"	m	class:aArg
usleep	sdk/aThread.h	/^		static void usleep (const unsigned long usec)$/;"	f	class:aThread
usleep_time	sdk/aTCPClientPool.h	/^		unsigned long usleep_time;$/;"	m	class:aTCPClientPool
usleep_time	sdk/aTCPTaskPool.cpp	/^unsigned long aTCPTaskPool::usleep_time=50000L;										\/**< 循环等待时间 *\/$/;"	m	class:aTCPTaskPool	file:
usleep_time	sdk/aTCPTaskPool.h	/^		static unsigned long usleep_time;						\/**< 循环等待时间*\/$/;"	m	class:aTCPTaskPool
val2lua	sdk/aLuaBase.h	/^		struct val2lua { static void invoke(lua_State *L, T& input){ new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(input); } };$/;"	s	namespace:aLuaBase
val2user	sdk/aLuaBase.h	/^			val2user(T1 t1) : user(new T(t1)) {}$/;"	f	struct:aLuaBase::val2user
val2user	sdk/aLuaBase.h	/^			val2user(T1 t1, T2 t2) : user(new T(t1, t2)) {}$/;"	f	struct:aLuaBase::val2user
val2user	sdk/aLuaBase.h	/^			val2user(T1 t1, T2 t2, T3 t3) : user(new T(t1, t2, t3)) {}$/;"	f	struct:aLuaBase::val2user
val2user	sdk/aLuaBase.h	/^			val2user(T1 t1, T2 t2, T3 t3, T4 t4) : user(new T(t1, t2, t3,t4)) {}$/;"	f	struct:aLuaBase::val2user
val2user	sdk/aLuaBase.h	/^			val2user(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) : user(new T(t1, t2, t3,t4,t5)) {}$/;"	f	struct:aLuaBase::val2user
val2user	sdk/aLuaBase.h	/^		struct val2user : user$/;"	s	namespace:aLuaBase
val2user	sdk/aLuaBase.h	/^		val2user() : user(new T) {}$/;"	f	struct:aLuaBase::val2user
validate	sdk/aLuaBase.cpp	/^bool aLuaBase::table_obj::validate()$/;"	f	class:aLuaBase::table_obj
validate	sdk/aService.h	/^		virtual bool validate()$/;"	f	class:aService
value	sdk/aIni.h	/^		string value;$/;"	m	class:iniNode
value	sdk/aLuaBase.h	/^			static const bool value = ( (sizeof(intConvTest(arg)) == sizeof(yesType)) && (sizeof(vfndPtrTest(add_ptr(arg))) == sizeof(yesType)) ); $/;"	m	struct:aLuaBase::isEnum
value	sdk/aLuaBase.h	/^		struct isPtr { static const bool value = false; };$/;"	m	struct:aLuaBase::isPtr
value	sdk/aLuaBase.h	/^		struct isPtr<A*> { static const bool value = true; };$/;"	m	struct:aLuaBase::isPtr
value	sdk/aLuaBase.h	/^		struct isRef { static const bool value = false; };$/;"	m	struct:aLuaBase::isRef
value	sdk/aLuaBase.h	/^		struct isRef<A&> { static const bool value = true; };$/;"	m	struct:aLuaBase::isRef
var_base	sdk/aLuaBase.h	/^	struct var_base$/;"	s	namespace:aLuaBase
verified	sdk/aGlobalClient.h	/^		bool verified;$/;"	m	class:GlobalClient
verify	sdk/aTCPTask.h	/^			verify = 1,$/;"	e	enum:aUDPTask::aUDPTask_State
verify	sdk/aUDPTask.h	/^			verify = 1,$/;"	e	enum:aTCPTask::aTCPTask_State
verifyConn	sdk/aTCPTask.h	/^		virtual int verifyConn()$/;"	f	class:aUDPTask
verifyConn	sdk/aUDPTask.h	/^		virtual int verifyConn()$/;"	f	class:aTCPTask
verifyFlashSaftyBox	sdk/aSocket.cpp	/^bool aSocket::verifyFlashSaftyBox()$/;"	f	class:aSocket
verifyThreads	sdk/aTCPTaskPool.h	/^		aThreadGroup verifyThreads;								\/**< 验证线程，可以有多个*\/$/;"	m	class:aTCPTaskPool
void2ptr	sdk/aLuaBase.h	/^		struct void2ptr { static T* invoke(void* input){ return (T*)input; } };$/;"	s	namespace:aLuaBase
void2ref	sdk/aLuaBase.h	/^		struct void2ref { static T& invoke(void* input){ return *(T*)input; } };$/;"	s	namespace:aLuaBase
void2type	sdk/aLuaBase.h	/^		struct void2type$/;"	s	namespace:aLuaBase
void2val	sdk/aLuaBase.h	/^		struct void2val { static T invoke(void* input){ return *(T*)input; } };$/;"	s	namespace:aLuaBase
vts	sdk/aThread.h	/^		Container vts; \/**<线程容器*\/$/;"	m	class:aThreadGroup
wait	sdk/aCond.cpp	/^void aCond::wait(aMutex &mutex)$/;"	f	class:aCond
waitForRead	sdk/aSocket.cpp	/^int aSocket::waitForRead()$/;"	f	class:aSocket
waitForWrite	sdk/aSocket.cpp	/^int aSocket::waitForWrite()$/;"	f	class:aSocket
waitSync	sdk/aTCPTask.h	/^		virtual int waitSync()$/;"	f	class:aUDPTask
waitSync	sdk/aUDPTask.h	/^		virtual int waitSync()$/;"	f	class:aTCPTask
warn	sdk/aLogger.cpp	/^bool aLogger::warn(const char * pattern,... )$/;"	f	class:aLogger
wrBuf	sdk/aMemStream.h	/^		inline unsigned char  * wrBuf()$/;"	f	class:aMemStream
wrFlip	sdk/aMemStream.h	/^		inline void wrFlip(const unsigned int size)$/;"	f	class:aMemStream
wrReserve	sdk/aMemStream.h	/^inline void stBufferCmdQueue::wrReserve(unsigned int size)$/;"	f	class:stBufferCmdQueue
wrReserve	sdk/aMemStream.h	/^inline void stStackCmdQueue::wrReserve(const unsigned int size)$/;"	f	class:stStackCmdQueue
wrSize	sdk/aMemStream.h	/^		inline unsigned int wrSize()$/;"	f	class:aMemStream
wr_count	sdk/aRWLock.h	/^		unsigned int wr_count;$/;"	m	class:aRWLock
wr_msec	sdk/aSocket.h	/^		int wr_msec;$/;"	m	class:aSocket
writeAll	sdk/aSerialization.h	/^		bool writeAll(){$/;"	f	class:DataSerialization
wrlock	sdk/aRWLock.h	/^		inline void wrlock()$/;"	f	class:aRWLock
x	sdk/aVec3.h	/^		float x;$/;"	m	class:aVector3
xor_map	sdk/aBase64.cpp	/^	static const char xor_map[4] = { '#', '*', '!', 'N' };$/;"	m	namespace:Age	file:
y	sdk/aVec3.h	/^		float y;$/;"	m	class:aVector3
yes	sdk/aLuaBase.h	/^	enum { no = 1, yes = 2 }; $/;"	e	enum:aLuaBase::__anon4
yesType	sdk/aLuaBase.h	/^	typedef char (& yesType)[yes]; $/;"	t	namespace:aLuaBase
z	sdk/aVec3.h	/^		float z;$/;"	m	class:aVector3
zoneid	sdk/aDef.h	/^			WORD zoneid; \/**<区ID*\/$/;"	m	struct:stZONE::__anon1::__anon2
~Callback	sdk/aThread.h	/^			virtual  ~Callback(){};$/;"	f	struct:aThreadGroup::Callback
~DBVARTYPE	sdk/aTable.h	/^		~DBVARTYPE(){}$/;"	f	class:DBVARTYPE
~DataCallBack	sdk/aSerialization.h	/^		virtual ~DataCallBack(){};$/;"	f	class:DataCallBack
~DataSerialization	sdk/aSerialization.h	/^		~DataSerialization()$/;"	f	class:DataSerialization
~FunctionTime	sdk/aTimeWarp.h	/^		~FunctionTime (){}$/;"	f	class:FunctionTime
~FunctionTime_Wrapper	sdk/aTimeWarp.h	/^		~FunctionTime_Wrapper()$/;"	f	class:FunctionTime_Wrapper
~GlobalClient	sdk/aGlobalClient.h	/^		virtual	~GlobalClient(){};$/;"	f	class:GlobalClient
~LimitHash	sdk/aEntryM.h	/^		~LimitHash(){clear();}$/;"	f	class:LimitHash
~MultiHash	sdk/aEntryM.h	/^		~MultiHash(){clear();}$/;"	f	class:MultiHash
~Vars	sdk/aVars.h	/^		~Vars(){};$/;"	f	class:Vars
~aArg	sdk/aArg.cpp	/^aArg::~aArg()$/;"	f	class:aArg
~aCkeckWaitThread	sdk/aTCPClientPool.cpp	/^		~aCkeckWaitThread()$/;"	f	class:aCkeckWaitThread
~aCond	sdk/aCond.cpp	/^aCond::~aCond()$/;"	f	class:aCond
~aConfig	sdk/aConfig.cpp	/^aConfig::~aConfig()$/;"	f	class:aConfig
~aDBConnectPool	sdk/aDBConnectPool.cpp	/^aDBConnectPool::~aDBConnectPool(){ final();};$/;"	f	class:aDBConnectPool
~aEntry	sdk/aEntry.h	/^	virtual ~aEntry(){};$/;"	f	struct:aEntry
~aEntryCallBack	sdk/aEntryBase.h	/^	virtual ~aEntryCallBack(){};$/;"	f	struct:aEntryCallBack
~aEntryM	sdk/aEntryM.h	/^		~aEntryM(){};$/;"	f	class:aEntryM
~aEntryTempID	sdk/aEntryM.h	/^		virtual ~aEntryTempID(){}$/;"	f	class:aEntryTempID
~aHttpTask	sdk/aHttpTask.h	/^		virtual ~aHttpTask()$/;"	f	class:aHttpTask
~aHttpTaskPool	sdk/aHttpTaskPool.h	/^		~aHttpTaskPool()$/;"	f	class:aHttpTaskPool
~aHttpThread	sdk/aHttpTaskPool.cpp	/^		~aHttpThread()$/;"	f	class:aHttpThread
~aIni	sdk/aIni.cpp	/^aIni::~aIni() {$/;"	f	class:aIni
~aLogger	sdk/aLogger.cpp	/^aLogger::~aLogger()$/;"	f	class:aLogger
~aLuaContext	sdk/aLuaBase.h	/^		~aLuaContext( void )$/;"	f	struct:aLuaBase::aLuaContext
~aMNetService	sdk/aMNetService.h	/^		virtual ~aMNetService(){instance = NULL;}$/;"	f	class:aMNetService
~aMTCPService	sdk/aMTCPService.cpp	/^aMTCPService::~aMTCPService()$/;"	f	class:aMTCPService
~aMemStream	sdk/aMemStream.h	/^		~aMemStream(){};$/;"	f	class:aMemStream
~aMiniTCPClient	sdk/aMiniTCPClient.h	/^		virtual	~aMiniTCPClient(){}$/;"	f	class:aMiniTCPClient
~aMsgParse	sdk/aMsgParse.h	/^		virtual ~aMsgParse(){}$/;"	f	class:aMsgParse
~aMutex	sdk/aMutex.h	/^	~aMutex()$/;"	f	class:aMutex
~aMutexAutoScop	sdk/aMutex.h	/^		~aMutexAutoScop()$/;"	f	class:aMutexAutoScop
~aNetService	sdk/aNetService.cpp	/^aNetService::~aNetService()$/;"	f	class:aNetService
~aNineScreenIndex	sdk/aNineScreenIndex.cpp	/^aNineScreenIndex<MAX_X,MAX_Y>::~aNineScreenIndex()$/;"	f	class:aNineScreenIndex
~aNoneCopyable	sdk/aNoneCopyable.h	/^		~aNoneCopyable(){};$/;"	f	class:aNoneCopyable
~aOkayThread	sdk/aTCPTaskPool.cpp	/^		~aOkayThread()$/;"	f	class:aOkayThread
~aPyThreadStateLock	sdk/aPython.h	/^		~aPyThreadStateLock()$/;"	f	class:aPyThreadStateLock
~aPython	sdk/aPython.h	/^		~aPython()$/;"	f	class:aPython
~aRWLock	sdk/aRWLock.h	/^		~aRWLock()$/;"	f	class:aRWLock
~aRWLockAutoScopeRD	sdk/aRWLock.h	/^		~aRWLockAutoScopeRD()$/;"	f	class:aRWLockAutoScopeRD
~aRWLockAutoScopeRW	sdk/aRWLock.h	/^		~aRWLockAutoScopeRW()$/;"	f	class:aRWLockAutoScopeRW
~aRecord	sdk/aTable.h	/^		~aRecord(){clear();}$/;"	f	class:aRecord
~aRecordSet	sdk/aTable.h	/^		~aRecordSet(){$/;"	f	class:aRecordSet
~aRecycleThread	sdk/aTCPTaskPool.cpp	/^		~aRecycleThread() {};$/;"	f	class:aRecycleThread
~aRedisClient	sdk/aRedisClient.cpp	/^aRedisClient::~aRedisClient()$/;"	f	class:aRedisClient
~aRedisCmd	sdk/aRedisCommand.h	/^	~aRedisCmd()$/;"	f	struct:aRedisCmd
~aRedisCmdMaker	sdk/aRedisCommand.h	/^		~aRedisCmdMaker()$/;"	f	class:aRedisCmdMaker
~aRedisConnectPool	sdk/aRedisConnectPool.cpp	/^aRedisConnectPool::~aRedisConnectPool()$/;"	f	class:aRedisConnectPool
~aReplyGuard	sdk/aRedisResult.cpp	/^		~aReplyGuard()$/;"	f	class:aReplyGuard
~aService	sdk/aService.h	/^		virtual ~aService(){ $/;"	f	class:aService
~aShareMem	sdk/aShareMem.cpp	/^aShareMem::~aShareMem()$/;"	f	class:aShareMem
~aSingleton	sdk/aSingleton.h	/^	virtual ~aSingleton() {}$/;"	f	class:aSingleton
~aSocket	sdk/aSocket.cpp	/^aSocket::~aSocket()$/;"	f	class:aSocket
~aSyncThread	sdk/aTCPTaskPool.cpp	/^		~aSyncThread() {};$/;"	f	class:aSyncThread
~aTCPClient	sdk/aTCPClient.cpp	/^aTCPClient::~aTCPClient()$/;"	f	class:aTCPClient
~aTCPClientPool	sdk/aTCPClientPool.cpp	/^aTCPClientPool::~aTCPClientPool()$/;"	f	class:aTCPClientPool
~aTCPClientTaskQueue	sdk/aTCPClientPool.cpp	/^		virtual ~aTCPClientTaskQueue() {}$/;"	f	class:aTCPClientTaskQueue
~aTCPClientThread	sdk/aTCPClientPool.cpp	/^		~aTCPClientThread()$/;"	f	class:aTCPClientThread
~aTCPServic	sdk/aTCPServic.cpp	/^aTCPServic::~aTCPServic()$/;"	f	class:aTCPServic
~aTCPTask	sdk/aUDPTask.h	/^		virtual ~aTCPTask(){}$/;"	f	class:aTCPTask
~aTCPTaskPool	sdk/aTCPTaskPool.h	/^		~aTCPTaskPool()$/;"	f	class:aTCPTaskPool
~aTCPTaskQueue	sdk/aTCPTaskPool.cpp	/^		virtual ~aTCPTaskQueue() {}$/;"	f	class:aTCPTaskQueue
~aTableDef	sdk/aTableDef.h	/^		virtual ~aTableDef(){}$/;"	f	class:aTableDef
~aThread	sdk/aThread.h	/^		virtual ~aThread(){};$/;"	f	class:aThread
~aThreadGroup	sdk/aThread.cpp	/^aThreadGroup::~aThreadGroup()$/;"	f	class:aThreadGroup
~aUDPNetService	sdk/aUDPNetServer.cpp	/^aUDPNetService::~aUDPNetService()$/;"	f	class:aUDPNetService
~aUDPServic	sdk/aUDPServer.cpp	/^aUDPServic::~aUDPServic()$/;"	f	class:aUDPServic
~aUDPTask	sdk/aTCPTask.h	/^		virtual ~aUDPTask(){}$/;"	f	class:aUDPTask
~aUniqueID	sdk/aUniqueID.h	/^	~aUniqueID()$/;"	f	class:aUniqueID
~aUserM	sdk/aUserM.h	/^	virtual ~aUserM()$/;"	f	class:aUserM
~aVerifyThread	sdk/aTCPTaskPool.cpp	/^		~aVerifyThread()$/;"	f	class:aVerifyThread
~aXMLReader	sdk/aXMLReader.cpp	/^aXMLReader::~aXMLReader()$/;"	f	class:aXMLReader
~execEntry	sdk/aEntryM.h	/^	virtual ~execEntry(){}$/;"	f	struct:execEntry
~removeEntry_Pred	sdk/aEntryM.h	/^	virtual ~removeEntry_Pred(){}$/;"	f	struct:removeEntry_Pred
~table	sdk/aLuaBase.cpp	/^aLuaBase::table::~table()$/;"	f	class:aLuaBase::table
~table_obj	sdk/aLuaBase.cpp	/^aLuaBase::table_obj::~table_obj()$/;"	f	class:aLuaBase::table_obj
~user	sdk/aLuaBase.h	/^		virtual ~user() {}$/;"	f	struct:aLuaBase::user
~val2user	sdk/aLuaBase.h	/^		~val2user() { delete ((T*)m_p); }$/;"	f	struct:aLuaBase::val2user
