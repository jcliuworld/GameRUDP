/**
 * \file
 * \version
 * \author  姜宇晖 涂飞翔 jiangkingwelcome@vip.qq.com atunet@163.com
 * \date 2012年3月6日 
 * \brief 定义实现轻量级(lightweight)的http服务框架
 *
 */

#ifndef _aHttpTask_h_
#define _aHttpTask_h_

#include <string>
#include <vector>
#include <queue>
#include <list>
#include <unistd.h>
#include <sys/timeb.h>

#include "aSocket.h"
#include "aNoneCopyable.h"
#include "aTime.h"

class aHttpTaskPool;

class aHttpTask : private aNoneCopyable
{

	public:

	
		/**
		 * @brief 构造函数，用于创建一个对象
		 * 
		 * @param sock 套接口
		 * @param addr 地址
		 */
		aHttpTask(
				const int sock,
				const struct sockaddr_in *addr = NULL) : lifeTime()

		{
			pSocket = new aSocket(sock, addr, false);
		}

		
		/**
		 * @brief 析构函数，用于销毁一个对象
		 */
		virtual ~aHttpTask()
		{
			SAFE_DELETE(pSocket) ;
		}

		/**
		 * @brief 添加检测事件到epoll描述符
		 *
		 * @param kdpfd epoll描述符
		 * @param events 待添加的事件
		 * @param ptr 额外参数
		 */
		void addEpoll(int kdpfd, __uint32_t events, void *ptr)
		{
			if (pSocket)
				pSocket->addEpoll(kdpfd, events, ptr);
		}
		
		/**
		 * @brief 从epoll描述符中删除检测事件
		 *
		 * @param kdpfd epoll描述符
		 * @param events 待添加的事件
		 */
		void delEpoll(int kdpfd, __uint32_t events)
		{
			if (pSocket)
				pSocket->delEpoll(kdpfd, events);
		}

		/**
		 * @brief 检测是否验证超时
		 *
		 * @param ct 当前系统时间
		 * @param interval 超时时间，毫秒
		 *
		 * @return 检测是否成功 
		 */
		bool checkHttpTimeout(const aRealTime &ct, const unsigned long long interval = 2000) const
		{
			return (lifeTime.elapse(ct) > interval);
		}

		
		/**
		 * @brief http任务主处理函数
		 *
		 * @return  是否成功，1表示成功，0，表示还要继续等待，-1，表示失败
		 */
		virtual int httpCore()
		{
			return 1;
		}
		/**
		 * @brief 向套接口发送指令
		 *
		 * @param pstrCmd 待发送的指令
		 * @param nCmdLen 待发送指令的大小
		 *
		 * @return   发送是否成功
		 */
		bool sendCmd(const void *pstrCmd, int nCmdLen);

		/** 
		 * @brief  获取连接的IP
		 * 
		 * @return  IP
		 */

		const char * getIP() const;
	protected:

		aSocket *pSocket;								/**< 底层套接口 */

	private:

		aRealTime lifeTime;								/**< 连接创建时间记录 */

};

#endif

