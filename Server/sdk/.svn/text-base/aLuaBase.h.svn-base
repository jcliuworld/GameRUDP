#ifndef _aLuaBase_H__
#define _aLuaBase_H__
/** 
 * @file aLuaBase.h
 * @brief LUA 脚本引擎基础封装
 * @author ljc jc.liuworld@hotmail.com
 * @date 2010-06-17
 */
#include <new>
#include <cstring>
#include <string>
extern "C" 
{
	#include "lua.h"
	#include "lauxlib.h"
	#include "lualib.h"
}
#include "Age.h"
#include "aLogger.h"

#if ( LUA_VERSION_NUM >= 502 )

#define lua_open				luaL_newstate

#endif	// lua5.2


namespace aLuaBase
{

	// class helper
	int getMeta(lua_State *L);

	int setMeta(lua_State *L);

	void push_meta(lua_State *L, const char* name);

	inline lua_State *open( void )
	{
		lua_State *L = lua_open();
		luaopen_base( L );
		return L;
	}

	inline void close( lua_State *L )
	{
		lua_close( L );
	}

	inline void openString( lua_State *L )
	{

#if	( LUA_VERSION_NUM >= 502 )
		luaL_requiref( L, LUA_STRLIBNAME, luaopen_string, 1 );
#else
		luaopen_string( L );
#endif	// lua5.2
	}

	inline void openMath( lua_State *L )
	{
#if	( LUA_VERSION_NUM >= 502 )
		luaL_requiref( L, LUA_MATHLIBNAME, luaopen_math, 1 );
#else
		luaopen_math( L );
#endif	// lua5.2
	}

	inline void openCoroutine( lua_State *L )
	{
/*
#if	( LUA_VERSION_NUM >= 502 )
		luaL_requiref( L, LUA_COLIBNAME, luaopen_coroutine, 1 );
#else
		luaopen_coroutine( L );
#endif	// lua5.2
	*/
	}

	inline void openOS( lua_State *L )
	{

#if	( LUA_VERSION_NUM >= 502 )
		luaL_requiref( L, LUA_OSLIBNAME, luaopen_os, 1 );
#else
		luaopen_os( L );
#endif	// lua5.2
	}

	inline void openTable( lua_State *L )
	{

#if	( LUA_VERSION_NUM >= 502 )
		luaL_requiref( L, LUA_OSLIBNAME, luaopen_table, 1 );
#else
		luaopen_table( L );
#endif	// lua5.2
	}



	inline void openIO( lua_State *L )
	{
#if	( LUA_VERSION_NUM >= 502 )
		luaL_requiref( L, LUA_IOLIBNAME, luaopen_io, 1 );
#else
		luaopen_io( L );
#endif	// lua5.2
	}

	struct aLuaContext
	{
		aLuaContext( void ) : L( aLuaBase::open() )
		{
		}
		~aLuaContext( void )
		{
			aLuaBase::close( L );
		}

		operator lua_State *( void )
		{
			return L;
		}

		lua_State *L;
	};

	// init Lua  
	void	init(lua_State *L);

	void	init_s64(lua_State *L);
	void	init_u64(lua_State *L);

	// excution
	void	doFile(lua_State *L, const char *filename);
	void	doString(lua_State *L, const char* buff);
	int		dobuffer(lua_State *L, const char* buff, size_t sz);

	// debug
	void	enum_stack(lua_State *L);
	int	on_error(lua_State *L);
	void	printError(lua_State *L, const char* fmt, ...);

	// dynamic type extention
	struct lua_value
	{
		virtual void to_lua(lua_State *L) = 0;
	};

	// type trait
	template<typename T> struct className;
	struct table;

	template<bool C, typename A, typename B> struct if_ {};
	template<typename A, typename B>		struct if_<true, A, B> { typedef A type; };
	template<typename A, typename B>		struct if_<false, A, B> { typedef B type; };

	template<typename A>
		struct isPtr { static const bool value = false; };
	template<typename A>
		struct isPtr<A*> { static const bool value = true; };

	template<typename A>
		struct isRef { static const bool value = false; };
	template<typename A>
		struct isRef<A&> { static const bool value = true; };

	template<typename A>
		struct removeConst { typedef A type; };
	template<typename A>
		struct removeConst<const A> { typedef A type; };

	template<typename A>
		struct baseType { typedef A type; };
	template<typename A>
		struct baseType<A*> { typedef A type; };
	template<typename A>
		struct baseType<A&> { typedef A type; };
	template<typename A>
		struct baseType<const A*> { typedef A type; };
	template<typename A>
		struct baseType<const A&> { typedef A type; };

	template<typename A>
		struct classType { typedef typename removeConst<typename baseType<A>::type>::type type; };

	/////////////////////////////////
	enum { no = 1, yes = 2 }; 
	typedef char (& noType )[no]; 
	typedef char (& yesType)[yes]; 

	struct intConv { intConv(int); }; 

	noType intConvTest (...); 
	yesType intConvTest (intConv); 

	noType vfndPtrTest (const volatile char *); 
	noType vfndPtrTest (const volatile short *); 
	noType vfndPtrTest (const volatile int *); 
	noType vfndPtrTest (const volatile long *); 
	noType vfndPtrTest (const volatile double *); 
	noType vfndPtrTest (const volatile float *); 
	noType vfndPtrTest (const volatile bool *); 
	yesType vfndPtrTest (const volatile void *); 

	template <typename T> T* add_ptr(T&); 

	template <bool C> struct bool_to_yesno { typedef noType type; }; 
	template <> struct bool_to_yesno<true> { typedef yesType type; }; 

	template <typename T> 
		struct isEnum 
		{ 
			static T arg; 
			static const bool value = ( (sizeof(intConvTest(arg)) == sizeof(yesType)) && (sizeof(vfndPtrTest(add_ptr(arg))) == sizeof(yesType)) ); 
		}; 
	/////////////////////////////////

	// from lua
	template<typename T>
		struct void2val { static T invoke(void* input){ return *(T*)input; } };
	template<typename T>
		struct void2ptr { static T* invoke(void* input){ return (T*)input; } };
	template<typename T>
		struct void2ref { static T& invoke(void* input){ return *(T*)input; } };

	template<typename T>  
		struct void2type
		{
			static T invoke(void* ptr)
			{
				return	if_<isPtr<T>::value
					,void2ptr<typename baseType<T>::type>
					,typename if_<isRef<T>::value
					,void2ref<typename baseType<T>::type>
					,void2val<typename baseType<T>::type>
					>::type
					>::type::invoke(ptr);
			}
		};

	struct user
	{
		user(void* p) : m_p(p) {}
		virtual ~user() {}
		void* m_p;
	};

	template<typename T>  
		struct user2type { static T invoke(lua_State *L, int index) { return void2type<T>::invoke(lua_touserdata(L, index)); } };

	template<typename T>
		struct lua2enum { static T invoke(lua_State *L, int index) { return (T)(int)lua_tonumber(L, index); } };

	template<typename T>
		struct lua2object
		{ 
			static T invoke(lua_State *L, int index) 
			{ 
				if(!lua_isuserdata(L,index))
				{
					lua_pushstring(L, "no class at first argument. (forgot ':' expression ?)");
					lua_error(L);
				}
				return void2type<T>::invoke(user2type<user*>::invoke(L,index)->m_p); 
			} 
		};

	template<typename T>
		T lua2type(lua_State *L, int index)
		{
			return	if_<isEnum<T>::value
				,lua2enum<T>
				,lua2object<T> 
				>::type::invoke(L, index);
		}

	template<typename T>
		struct val2user : user
	{
		val2user() : user(new T) {}

		template<typename T1>
			val2user(T1 t1) : user(new T(t1)) {}

		template<typename T1, typename T2>
			val2user(T1 t1, T2 t2) : user(new T(t1, t2)) {}

		template<typename T1, typename T2, typename T3>
			val2user(T1 t1, T2 t2, T3 t3) : user(new T(t1, t2, t3)) {}

		template<typename T1, typename T2, typename T3, typename T4>
			val2user(T1 t1, T2 t2, T3 t3, T4 t4) : user(new T(t1, t2, t3,t4)) {}

		template<typename T1, typename T2, typename T3, typename T4, typename T5>
			val2user(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) : user(new T(t1, t2, t3,t4,t5)) {}

		~val2user() { delete ((T*)m_p); }
	};

	template<typename T>
		struct ptr2user : user
	{
		ptr2user(T* t) : user((void*)t) {}
	};

	template<typename T>
		struct ref2user : user
	{
		ref2user(T& t) : user(&t) {}
	};

	// to lua
	template<typename T>
		struct val2lua { static void invoke(lua_State *L, T& input){ new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(input); } };
	template<typename T>
		struct ptr2lua { static void invoke(lua_State *L, T* input){ if(input) new(lua_newuserdata(L, sizeof(ptr2user<T>))) ptr2user<T>(input); else lua_pushnil(L); } };
	template<typename T>
		struct ref2lua { static void invoke(lua_State *L, T& input){ new(lua_newuserdata(L, sizeof(ref2user<T>))) ref2user<T>(input); } };

	template<typename T>
		struct enum2lua { static void invoke(lua_State *L, T val) { lua_pushnumber(L, (int)val); } };

	template<typename T>
		struct object2lua 
		{ 
			static void invoke(lua_State *L, T val) 
			{ 
				if_<isPtr<T>::value
					,ptr2lua<typename baseType<T>::type>
					,typename if_<isRef<T>::value
					,ref2lua<typename baseType<T>::type>
					,val2lua<typename baseType<T>::type>
					>::type
					>::type::invoke(L, val);

				push_meta(L, className<typename classType<T>::type>::name());
				lua_setmetatable(L, -2);
			} 
		};

	template<typename T>
		void type2lua(lua_State *L, T val)
		{
			if_<isEnum<T>::value
				,enum2lua<T>
				,object2lua<T>
				>::type::invoke(L, val);
		}

	// get value from cclosure
	template<typename T>  
		T upvalue_(lua_State *L)
		{
			return user2type<T>::invoke(L, lua_upvalueindex(1));
		}

	// read a value from lua stack 
	template<typename T>  
		T read(lua_State *L, int index)				{ return lua2type<T>(L, index); }

	template<>	char*				read(lua_State *L, int index);
	template<>	const char*			read(lua_State *L, int index);
	template<>	char				read(lua_State *L, int index);
	template<>	unsigned char		read(lua_State *L, int index);
	template<>	short				read(lua_State *L, int index);
	template<>	unsigned short		read(lua_State *L, int index);
	template<>	long				read(lua_State *L, int index);
	template<>	unsigned long		read(lua_State *L, int index);
	template<>	int					read(lua_State *L, int index);
	template<>	unsigned int		read(lua_State *L, int index);
	template<>	float				read(lua_State *L, int index);
	template<>	double				read(lua_State *L, int index);
	template<>	bool				read(lua_State *L, int index);
	template<>	void				read(lua_State *L, int index);
	template<>	long long			read(lua_State *L, int index);
	template<>	unsigned long long	read(lua_State *L, int index);
	template<>	std::string			read(lua_State *L, int index);
	template<>	table				read(lua_State *L, int index);

	// push a value to lua stack 
	template<typename T>  
		void push(lua_State *L, T ret)					{ type2lua<T>(L, ret); }

	template<>	void push(lua_State *L, char ret);
	template<>	void push(lua_State *L, unsigned char ret);
	template<>	void push(lua_State *L, short ret);
	template<>	void push(lua_State *L, unsigned short ret);
	template<>	void push(lua_State *L, long ret);
	template<>	void push(lua_State *L, unsigned long ret);
	template<>	void push(lua_State *L, int ret);
	template<>	void push(lua_State *L, unsigned int ret);
	template<>	void push(lua_State *L, float ret);
	template<>	void push(lua_State *L, double ret);
	template<>	void push(lua_State *L, char* ret);
	template<>	void push(lua_State *L, const char* ret);
	template<>	void push(lua_State *L, bool ret);
	template<>	void push(lua_State *L, lua_value* ret);
	template<>	void push(lua_State *L, long long ret);
	template<>	void push(lua_State *L, unsigned long long ret);
	template<>	void push(lua_State *L, const std::string& ret);
	template<>	void push(lua_State *L, std::string ret);
	template<>	void push(lua_State *L, table ret);

	// pop a value from lua stack
	template<typename T>  
		T pop(lua_State *L) { T t = read<T>(L, -1); lua_pop(L, 1); return t; }

	template<>	void	pop(lua_State *L);
	template<>	table	pop(lua_State *L);

	// functor
	template<typename RVal, typename T1=void, typename T2=void, typename T3=void, typename T4=void, typename T5=void>
		struct functor
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			typedef typename if_< isRef<T5>::value,typename baseType<T5>::type , T5 >::type	T5Base;
			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2,T3,T4,T5)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4),read<T5Base>(L,5))); return 1; }
		};

	template<typename RVal, typename T1, typename T2, typename T3, typename T4>
		struct functor<RVal,T1,T2,T3,T4> 
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2,T3,T4)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4))); return 1; }
		};

	template<typename RVal, typename T1, typename T2, typename T3>
		struct functor<RVal,T1,T2,T3> 
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2,T3)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3))); return 1; }
		};

	template<typename RVal, typename T1, typename T2>
		struct functor<RVal,T1,T2> 
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1,T2)>(L)(read<T1Base>(L,1),read<T2Base>(L,2))); return 1; }
		};

	template<typename RVal, typename T1>
		struct functor<RVal,T1> 
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)(T1)>(L)(read<T1Base>(L,1))); return 1; }
		};

	template<typename RVal>
		struct functor<RVal>
		{
			static int invoke(lua_State *L) { push(L,upvalue_<RVal(*)()>(L)()); return 1; }
		};

	//
	template<typename T1, typename T2, typename T3, typename T4, typename T5>
		struct functor<void, T1, T2, T3, T4, T5>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			typedef typename if_< isRef<T5>::value,typename baseType<T5>::type , T5 >::type	T5Base;
			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2,T3,T4,T5)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4),read<T5Base>(L,5)); return 0; }
		};

	template<typename T1, typename T2, typename T3, typename T4>
		struct functor<void, T1, T2, T3, T4>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2,T3,T4)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3),read<T4Base>(L,4)); return 0; }
		};

	template<typename T1, typename T2, typename T3>
		struct functor<void, T1, T2, T3>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2,T3)>(L)(read<T1Base>(L,1),read<T2Base>(L,2),read<T3Base>(L,3)); return 0; }
		};

	template<typename T1, typename T2>
		struct functor<void, T1, T2>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			static int invoke(lua_State *L) { upvalue_<void(*)(T1,T2)>(L)(read<T1Base>(L,1),read<T2Base>(L,2)); return 0; }
		};

	template<typename T1>
		struct functor<void, T1>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			static int invoke(lua_State *L) { upvalue_<void(*)(T1)>(L)(read<T1Base>(L,1)); return 0; }
		};

	template<>
		struct functor<void>
		{
			static int invoke(lua_State *L) { upvalue_<void(*)()>(L)(); return 0; }
		};

	// push_functor
	template<typename RVal> 
		void push_functor(lua_State *L, RVal (*func)())
		{
			lua_pushcclosure(L, functor<RVal>::invoke, 1);
		}

	template<typename RVal, typename T1> 
		void push_functor(lua_State *L, RVal (*func)(T1))
		{ 
			lua_pushcclosure(L, functor<RVal,T1>::invoke, 1);
		}

	template<typename RVal, typename T1, typename T2> 
		void push_functor(lua_State *L, RVal (*func)(T1,T2))
		{ 
			lua_pushcclosure(L, functor<RVal,T1,T2>::invoke, 1);
		}

	template<typename RVal, typename T1, typename T2, typename T3> 
		void push_functor(lua_State *L, RVal (*func)(T1,T2,T3))
		{ 
			lua_pushcclosure(L, functor<RVal,T1,T2,T3>::invoke, 1);
		}

	template<typename RVal, typename T1, typename T2, typename T3, typename T4> 
		void push_functor(lua_State *L, RVal (*func)(T1,T2,T3,T4))
		{ 
			lua_pushcclosure(L, functor<RVal,T1,T2,T3,T4>::invoke, 1);
		}

	template<typename RVal, typename T1, typename T2, typename T3, typename T4, typename T5> 
		void push_functor(lua_State *L, RVal (*func)(T1,T2,T3,T4,T5))
		{ 
			lua_pushcclosure(L, functor<RVal,T1,T2,T3,T4,T5>::invoke, 1);
		}

	// member variable
	struct var_base
	{
		virtual void get(lua_State *L) = 0;
		virtual void set(lua_State *L) = 0;
	};

	template<typename T, typename V>
		struct mem_var : var_base
	{
		V T::*_var;
		mem_var(V T::*val) : _var(val) {}
		void get(lua_State *L)	{ push(L, read<T*>(L,1)->*(_var));		}
		void set(lua_State *L)	{ read<T*>(L,1)->*(_var) = read<V>(L, 3);	}
	};

	// member function
	template<typename RVal, typename T, typename T1=void, typename T2=void, typename T3=void, typename T4=void, typename T5=void>
		struct mem_functor
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			typedef typename if_< isRef<T5>::value,typename baseType<T5>::type , T5 >::type	T5Base;
			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2,T3,T4,T5)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5),read<T5Base>(L,6)));; return 1; }
		};

	template<typename RVal, typename T, typename T1, typename T2, typename T3, typename T4> 
		struct mem_functor<RVal,T,T1,T2,T3,T4>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2,T3,T4)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5))); return 1; }
		};

	template<typename RVal, typename T, typename T1, typename T2, typename T3> 
		struct mem_functor<RVal,T,T1,T2,T3>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2,T3)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4))); return 1; }
		};

	template<typename RVal, typename T, typename T1, typename T2> 
		struct mem_functor<RVal,T,T1, T2>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1,T2)>(L))(read<T1Base>(L,2),read<T2Base>(L,3))); return 1; }
		};

	template<typename RVal, typename T, typename T1> 
		struct mem_functor<RVal,T,T1>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)(T1)>(L))(read<T1Base>(L,2))); return 1; }
		};

	template<typename RVal, typename T> 
		struct mem_functor<RVal,T>
		{
			static int invoke(lua_State *L) { push(L,(read<T*>(L,1)->*upvalue_<RVal(T::*)()>(L))()); return 1; }
		};

	template<typename T, typename T1, typename T2, typename T3, typename T4, typename T5>
		struct mem_functor<void,T,T1,T2,T3,T4,T5>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			typedef typename if_< isRef<T5>::value,typename baseType<T5>::type , T5 >::type	T5Base;
			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2,T3,T4,T5)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5),read<T5Base>(L,6)); return 0; }
		};

	template<typename T, typename T1, typename T2, typename T3, typename T4>
		struct mem_functor<void,T,T1,T2,T3,T4>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			typedef typename if_< isRef<T4>::value,typename baseType<T4>::type , T4 >::type	T4Base;
			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2,T3,T4)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4),read<T4Base>(L,5)); return 0; }
		};

	template<typename T, typename T1, typename T2, typename T3>
		struct mem_functor<void,T,T1,T2,T3>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			typedef typename if_< isRef<T3>::value,typename baseType<T3>::type , T3 >::type	T3Base;
			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2,T3)>(L))(read<T1Base>(L,2),read<T2Base>(L,3),read<T3Base>(L,4)); return 0; }
		};

	template<typename T, typename T1, typename T2>
		struct mem_functor<void,T,T1,T2>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			typedef typename if_< isRef<T2>::value,typename baseType<T2>::type , T2 >::type	T2Base;
			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1,T2)>(L))(read<T1Base>(L,2),read<T2Base>(L,3)); return 0; }
		};

	template<typename T, typename T1>
		struct mem_functor<void,T,T1>
		{
			typedef typename if_< isRef<T1>::value,typename baseType<T1>::type , T1 >::type	T1Base;
			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)(T1)>(L))(read<T1Base>(L,2)); return 0; }
		};

	template<typename T>
		struct mem_functor<void,T>
		{
			static int invoke(lua_State *L)  { (read<T*>(L,1)->*upvalue_<void(T::*)()>(L))(); return 0; }
		};

	// push_functor
	template<typename RVal, typename T>
		void push_functor(lua_State *L, RVal (T::*func)()) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T>::invoke, 1); 
		}

	template<typename RVal, typename T>
		void push_functor(lua_State *L, RVal (T::*func)() const) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1>
		void push_functor(lua_State *L, RVal (T::*func)(T1)) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1>
		void push_functor(lua_State *L, RVal (T::*func)(T1) const) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2)) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2) const) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2, typename T3>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3)) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2,T3>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2, typename T3>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3) const) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2,T3>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2, typename T3, typename T4>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4)) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2,T3,T4>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2, typename T3, typename T4>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4) const) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2,T3,T4>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2, typename T3, typename T4, typename T5>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4,T5)) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2,T3,T4,T5>::invoke, 1); 
		}

	template<typename RVal, typename T, typename T1, typename T2, typename T3, typename T4, typename T5>
		void push_functor(lua_State *L, RVal (T::*func)(T1,T2,T3,T4,T5) const) 
		{ 
			lua_pushcclosure(L, mem_functor<RVal,T,T1,T2,T3,T4,T5>::invoke, 1); 
		}

	// constructor
	template<typename T, typename T1, typename T2, typename T3, typename T4, typename T5>
		int constructor(lua_State *L) 
		{ 
			new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(read<T1>(L,2),read<T2>(L,3),read<T3>(L,4),read<T4>(L,5),read<T5>(L,6));
			push_meta(L, className<typename classType<T>::type>::name());
			lua_setmetatable(L, -2);

			return 1; 
		}

	template<typename T, typename T1, typename T2, typename T3, typename T4>
		int constructor(lua_State *L) 
		{ 
			new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(read<T1>(L,2),read<T2>(L,3),read<T3>(L,4),read<T4>(L,5));
			push_meta(L, className<typename classType<T>::type>::name());
			lua_setmetatable(L, -2);

			return 1; 
		}

	template<typename T, typename T1, typename T2, typename T3>
		int constructor(lua_State *L) 
		{ 
			new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(read<T1>(L,2),read<T2>(L,3),read<T3>(L,4));
			push_meta(L, className<typename classType<T>::type>::name());
			lua_setmetatable(L, -2);

			return 1; 
		}

	template<typename T, typename T1, typename T2>
		int constructor(lua_State *L) 
		{ 
			new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(read<T1>(L,2),read<T2>(L,3));
			push_meta(L, className<typename classType<T>::type>::name());
			lua_setmetatable(L, -2);

			return 1; 
		}

	template<typename T, typename T1>
		int constructor(lua_State *L) 
		{ 
			new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>(read<T1>(L,2));
			push_meta(L, className<typename classType<T>::type>::name());
			lua_setmetatable(L, -2);

			return 1; 
		}

	template<typename T>
		int constructor(lua_State *L) 
		{ 
			new(lua_newuserdata(L, sizeof(val2user<T>))) val2user<T>();
			push_meta(L, className<typename classType<T>::type>::name());
			lua_setmetatable(L, -2);

			return 1; 
		}

	// destroyer
	template<typename T>
		int destroyer(lua_State *L) 
		{ 
			((user*)lua_touserdata(L, 1))->~user();
			return 0;
		}

	// global function
	template<typename F> 
		void def(lua_State* L, const char* name, F func)
		{
			//		lua_pushstring(L, name);
			lua_pushlightuserdata(L, (void*)func);
			push_functor(L, func);
			//		lua_settable(L, LUA_GLOBALSINDEX);
			lua_setglobal(L, name );
		}

	// global variable
	template<typename T>
		void set(lua_State* L, const char* name, T object)
		{
			push(L, object);
			//		lua_settable(L, LUA_GLOBALSINDEX);
			lua_setglobal(L, name );
		}

	template<typename T>
		T get(lua_State* L, const char* name)
		{
			lua_getglobal(L, name);
			//		lua_pushstring(L, name);
			//		lua_gettable(L, LUA_GLOBALSINDEX);
			return pop<T>(L);
		}

	template<typename T>
		void decl(lua_State* L, const char* name, T object)
		{
			set(L, name, object);
		}

	// call
	template<typename RVal>
		RVal call(lua_State* L, const char* name)
		{
			lua_pushcclosure(L, on_error, 0);
			int errfunc = lua_gettop(L);

			lua_getglobal(L, name);
			//		lua_pushstring(L, name);
			//		lua_gettable(L, LUA_GLOBALSINDEX);
			if(lua_isfunction(L,-1))
			{
				if(lua_pcall(L, 0, 1, errfunc) != 0) lua_pop(L, 1);
			}
			else
			{
				printError(L, "aLuaBase::call() attempt to call global `%s' (not a function)", name);
			}

			lua_remove(L, -2);
			return pop<RVal>(L);
		}

	template<typename RVal, typename T1>
		RVal call(lua_State* L, const char* name, T1 arg)
		{
			lua_pushcclosure(L, on_error, 0);
			int errfunc = lua_gettop(L);

			lua_getglobal(L, name);
			//		lua_pushstring(L, name);
			//		lua_gettable(L, LUA_GLOBALSINDEX);
			if(lua_isfunction(L,-1))
			{
				push<T1>(L, arg);
				if(lua_pcall(L, 1, 1, errfunc) != 0) lua_pop(L, 1);
			}
			else
			{
				printError(L, "aLuaBase::call() attempt to call global `%s' (not a function)", name);
			}

			lua_remove(L, -2);
			return pop<RVal>(L);
		}

	template<typename RVal, typename T1, typename T2>
		RVal call(lua_State* L, const char* name, T1 arg1, T2 arg2)
		{
			lua_pushcclosure(L, on_error, 0);
			int errfunc = lua_gettop(L);

			lua_getglobal(L, name);
			//		lua_pushstring(L, name);
			//		lua_gettable(L, LUA_GLOBALSINDEX);
			if(lua_isfunction(L,-1))
			{
				push<T1>(L, arg1);
				push<T2>(L, arg2);
				if(lua_pcall(L, 2, 1, errfunc) != 0) lua_pop(L, 1);
			}
			else
			{
				printError(L, "aLuaBase::call() attempt to call global `%s' (not a function)", name);
			}

			lua_remove(L, -2);
			return pop<RVal>(L);
		}

	template<typename RVal, typename T1, typename T2, typename T3>
		RVal call(lua_State* L, const char* name, T1 arg1, T2 arg2, T3 arg3)
		{
			lua_pushcclosure(L, on_error, 0);
			int errfunc = lua_gettop(L);

			lua_getglobal(L, name);
			//		lua_pushstring(L, name);
			//		lua_gettable(L, LUA_GLOBALSINDEX);
			if(lua_isfunction(L,-1))
			{
				push<T1>(L, arg1);
				push<T2>(L, arg2);
				push<T3>(L, arg3);
				if(lua_pcall(L, 3, 1, errfunc) != 0) lua_pop(L, 1);
			}
			else
			{
				printError(L, "aLuaBase::call() attempt to call global `%s' (not a function)", name);
			}

			lua_remove(L, -2);
			return pop<RVal>(L);
		}
	template<typename RVal, typename T1, typename T2, typename T3,typename T4>
		RVal call(lua_State* L, const char* name, T1 arg1, T2 arg2, T3 arg3,T4 arg4)
		{
			lua_pushcclosure(L, on_error, 0);
			int errfunc = lua_gettop(L);

			lua_getglobal(L, name);
			//		lua_pushstring(L, name);
			//		lua_gettable(L, LUA_GLOBALSINDEX);
			if(lua_isfunction(L,-1))
			{
				push<T1>(L, arg1);
				push<T2>(L, arg2);
				push<T3>(L, arg3);
				push<T4>(L, arg4);

				if(lua_pcall(L, 4, 1, errfunc) != 0) lua_pop(L, 1);
			}
			else
			{
				printError(L, "aLuaBase::call() attempt to call global `%s' (not a function)", name);
			}

			lua_remove(L, -2);
			return pop<RVal>(L);
		}

	// class init
	template<typename T>
		void class_add(lua_State* L, const char* name) 
		{ 
			className<T>::name(name);

			//		lua_pushstring(L, name);
			lua_newtable(L);

			lua_pushstring(L, "__name");
			lua_pushstring(L, name);
			lua_rawset(L, -3);

			lua_pushstring(L, "__index");
			lua_pushcclosure(L, getMeta, 0);
			lua_rawset(L, -3);

			lua_pushstring(L, "__newindex");
			lua_pushcclosure(L, setMeta, 0);
			lua_rawset(L, -3);

			lua_pushstring(L, "__gc");
			lua_pushcclosure(L, destroyer<T>, 0);
			lua_rawset(L, -3);

			//		lua_settable(L, LUA_GLOBALSINDEX);
			lua_setglobal(L, name );
		}

	// Tinker Class Inheritence
	template<typename T, typename P>
		void class_inh(lua_State* L)
		{
			push_meta(L, className<T>::name());
			if(lua_istable(L, -1))
			{
				lua_pushstring(L, "__parent");
				push_meta(L, className<P>::name());
				lua_rawset(L, -3);
			}
			lua_pop(L, 1);
		}

	// Tinker Class Constructor
	template<typename T, typename F>
		void class_con(lua_State* L,F func)
		{
			push_meta(L, className<T>::name());
			if(lua_istable(L, -1))
			{
				lua_newtable(L);
				lua_pushstring(L, "__call");
				lua_pushcclosure(L, func, 0);
				lua_rawset(L, -3);
				lua_setmetatable(L, -2);
			}
			lua_pop(L, 1);
		}

	// Tinker Class Functions
	// notice: Can not def what arg type is like int&, it is only const int&.
	template<typename T, typename F>
		void class_def(lua_State* L, const char* name, F func) 
		{ 
			push_meta(L, className<T>::name());
			if(lua_istable(L, -1))
			{
				lua_pushstring(L, name);
				new(lua_newuserdata(L,sizeof(F))) F(func);
				push_functor(L, func);
				lua_rawset(L, -3);
			}
			lua_pop(L, 1);
		}

	// Tinker Class Variables
	template<typename T, typename BASE, typename VAR>
		void class_mem(lua_State* L, const char* name, VAR BASE::*val) 
		{ 
			push_meta(L, className<T>::name());
			if(lua_istable(L, -1))
			{
				lua_pushstring(L, name);
				new(lua_newuserdata(L,sizeof(mem_var<BASE,VAR>))) mem_var<BASE,VAR>(val);
				lua_rawset(L, -3);
			}
			lua_pop(L, 1);
		}

	template<typename T>
		struct className
		{
			// global name
			static inline const char* name( void )
			{
				return m_name;
			}
			static inline void name( const char* name )
			{
				m_name = name;
			}
			static const char* m_name;
		};
	template<typename T>
		const char* className<T>::m_name = "";

	// Table Object on Stack
	struct table_obj
	{
		table_obj(lua_State* L, int index);
		~table_obj();

		void inc_ref();
		void dec_ref();

		bool validate();

		template<typename T>
			void set(const char* name, T object)
			{
				if(validate())
				{
					lua_pushstring(m_L, name);
					push<T>(m_L, object);
					lua_settable(m_L, m_index);
				}
			}

		template<typename T>
			void set(int index, T object)
			{
				if(validate())
				{
					lua_pushinteger(m_L, index);
					push<T>(m_L, object);
					lua_settable(m_L, m_index);
				}
			}

		template<typename T>
			T get(const char* name)
			{
				if(validate())
				{
					lua_pushstring(m_L, name);
					lua_gettable(m_L, m_index);
				}
				else
				{
					lua_pushnil(m_L);
				}

				return pop<T>(m_L);
			}

		template<typename T>
			T get(int index)
			{
				if(validate())
				{
					lua_pushinteger(m_L, index);
					lua_gettable(m_L, m_index);
				}
				else
				{
					lua_pushnil(m_L);
				}

				return pop<T>(m_L);
			}

		template<typename RVal>
			RVal call(const char* name)
			{
				lua_pushcclosure(m_L, on_error, 0);
				int errfunc = lua_gettop(m_L);

				lua_getfield(m_L, -2, name);
				if(lua_isfunction(m_L,-1))
				{
					if(lua_pcall(m_L, 0, 1, errfunc) != 0) lua_pop(m_L, 1);
				}
				else
				{
					printError(m_L, "aLuaBase::call() attempt to call table `%s' (not a function)", name);
				}

				lua_remove(m_L, -2);
				return pop<RVal>(m_L);
			}

		template<typename RVal, typename T1>
			RVal call(const char* name, T1 arg1)
			{
				lua_pushcclosure(m_L, on_error, 0);
				int errfunc = lua_gettop(m_L);

				lua_pushstring(m_L, name);
				lua_gettable(m_L, m_index);
				if(lua_isfunction(m_L,-1))
				{
					push<T1>(m_L, arg1);
					if(lua_pcall(m_L, 1, 1, errfunc) != 0) lua_pop(m_L, 1);
				}
				else
				{
					printError(m_L, "aLuaBase::call() attempt to call table `%s' (not a function)", name);
				}

				lua_remove(m_L, -2);
				return pop<RVal>(m_L);
			}

		template<typename RVal, typename T1, typename T2>
			RVal call(const char* name, T1 arg1, T2 arg2)
			{
				lua_pushcclosure(m_L, on_error, 0);
				int errfunc = lua_gettop(m_L);

				lua_pushstring(m_L, name);
				lua_gettable(m_L, m_index);
				if(lua_isfunction(m_L,-1))
				{
					push<T1>(m_L, arg1);
					push<T2>(m_L, arg2);
					if(lua_pcall(m_L, 2, 1, errfunc) != 0) lua_pop(m_L, 1);
				}
				else
				{
					printError(m_L, "aLuaBase::call() attempt to call table `%s' (not a function)", name);
				}

				lua_remove(m_L, -2);
				return pop<RVal>(m_L);
			}

		template<typename RVal, typename T1, typename T2, typename T3>
			RVal call(const char* name, T1 arg1, T2 arg2, T3 arg3)
			{
				lua_pushcclosure(m_L, on_error, 0);
				int errfunc = lua_gettop(m_L);

				lua_pushstring(m_L, name);
				lua_gettable(m_L, m_index);
				if(lua_isfunction(m_L,-1))
				{
					push<T1>(m_L, arg1);
					push<T2>(m_L, arg2);
					push<T3>(m_L, arg3);
					if(lua_pcall(m_L, 3, 1, errfunc) != 0) lua_pop(m_L, 1);
				}
				else
				{
					printError(m_L, "aLuaBase::call() attempt to call table `%s' (not a function)", name);
				}

				lua_remove(m_L, -2);
				return pop<RVal>(m_L);
			}

		lua_State*		m_L;
		const void*		m_pointer;
		int				m_index;
		int				m_ref;
	};

	// Table Object Holder
	struct table
	{
		table(lua_State* L);
		table(lua_State* L, int index);
		table(lua_State* L, const char* name);
		table(const table& input);
		table& operator =(const table &rhs); 
		~table();

		template<typename T>
			void set(const char* name, T object)
			{
				m_obj->set(name, object);
			}

		template<typename T>
			void set(int index, T object)
			{
				m_obj->set(index, object);
			}

		template<typename T>
			T get(const char* name)
			{
				return m_obj->get<T>(name);
			}

		template<typename T>
			T get(int index)
			{
				return m_obj->get<T>(index);
			}

		template<typename RVal>
			RVal call(const char* name)
			{
				return m_obj->call< RVal >( name );
			}
		template<typename RVal, typename T1>
			RVal call(const char* name, T1 arg1)
			{
				return m_obj->call< RVal >( name, arg1 );
			}
		template<typename RVal, typename T1, typename T2>
			RVal call(const char* name, T1 arg1, T2 arg2)
			{
				return m_obj->call< RVal >( name, arg1, arg2 );
			}
		template<typename RVal, typename T1, typename T2, typename T3>
			RVal call(const char* name, T1 arg1, T2 arg2, T3 arg3)
			{
				return m_obj->call< RVal >( name, arg1, arg2, arg3 );
			}

		table_obj*		m_obj;
	};

} // namespace aLuaBase


#endif
