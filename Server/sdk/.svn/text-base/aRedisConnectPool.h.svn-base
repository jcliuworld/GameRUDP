#ifndef _aRedisConnectPool_H__
#define _aRedisConnectPool_H__
#include "aDef.h"
#include "aMutex.h"
#include "aRedisClient.h"

enum REDIS_STATE
{
	REDIS_HANDLE_INVALED =1 , /**<can not be used*/
	REDIS_HANLDE_VALID = 2,/**<can be userd*/
	REDIS_HANDLE_USRD = 3/**<using*/
};

/** 
 * @brief 数据库结构封装
 */
#pragma pack(1)
struct stRedis
{
        aRedisClient * redis; /**<mysql对象封装*/
        REDIS_STATE state; /**<数据库状态*/
};
#pragma pack()

/** 
 * @brief 数据库句柄定义
 */

typedef unsigned int REDIS_HANDLE;



class aRedisConnectPool : private aNoneCopyable
{
	public:
		/** 
		 * @brief 构造函数
		 */

		aRedisConnectPool();


		/** 
		 * @brief 析构函数
		 */

		~aRedisConnectPool();


		/** 
		 * @brief 初始化是数据库连接池
		 * 
		 * @param urlstring 数据库url字符串
		 * 
		 * @return 成功 true 失败 false
		 */

		bool init(const char * urlstring);
		/** 
		 * @brief 加载url配置
		 * 
		 * @param urlStr 字符串配置文件
		 * 
		 * @return 成功 true 失败 false
		 */

		bool loadConfig(const char * urlStr);

		/** 
		 * @brief 获取数据库连接池大小
		 * 
		 * @return 数据库连接池大小
		 */

		unsigned int size();
		/** 
		 * @brief 结束数据库连接池
		 */

		void final();

		/** 
		 * @brief 获取数据库句柄
		 * 
		 * @return 数据库句柄
		 */

		REDIS_HANDLE getHandle();
		/** 
		 * @brief 释放数据库句柄
		 * 
		 * @param handle 被释放的句柄
		 * 
		 * @return 成功 true 失败 false
		 */

		bool putHandle(REDIS_HANDLE handle);


		 /* @brief 获取redis数据对象
		 *
		 * @param handle 数据库句柄
		 *
		 * @return redis 数据库对象指针
		 */

		aRedisClient * getRedisByID(REDIS_HANDLE handle);

	private:
		/** 
		 * @brief 主机地址
		 */

		char _host[MAX_IPLENGTH];

		/** 
		 * @brief 密码
		 */

		char _passwd[MAX_PASSWDSIZE];
		/** 
		 * @brief 数据库名
		 */

		int _db;

		/** 
		 * @brief 端口
		 */

		unsigned int _port;


		/** 
		 * @brief 互斥体
		 */

		aMutex mutex;
		/** 
		 * @brief 数据库连接池大小
		 */

		unsigned int _poolsize;
		/** 
		 * @brief 数据库容器存储 key 数据库句柄 value 数据库结构封装
		 */

		typedef std::map<DWORD,stRedis> REDISMAP;
		/** 
		 * @brief 数据库存储器迭代器
		 */

		typedef std::map<DWORD,stRedis>::iterator REDISMAP_IT;
		/** 
		 * @brief 数据库容器
		 */

		REDISMAP _poolMap;	
};
#endif
