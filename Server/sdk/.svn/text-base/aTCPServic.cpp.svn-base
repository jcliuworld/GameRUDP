#include "aTCPServic.h"
#include "Age.h"
#include "sdkL.h"
/** 
 * @file aTCPServic.cpp
 * @brief TCP 服务框架类
 * @author ljc jc.liuworld@hotmail.com
 * @date 2010-05-18
 */


/** 
 * @brief 构造函数
 * 
 * @param name 服务器名字
 */

aTCPServic::aTCPServic(const std::string &name) : name(name),sock(-1)
{
	kdpfd = epoll_create(1);
	assert(-1 != kdpfd);
}
/** 
 * @brief 析构函数
 */
aTCPServic::~aTCPServic()
{
	TEMP_FAILURE_RETRY(::close(kdpfd));
	if (-1 == sock)
	{
		::shutdown(sock,SHUT_RD);
		TEMP_FAILURE_RETRY(::close(sock));
		sock = -1;
	}
}


/** 
 * @brief 绑定一个端口
 * 
 * @param name 名字 
 * @param port 端口号
 * 
 * @return 
 */


bool aTCPServic::bind(const std::string &name, const unsigned short port)
{
	struct sockaddr_in addr;

	if (-1 != sock)
	{
		Age::logger->error("the serivice has been init");
		return false;
	}
	sock = ::socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);

	if (-1 == sock)
	{
		Age::logger->error("create the socket fail");
		return false;
	}

	int reuse = 1;

	if( -1 == ::setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,&reuse,sizeof(reuse)))
	{
		Age::logger->error("can not set the socket to be the SO_REUSEADDR stat");
		TEMP_FAILURE_RETRY(::close(sock));
		sock = -1;
		return false;
	}

	socklen_t window_size = 128 * 1024;

	if ( -1 == ::setsockopt(sock,SOL_SOCKET,SO_RCVBUF,&window_size,sizeof(window_size)))
	{
		Age::logger->error("can not set the socket receive buffer size ");
		TEMP_FAILURE_RETRY(::close(sock));
		sock = -1;
		return false;
	}

	if ( -1 == setsockopt(sock,SOL_SOCKET,SO_SNDBUF,&window_size,sizeof(window_size)))
	{
		Age::logger->error("can not set the socket send buffer size");
		TEMP_FAILURE_RETRY(::close(sock));
		sock = -1;
		return false;
	}

	bzero(&addr,sizeof(addr));

	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = htons(INADDR_ANY);
	addr.sin_port = htons(port);

	int retcode = ::bind(sock,(struct sockaddr *)&addr,sizeof(addr));

	if ( -1 == retcode)
	{
		Age::logger->error("can not bind the prot %d",port);
		TEMP_FAILURE_RETRY(::close(sock));
		sock = -1;
		return false;
	}
	retcode = ::listen(sock,MAX_WAITQUEUE);

	if (-1 == retcode)
	{
		Age::logger->error("listen the port fail");
		TEMP_FAILURE_RETRY(::close(sock));
		sock = -1;
		return false;
	}

	struct epoll_event ev;
	ev.events = EPOLLIN;
	ev.data.ptr = NULL;
	assert( 0 == epoll_ctl(kdpfd,EPOLL_CTL_ADD,sock,&ev));

	Age::logger->info(SYS_SDK_ID_000032,name.c_str(),port);
	return true;

}


/** 
 * @brief 接收一个套接口的连接
 * 
 * @param addr 地址
 * 
 * @return 
 */


int aTCPServic::accept(struct sockaddr_in * addr)
{
	socklen_t len = sizeof(sockaddr_in);

	bzero(addr,sizeof(sockaddr_in));

	struct epoll_event ev;
	int rc = epoll_wait(kdpfd,&ev,1,T_MSEC);
	if( 1 == rc && (ev.events & EPOLLIN))
		return TEMP_FAILURE_RETRY(::accept(sock,(struct sockaddr *)addr,&len));
	return -1;
}
